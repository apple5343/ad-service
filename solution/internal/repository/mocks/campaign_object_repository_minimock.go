// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i server/internal/repository.CampaignObjectRepository -o campaign_object_repository_minimock.go -n CampaignObjectRepositoryMock -p mocks

import (
	"context"
	"server/internal/model"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// CampaignObjectRepositoryMock implements mm_repository.CampaignObjectRepository
type CampaignObjectRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcSaveImage          func(ctx context.Context, image *model.Image) (ip1 *model.Image, err error)
	funcSaveImageOrigin    string
	inspectFuncSaveImage   func(ctx context.Context, image *model.Image)
	afterSaveImageCounter  uint64
	beforeSaveImageCounter uint64
	SaveImageMock          mCampaignObjectRepositoryMockSaveImage
}

// NewCampaignObjectRepositoryMock returns a mock for mm_repository.CampaignObjectRepository
func NewCampaignObjectRepositoryMock(t minimock.Tester) *CampaignObjectRepositoryMock {
	m := &CampaignObjectRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SaveImageMock = mCampaignObjectRepositoryMockSaveImage{mock: m}
	m.SaveImageMock.callArgs = []*CampaignObjectRepositoryMockSaveImageParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mCampaignObjectRepositoryMockSaveImage struct {
	optional           bool
	mock               *CampaignObjectRepositoryMock
	defaultExpectation *CampaignObjectRepositoryMockSaveImageExpectation
	expectations       []*CampaignObjectRepositoryMockSaveImageExpectation

	callArgs []*CampaignObjectRepositoryMockSaveImageParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// CampaignObjectRepositoryMockSaveImageExpectation specifies expectation struct of the CampaignObjectRepository.SaveImage
type CampaignObjectRepositoryMockSaveImageExpectation struct {
	mock               *CampaignObjectRepositoryMock
	params             *CampaignObjectRepositoryMockSaveImageParams
	paramPtrs          *CampaignObjectRepositoryMockSaveImageParamPtrs
	expectationOrigins CampaignObjectRepositoryMockSaveImageExpectationOrigins
	results            *CampaignObjectRepositoryMockSaveImageResults
	returnOrigin       string
	Counter            uint64
}

// CampaignObjectRepositoryMockSaveImageParams contains parameters of the CampaignObjectRepository.SaveImage
type CampaignObjectRepositoryMockSaveImageParams struct {
	ctx   context.Context
	image *model.Image
}

// CampaignObjectRepositoryMockSaveImageParamPtrs contains pointers to parameters of the CampaignObjectRepository.SaveImage
type CampaignObjectRepositoryMockSaveImageParamPtrs struct {
	ctx   *context.Context
	image **model.Image
}

// CampaignObjectRepositoryMockSaveImageResults contains results of the CampaignObjectRepository.SaveImage
type CampaignObjectRepositoryMockSaveImageResults struct {
	ip1 *model.Image
	err error
}

// CampaignObjectRepositoryMockSaveImageOrigins contains origins of expectations of the CampaignObjectRepository.SaveImage
type CampaignObjectRepositoryMockSaveImageExpectationOrigins struct {
	origin      string
	originCtx   string
	originImage string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSaveImage *mCampaignObjectRepositoryMockSaveImage) Optional() *mCampaignObjectRepositoryMockSaveImage {
	mmSaveImage.optional = true
	return mmSaveImage
}

// Expect sets up expected params for CampaignObjectRepository.SaveImage
func (mmSaveImage *mCampaignObjectRepositoryMockSaveImage) Expect(ctx context.Context, image *model.Image) *mCampaignObjectRepositoryMockSaveImage {
	if mmSaveImage.mock.funcSaveImage != nil {
		mmSaveImage.mock.t.Fatalf("CampaignObjectRepositoryMock.SaveImage mock is already set by Set")
	}

	if mmSaveImage.defaultExpectation == nil {
		mmSaveImage.defaultExpectation = &CampaignObjectRepositoryMockSaveImageExpectation{}
	}

	if mmSaveImage.defaultExpectation.paramPtrs != nil {
		mmSaveImage.mock.t.Fatalf("CampaignObjectRepositoryMock.SaveImage mock is already set by ExpectParams functions")
	}

	mmSaveImage.defaultExpectation.params = &CampaignObjectRepositoryMockSaveImageParams{ctx, image}
	mmSaveImage.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSaveImage.expectations {
		if minimock.Equal(e.params, mmSaveImage.defaultExpectation.params) {
			mmSaveImage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSaveImage.defaultExpectation.params)
		}
	}

	return mmSaveImage
}

// ExpectCtxParam1 sets up expected param ctx for CampaignObjectRepository.SaveImage
func (mmSaveImage *mCampaignObjectRepositoryMockSaveImage) ExpectCtxParam1(ctx context.Context) *mCampaignObjectRepositoryMockSaveImage {
	if mmSaveImage.mock.funcSaveImage != nil {
		mmSaveImage.mock.t.Fatalf("CampaignObjectRepositoryMock.SaveImage mock is already set by Set")
	}

	if mmSaveImage.defaultExpectation == nil {
		mmSaveImage.defaultExpectation = &CampaignObjectRepositoryMockSaveImageExpectation{}
	}

	if mmSaveImage.defaultExpectation.params != nil {
		mmSaveImage.mock.t.Fatalf("CampaignObjectRepositoryMock.SaveImage mock is already set by Expect")
	}

	if mmSaveImage.defaultExpectation.paramPtrs == nil {
		mmSaveImage.defaultExpectation.paramPtrs = &CampaignObjectRepositoryMockSaveImageParamPtrs{}
	}
	mmSaveImage.defaultExpectation.paramPtrs.ctx = &ctx
	mmSaveImage.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSaveImage
}

// ExpectImageParam2 sets up expected param image for CampaignObjectRepository.SaveImage
func (mmSaveImage *mCampaignObjectRepositoryMockSaveImage) ExpectImageParam2(image *model.Image) *mCampaignObjectRepositoryMockSaveImage {
	if mmSaveImage.mock.funcSaveImage != nil {
		mmSaveImage.mock.t.Fatalf("CampaignObjectRepositoryMock.SaveImage mock is already set by Set")
	}

	if mmSaveImage.defaultExpectation == nil {
		mmSaveImage.defaultExpectation = &CampaignObjectRepositoryMockSaveImageExpectation{}
	}

	if mmSaveImage.defaultExpectation.params != nil {
		mmSaveImage.mock.t.Fatalf("CampaignObjectRepositoryMock.SaveImage mock is already set by Expect")
	}

	if mmSaveImage.defaultExpectation.paramPtrs == nil {
		mmSaveImage.defaultExpectation.paramPtrs = &CampaignObjectRepositoryMockSaveImageParamPtrs{}
	}
	mmSaveImage.defaultExpectation.paramPtrs.image = &image
	mmSaveImage.defaultExpectation.expectationOrigins.originImage = minimock.CallerInfo(1)

	return mmSaveImage
}

// Inspect accepts an inspector function that has same arguments as the CampaignObjectRepository.SaveImage
func (mmSaveImage *mCampaignObjectRepositoryMockSaveImage) Inspect(f func(ctx context.Context, image *model.Image)) *mCampaignObjectRepositoryMockSaveImage {
	if mmSaveImage.mock.inspectFuncSaveImage != nil {
		mmSaveImage.mock.t.Fatalf("Inspect function is already set for CampaignObjectRepositoryMock.SaveImage")
	}

	mmSaveImage.mock.inspectFuncSaveImage = f

	return mmSaveImage
}

// Return sets up results that will be returned by CampaignObjectRepository.SaveImage
func (mmSaveImage *mCampaignObjectRepositoryMockSaveImage) Return(ip1 *model.Image, err error) *CampaignObjectRepositoryMock {
	if mmSaveImage.mock.funcSaveImage != nil {
		mmSaveImage.mock.t.Fatalf("CampaignObjectRepositoryMock.SaveImage mock is already set by Set")
	}

	if mmSaveImage.defaultExpectation == nil {
		mmSaveImage.defaultExpectation = &CampaignObjectRepositoryMockSaveImageExpectation{mock: mmSaveImage.mock}
	}
	mmSaveImage.defaultExpectation.results = &CampaignObjectRepositoryMockSaveImageResults{ip1, err}
	mmSaveImage.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSaveImage.mock
}

// Set uses given function f to mock the CampaignObjectRepository.SaveImage method
func (mmSaveImage *mCampaignObjectRepositoryMockSaveImage) Set(f func(ctx context.Context, image *model.Image) (ip1 *model.Image, err error)) *CampaignObjectRepositoryMock {
	if mmSaveImage.defaultExpectation != nil {
		mmSaveImage.mock.t.Fatalf("Default expectation is already set for the CampaignObjectRepository.SaveImage method")
	}

	if len(mmSaveImage.expectations) > 0 {
		mmSaveImage.mock.t.Fatalf("Some expectations are already set for the CampaignObjectRepository.SaveImage method")
	}

	mmSaveImage.mock.funcSaveImage = f
	mmSaveImage.mock.funcSaveImageOrigin = minimock.CallerInfo(1)
	return mmSaveImage.mock
}

// When sets expectation for the CampaignObjectRepository.SaveImage which will trigger the result defined by the following
// Then helper
func (mmSaveImage *mCampaignObjectRepositoryMockSaveImage) When(ctx context.Context, image *model.Image) *CampaignObjectRepositoryMockSaveImageExpectation {
	if mmSaveImage.mock.funcSaveImage != nil {
		mmSaveImage.mock.t.Fatalf("CampaignObjectRepositoryMock.SaveImage mock is already set by Set")
	}

	expectation := &CampaignObjectRepositoryMockSaveImageExpectation{
		mock:               mmSaveImage.mock,
		params:             &CampaignObjectRepositoryMockSaveImageParams{ctx, image},
		expectationOrigins: CampaignObjectRepositoryMockSaveImageExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSaveImage.expectations = append(mmSaveImage.expectations, expectation)
	return expectation
}

// Then sets up CampaignObjectRepository.SaveImage return parameters for the expectation previously defined by the When method
func (e *CampaignObjectRepositoryMockSaveImageExpectation) Then(ip1 *model.Image, err error) *CampaignObjectRepositoryMock {
	e.results = &CampaignObjectRepositoryMockSaveImageResults{ip1, err}
	return e.mock
}

// Times sets number of times CampaignObjectRepository.SaveImage should be invoked
func (mmSaveImage *mCampaignObjectRepositoryMockSaveImage) Times(n uint64) *mCampaignObjectRepositoryMockSaveImage {
	if n == 0 {
		mmSaveImage.mock.t.Fatalf("Times of CampaignObjectRepositoryMock.SaveImage mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSaveImage.expectedInvocations, n)
	mmSaveImage.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSaveImage
}

func (mmSaveImage *mCampaignObjectRepositoryMockSaveImage) invocationsDone() bool {
	if len(mmSaveImage.expectations) == 0 && mmSaveImage.defaultExpectation == nil && mmSaveImage.mock.funcSaveImage == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSaveImage.mock.afterSaveImageCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSaveImage.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// SaveImage implements mm_repository.CampaignObjectRepository
func (mmSaveImage *CampaignObjectRepositoryMock) SaveImage(ctx context.Context, image *model.Image) (ip1 *model.Image, err error) {
	mm_atomic.AddUint64(&mmSaveImage.beforeSaveImageCounter, 1)
	defer mm_atomic.AddUint64(&mmSaveImage.afterSaveImageCounter, 1)

	mmSaveImage.t.Helper()

	if mmSaveImage.inspectFuncSaveImage != nil {
		mmSaveImage.inspectFuncSaveImage(ctx, image)
	}

	mm_params := CampaignObjectRepositoryMockSaveImageParams{ctx, image}

	// Record call args
	mmSaveImage.SaveImageMock.mutex.Lock()
	mmSaveImage.SaveImageMock.callArgs = append(mmSaveImage.SaveImageMock.callArgs, &mm_params)
	mmSaveImage.SaveImageMock.mutex.Unlock()

	for _, e := range mmSaveImage.SaveImageMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ip1, e.results.err
		}
	}

	if mmSaveImage.SaveImageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSaveImage.SaveImageMock.defaultExpectation.Counter, 1)
		mm_want := mmSaveImage.SaveImageMock.defaultExpectation.params
		mm_want_ptrs := mmSaveImage.SaveImageMock.defaultExpectation.paramPtrs

		mm_got := CampaignObjectRepositoryMockSaveImageParams{ctx, image}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSaveImage.t.Errorf("CampaignObjectRepositoryMock.SaveImage got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSaveImage.SaveImageMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.image != nil && !minimock.Equal(*mm_want_ptrs.image, mm_got.image) {
				mmSaveImage.t.Errorf("CampaignObjectRepositoryMock.SaveImage got unexpected parameter image, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSaveImage.SaveImageMock.defaultExpectation.expectationOrigins.originImage, *mm_want_ptrs.image, mm_got.image, minimock.Diff(*mm_want_ptrs.image, mm_got.image))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSaveImage.t.Errorf("CampaignObjectRepositoryMock.SaveImage got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSaveImage.SaveImageMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSaveImage.SaveImageMock.defaultExpectation.results
		if mm_results == nil {
			mmSaveImage.t.Fatal("No results are set for the CampaignObjectRepositoryMock.SaveImage")
		}
		return (*mm_results).ip1, (*mm_results).err
	}
	if mmSaveImage.funcSaveImage != nil {
		return mmSaveImage.funcSaveImage(ctx, image)
	}
	mmSaveImage.t.Fatalf("Unexpected call to CampaignObjectRepositoryMock.SaveImage. %v %v", ctx, image)
	return
}

// SaveImageAfterCounter returns a count of finished CampaignObjectRepositoryMock.SaveImage invocations
func (mmSaveImage *CampaignObjectRepositoryMock) SaveImageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSaveImage.afterSaveImageCounter)
}

// SaveImageBeforeCounter returns a count of CampaignObjectRepositoryMock.SaveImage invocations
func (mmSaveImage *CampaignObjectRepositoryMock) SaveImageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSaveImage.beforeSaveImageCounter)
}

// Calls returns a list of arguments used in each call to CampaignObjectRepositoryMock.SaveImage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSaveImage *mCampaignObjectRepositoryMockSaveImage) Calls() []*CampaignObjectRepositoryMockSaveImageParams {
	mmSaveImage.mutex.RLock()

	argCopy := make([]*CampaignObjectRepositoryMockSaveImageParams, len(mmSaveImage.callArgs))
	copy(argCopy, mmSaveImage.callArgs)

	mmSaveImage.mutex.RUnlock()

	return argCopy
}

// MinimockSaveImageDone returns true if the count of the SaveImage invocations corresponds
// the number of defined expectations
func (m *CampaignObjectRepositoryMock) MinimockSaveImageDone() bool {
	if m.SaveImageMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SaveImageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SaveImageMock.invocationsDone()
}

// MinimockSaveImageInspect logs each unmet expectation
func (m *CampaignObjectRepositoryMock) MinimockSaveImageInspect() {
	for _, e := range m.SaveImageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CampaignObjectRepositoryMock.SaveImage at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSaveImageCounter := mm_atomic.LoadUint64(&m.afterSaveImageCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SaveImageMock.defaultExpectation != nil && afterSaveImageCounter < 1 {
		if m.SaveImageMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to CampaignObjectRepositoryMock.SaveImage at\n%s", m.SaveImageMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to CampaignObjectRepositoryMock.SaveImage at\n%s with params: %#v", m.SaveImageMock.defaultExpectation.expectationOrigins.origin, *m.SaveImageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSaveImage != nil && afterSaveImageCounter < 1 {
		m.t.Errorf("Expected call to CampaignObjectRepositoryMock.SaveImage at\n%s", m.funcSaveImageOrigin)
	}

	if !m.SaveImageMock.invocationsDone() && afterSaveImageCounter > 0 {
		m.t.Errorf("Expected %d calls to CampaignObjectRepositoryMock.SaveImage at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SaveImageMock.expectedInvocations), m.SaveImageMock.expectedInvocationsOrigin, afterSaveImageCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CampaignObjectRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockSaveImageInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CampaignObjectRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CampaignObjectRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSaveImageDone()
}
