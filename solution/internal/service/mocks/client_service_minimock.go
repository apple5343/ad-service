// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i server/internal/service.ClientService -o client_service_minimock.go -n ClientServiceMock -p mocks

import (
	"context"
	"server/internal/model"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ClientServiceMock implements mm_service.ClientService
type ClientServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGet          func(ctx context.Context, id string) (cp1 *model.Client, err error)
	funcGetOrigin    string
	inspectFuncGet   func(ctx context.Context, id string)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mClientServiceMockGet

	funcSave          func(ctx context.Context, clients []*model.Client) (err error)
	funcSaveOrigin    string
	inspectFuncSave   func(ctx context.Context, clients []*model.Client)
	afterSaveCounter  uint64
	beforeSaveCounter uint64
	SaveMock          mClientServiceMockSave
}

// NewClientServiceMock returns a mock for mm_service.ClientService
func NewClientServiceMock(t minimock.Tester) *ClientServiceMock {
	m := &ClientServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetMock = mClientServiceMockGet{mock: m}
	m.GetMock.callArgs = []*ClientServiceMockGetParams{}

	m.SaveMock = mClientServiceMockSave{mock: m}
	m.SaveMock.callArgs = []*ClientServiceMockSaveParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mClientServiceMockGet struct {
	optional           bool
	mock               *ClientServiceMock
	defaultExpectation *ClientServiceMockGetExpectation
	expectations       []*ClientServiceMockGetExpectation

	callArgs []*ClientServiceMockGetParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ClientServiceMockGetExpectation specifies expectation struct of the ClientService.Get
type ClientServiceMockGetExpectation struct {
	mock               *ClientServiceMock
	params             *ClientServiceMockGetParams
	paramPtrs          *ClientServiceMockGetParamPtrs
	expectationOrigins ClientServiceMockGetExpectationOrigins
	results            *ClientServiceMockGetResults
	returnOrigin       string
	Counter            uint64
}

// ClientServiceMockGetParams contains parameters of the ClientService.Get
type ClientServiceMockGetParams struct {
	ctx context.Context
	id  string
}

// ClientServiceMockGetParamPtrs contains pointers to parameters of the ClientService.Get
type ClientServiceMockGetParamPtrs struct {
	ctx *context.Context
	id  *string
}

// ClientServiceMockGetResults contains results of the ClientService.Get
type ClientServiceMockGetResults struct {
	cp1 *model.Client
	err error
}

// ClientServiceMockGetOrigins contains origins of expectations of the ClientService.Get
type ClientServiceMockGetExpectationOrigins struct {
	origin    string
	originCtx string
	originId  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGet *mClientServiceMockGet) Optional() *mClientServiceMockGet {
	mmGet.optional = true
	return mmGet
}

// Expect sets up expected params for ClientService.Get
func (mmGet *mClientServiceMockGet) Expect(ctx context.Context, id string) *mClientServiceMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ClientServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ClientServiceMockGetExpectation{}
	}

	if mmGet.defaultExpectation.paramPtrs != nil {
		mmGet.mock.t.Fatalf("ClientServiceMock.Get mock is already set by ExpectParams functions")
	}

	mmGet.defaultExpectation.params = &ClientServiceMockGetParams{ctx, id}
	mmGet.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// ExpectCtxParam1 sets up expected param ctx for ClientService.Get
func (mmGet *mClientServiceMockGet) ExpectCtxParam1(ctx context.Context) *mClientServiceMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ClientServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ClientServiceMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("ClientServiceMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &ClientServiceMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.ctx = &ctx
	mmGet.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGet
}

// ExpectIdParam2 sets up expected param id for ClientService.Get
func (mmGet *mClientServiceMockGet) ExpectIdParam2(id string) *mClientServiceMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ClientServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ClientServiceMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("ClientServiceMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &ClientServiceMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.id = &id
	mmGet.defaultExpectation.expectationOrigins.originId = minimock.CallerInfo(1)

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the ClientService.Get
func (mmGet *mClientServiceMockGet) Inspect(f func(ctx context.Context, id string)) *mClientServiceMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for ClientServiceMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by ClientService.Get
func (mmGet *mClientServiceMockGet) Return(cp1 *model.Client, err error) *ClientServiceMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ClientServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ClientServiceMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &ClientServiceMockGetResults{cp1, err}
	mmGet.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGet.mock
}

// Set uses given function f to mock the ClientService.Get method
func (mmGet *mClientServiceMockGet) Set(f func(ctx context.Context, id string) (cp1 *model.Client, err error)) *ClientServiceMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the ClientService.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the ClientService.Get method")
	}

	mmGet.mock.funcGet = f
	mmGet.mock.funcGetOrigin = minimock.CallerInfo(1)
	return mmGet.mock
}

// When sets expectation for the ClientService.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mClientServiceMockGet) When(ctx context.Context, id string) *ClientServiceMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ClientServiceMock.Get mock is already set by Set")
	}

	expectation := &ClientServiceMockGetExpectation{
		mock:               mmGet.mock,
		params:             &ClientServiceMockGetParams{ctx, id},
		expectationOrigins: ClientServiceMockGetExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up ClientService.Get return parameters for the expectation previously defined by the When method
func (e *ClientServiceMockGetExpectation) Then(cp1 *model.Client, err error) *ClientServiceMock {
	e.results = &ClientServiceMockGetResults{cp1, err}
	return e.mock
}

// Times sets number of times ClientService.Get should be invoked
func (mmGet *mClientServiceMockGet) Times(n uint64) *mClientServiceMockGet {
	if n == 0 {
		mmGet.mock.t.Fatalf("Times of ClientServiceMock.Get mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGet.expectedInvocations, n)
	mmGet.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGet
}

func (mmGet *mClientServiceMockGet) invocationsDone() bool {
	if len(mmGet.expectations) == 0 && mmGet.defaultExpectation == nil && mmGet.mock.funcGet == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGet.mock.afterGetCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGet.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Get implements mm_service.ClientService
func (mmGet *ClientServiceMock) Get(ctx context.Context, id string) (cp1 *model.Client, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	mmGet.t.Helper()

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, id)
	}

	mm_params := ClientServiceMockGetParams{ctx, id}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, &mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_want_ptrs := mmGet.GetMock.defaultExpectation.paramPtrs

		mm_got := ClientServiceMockGetParams{ctx, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGet.t.Errorf("ClientServiceMock.Get got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGet.GetMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmGet.t.Errorf("ClientServiceMock.Get got unexpected parameter id, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGet.GetMock.defaultExpectation.expectationOrigins.originId, *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("ClientServiceMock.Get got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGet.GetMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the ClientServiceMock.Get")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, id)
	}
	mmGet.t.Fatalf("Unexpected call to ClientServiceMock.Get. %v %v", ctx, id)
	return
}

// GetAfterCounter returns a count of finished ClientServiceMock.Get invocations
func (mmGet *ClientServiceMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of ClientServiceMock.Get invocations
func (mmGet *ClientServiceMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to ClientServiceMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mClientServiceMockGet) Calls() []*ClientServiceMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*ClientServiceMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *ClientServiceMock) MinimockGetDone() bool {
	if m.GetMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetMock.invocationsDone()
}

// MinimockGetInspect logs each unmet expectation
func (m *ClientServiceMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ClientServiceMock.Get at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetCounter := mm_atomic.LoadUint64(&m.afterGetCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && afterGetCounter < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ClientServiceMock.Get at\n%s", m.GetMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ClientServiceMock.Get at\n%s with params: %#v", m.GetMock.defaultExpectation.expectationOrigins.origin, *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && afterGetCounter < 1 {
		m.t.Errorf("Expected call to ClientServiceMock.Get at\n%s", m.funcGetOrigin)
	}

	if !m.GetMock.invocationsDone() && afterGetCounter > 0 {
		m.t.Errorf("Expected %d calls to ClientServiceMock.Get at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetMock.expectedInvocations), m.GetMock.expectedInvocationsOrigin, afterGetCounter)
	}
}

type mClientServiceMockSave struct {
	optional           bool
	mock               *ClientServiceMock
	defaultExpectation *ClientServiceMockSaveExpectation
	expectations       []*ClientServiceMockSaveExpectation

	callArgs []*ClientServiceMockSaveParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ClientServiceMockSaveExpectation specifies expectation struct of the ClientService.Save
type ClientServiceMockSaveExpectation struct {
	mock               *ClientServiceMock
	params             *ClientServiceMockSaveParams
	paramPtrs          *ClientServiceMockSaveParamPtrs
	expectationOrigins ClientServiceMockSaveExpectationOrigins
	results            *ClientServiceMockSaveResults
	returnOrigin       string
	Counter            uint64
}

// ClientServiceMockSaveParams contains parameters of the ClientService.Save
type ClientServiceMockSaveParams struct {
	ctx     context.Context
	clients []*model.Client
}

// ClientServiceMockSaveParamPtrs contains pointers to parameters of the ClientService.Save
type ClientServiceMockSaveParamPtrs struct {
	ctx     *context.Context
	clients *[]*model.Client
}

// ClientServiceMockSaveResults contains results of the ClientService.Save
type ClientServiceMockSaveResults struct {
	err error
}

// ClientServiceMockSaveOrigins contains origins of expectations of the ClientService.Save
type ClientServiceMockSaveExpectationOrigins struct {
	origin        string
	originCtx     string
	originClients string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSave *mClientServiceMockSave) Optional() *mClientServiceMockSave {
	mmSave.optional = true
	return mmSave
}

// Expect sets up expected params for ClientService.Save
func (mmSave *mClientServiceMockSave) Expect(ctx context.Context, clients []*model.Client) *mClientServiceMockSave {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("ClientServiceMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &ClientServiceMockSaveExpectation{}
	}

	if mmSave.defaultExpectation.paramPtrs != nil {
		mmSave.mock.t.Fatalf("ClientServiceMock.Save mock is already set by ExpectParams functions")
	}

	mmSave.defaultExpectation.params = &ClientServiceMockSaveParams{ctx, clients}
	mmSave.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSave.expectations {
		if minimock.Equal(e.params, mmSave.defaultExpectation.params) {
			mmSave.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSave.defaultExpectation.params)
		}
	}

	return mmSave
}

// ExpectCtxParam1 sets up expected param ctx for ClientService.Save
func (mmSave *mClientServiceMockSave) ExpectCtxParam1(ctx context.Context) *mClientServiceMockSave {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("ClientServiceMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &ClientServiceMockSaveExpectation{}
	}

	if mmSave.defaultExpectation.params != nil {
		mmSave.mock.t.Fatalf("ClientServiceMock.Save mock is already set by Expect")
	}

	if mmSave.defaultExpectation.paramPtrs == nil {
		mmSave.defaultExpectation.paramPtrs = &ClientServiceMockSaveParamPtrs{}
	}
	mmSave.defaultExpectation.paramPtrs.ctx = &ctx
	mmSave.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSave
}

// ExpectClientsParam2 sets up expected param clients for ClientService.Save
func (mmSave *mClientServiceMockSave) ExpectClientsParam2(clients []*model.Client) *mClientServiceMockSave {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("ClientServiceMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &ClientServiceMockSaveExpectation{}
	}

	if mmSave.defaultExpectation.params != nil {
		mmSave.mock.t.Fatalf("ClientServiceMock.Save mock is already set by Expect")
	}

	if mmSave.defaultExpectation.paramPtrs == nil {
		mmSave.defaultExpectation.paramPtrs = &ClientServiceMockSaveParamPtrs{}
	}
	mmSave.defaultExpectation.paramPtrs.clients = &clients
	mmSave.defaultExpectation.expectationOrigins.originClients = minimock.CallerInfo(1)

	return mmSave
}

// Inspect accepts an inspector function that has same arguments as the ClientService.Save
func (mmSave *mClientServiceMockSave) Inspect(f func(ctx context.Context, clients []*model.Client)) *mClientServiceMockSave {
	if mmSave.mock.inspectFuncSave != nil {
		mmSave.mock.t.Fatalf("Inspect function is already set for ClientServiceMock.Save")
	}

	mmSave.mock.inspectFuncSave = f

	return mmSave
}

// Return sets up results that will be returned by ClientService.Save
func (mmSave *mClientServiceMockSave) Return(err error) *ClientServiceMock {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("ClientServiceMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &ClientServiceMockSaveExpectation{mock: mmSave.mock}
	}
	mmSave.defaultExpectation.results = &ClientServiceMockSaveResults{err}
	mmSave.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSave.mock
}

// Set uses given function f to mock the ClientService.Save method
func (mmSave *mClientServiceMockSave) Set(f func(ctx context.Context, clients []*model.Client) (err error)) *ClientServiceMock {
	if mmSave.defaultExpectation != nil {
		mmSave.mock.t.Fatalf("Default expectation is already set for the ClientService.Save method")
	}

	if len(mmSave.expectations) > 0 {
		mmSave.mock.t.Fatalf("Some expectations are already set for the ClientService.Save method")
	}

	mmSave.mock.funcSave = f
	mmSave.mock.funcSaveOrigin = minimock.CallerInfo(1)
	return mmSave.mock
}

// When sets expectation for the ClientService.Save which will trigger the result defined by the following
// Then helper
func (mmSave *mClientServiceMockSave) When(ctx context.Context, clients []*model.Client) *ClientServiceMockSaveExpectation {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("ClientServiceMock.Save mock is already set by Set")
	}

	expectation := &ClientServiceMockSaveExpectation{
		mock:               mmSave.mock,
		params:             &ClientServiceMockSaveParams{ctx, clients},
		expectationOrigins: ClientServiceMockSaveExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSave.expectations = append(mmSave.expectations, expectation)
	return expectation
}

// Then sets up ClientService.Save return parameters for the expectation previously defined by the When method
func (e *ClientServiceMockSaveExpectation) Then(err error) *ClientServiceMock {
	e.results = &ClientServiceMockSaveResults{err}
	return e.mock
}

// Times sets number of times ClientService.Save should be invoked
func (mmSave *mClientServiceMockSave) Times(n uint64) *mClientServiceMockSave {
	if n == 0 {
		mmSave.mock.t.Fatalf("Times of ClientServiceMock.Save mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSave.expectedInvocations, n)
	mmSave.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSave
}

func (mmSave *mClientServiceMockSave) invocationsDone() bool {
	if len(mmSave.expectations) == 0 && mmSave.defaultExpectation == nil && mmSave.mock.funcSave == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSave.mock.afterSaveCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSave.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Save implements mm_service.ClientService
func (mmSave *ClientServiceMock) Save(ctx context.Context, clients []*model.Client) (err error) {
	mm_atomic.AddUint64(&mmSave.beforeSaveCounter, 1)
	defer mm_atomic.AddUint64(&mmSave.afterSaveCounter, 1)

	mmSave.t.Helper()

	if mmSave.inspectFuncSave != nil {
		mmSave.inspectFuncSave(ctx, clients)
	}

	mm_params := ClientServiceMockSaveParams{ctx, clients}

	// Record call args
	mmSave.SaveMock.mutex.Lock()
	mmSave.SaveMock.callArgs = append(mmSave.SaveMock.callArgs, &mm_params)
	mmSave.SaveMock.mutex.Unlock()

	for _, e := range mmSave.SaveMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSave.SaveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSave.SaveMock.defaultExpectation.Counter, 1)
		mm_want := mmSave.SaveMock.defaultExpectation.params
		mm_want_ptrs := mmSave.SaveMock.defaultExpectation.paramPtrs

		mm_got := ClientServiceMockSaveParams{ctx, clients}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSave.t.Errorf("ClientServiceMock.Save got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSave.SaveMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.clients != nil && !minimock.Equal(*mm_want_ptrs.clients, mm_got.clients) {
				mmSave.t.Errorf("ClientServiceMock.Save got unexpected parameter clients, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSave.SaveMock.defaultExpectation.expectationOrigins.originClients, *mm_want_ptrs.clients, mm_got.clients, minimock.Diff(*mm_want_ptrs.clients, mm_got.clients))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSave.t.Errorf("ClientServiceMock.Save got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSave.SaveMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSave.SaveMock.defaultExpectation.results
		if mm_results == nil {
			mmSave.t.Fatal("No results are set for the ClientServiceMock.Save")
		}
		return (*mm_results).err
	}
	if mmSave.funcSave != nil {
		return mmSave.funcSave(ctx, clients)
	}
	mmSave.t.Fatalf("Unexpected call to ClientServiceMock.Save. %v %v", ctx, clients)
	return
}

// SaveAfterCounter returns a count of finished ClientServiceMock.Save invocations
func (mmSave *ClientServiceMock) SaveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSave.afterSaveCounter)
}

// SaveBeforeCounter returns a count of ClientServiceMock.Save invocations
func (mmSave *ClientServiceMock) SaveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSave.beforeSaveCounter)
}

// Calls returns a list of arguments used in each call to ClientServiceMock.Save.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSave *mClientServiceMockSave) Calls() []*ClientServiceMockSaveParams {
	mmSave.mutex.RLock()

	argCopy := make([]*ClientServiceMockSaveParams, len(mmSave.callArgs))
	copy(argCopy, mmSave.callArgs)

	mmSave.mutex.RUnlock()

	return argCopy
}

// MinimockSaveDone returns true if the count of the Save invocations corresponds
// the number of defined expectations
func (m *ClientServiceMock) MinimockSaveDone() bool {
	if m.SaveMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SaveMock.invocationsDone()
}

// MinimockSaveInspect logs each unmet expectation
func (m *ClientServiceMock) MinimockSaveInspect() {
	for _, e := range m.SaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ClientServiceMock.Save at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSaveCounter := mm_atomic.LoadUint64(&m.afterSaveCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SaveMock.defaultExpectation != nil && afterSaveCounter < 1 {
		if m.SaveMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ClientServiceMock.Save at\n%s", m.SaveMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ClientServiceMock.Save at\n%s with params: %#v", m.SaveMock.defaultExpectation.expectationOrigins.origin, *m.SaveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSave != nil && afterSaveCounter < 1 {
		m.t.Errorf("Expected call to ClientServiceMock.Save at\n%s", m.funcSaveOrigin)
	}

	if !m.SaveMock.invocationsDone() && afterSaveCounter > 0 {
		m.t.Errorf("Expected %d calls to ClientServiceMock.Save at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SaveMock.expectedInvocations), m.SaveMock.expectedInvocationsOrigin, afterSaveCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ClientServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetInspect()

			m.MinimockSaveInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ClientServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ClientServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetDone() &&
		m.MinimockSaveDone()
}
