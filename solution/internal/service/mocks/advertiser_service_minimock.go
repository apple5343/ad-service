// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i server/internal/service.AdvertiserService -o advertiser_service_minimock.go -n AdvertiserServiceMock -p mocks

import (
	"context"
	"server/internal/model"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// AdvertiserServiceMock implements mm_service.AdvertiserService
type AdvertiserServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcAddScore          func(ctx context.Context, score *model.Score) (err error)
	funcAddScoreOrigin    string
	inspectFuncAddScore   func(ctx context.Context, score *model.Score)
	afterAddScoreCounter  uint64
	beforeAddScoreCounter uint64
	AddScoreMock          mAdvertiserServiceMockAddScore

	funcGenerate          func(ctx context.Context, adveristerID string, campaignName string) (s1 string, err error)
	funcGenerateOrigin    string
	inspectFuncGenerate   func(ctx context.Context, adveristerID string, campaignName string)
	afterGenerateCounter  uint64
	beforeGenerateCounter uint64
	GenerateMock          mAdvertiserServiceMockGenerate

	funcGet          func(ctx context.Context, id string) (ap1 *model.Advertiser, err error)
	funcGetOrigin    string
	inspectFuncGet   func(ctx context.Context, id string)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mAdvertiserServiceMockGet

	funcSave          func(ctx context.Context, advertisers []*model.Advertiser) (err error)
	funcSaveOrigin    string
	inspectFuncSave   func(ctx context.Context, advertisers []*model.Advertiser)
	afterSaveCounter  uint64
	beforeSaveCounter uint64
	SaveMock          mAdvertiserServiceMockSave
}

// NewAdvertiserServiceMock returns a mock for mm_service.AdvertiserService
func NewAdvertiserServiceMock(t minimock.Tester) *AdvertiserServiceMock {
	m := &AdvertiserServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddScoreMock = mAdvertiserServiceMockAddScore{mock: m}
	m.AddScoreMock.callArgs = []*AdvertiserServiceMockAddScoreParams{}

	m.GenerateMock = mAdvertiserServiceMockGenerate{mock: m}
	m.GenerateMock.callArgs = []*AdvertiserServiceMockGenerateParams{}

	m.GetMock = mAdvertiserServiceMockGet{mock: m}
	m.GetMock.callArgs = []*AdvertiserServiceMockGetParams{}

	m.SaveMock = mAdvertiserServiceMockSave{mock: m}
	m.SaveMock.callArgs = []*AdvertiserServiceMockSaveParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mAdvertiserServiceMockAddScore struct {
	optional           bool
	mock               *AdvertiserServiceMock
	defaultExpectation *AdvertiserServiceMockAddScoreExpectation
	expectations       []*AdvertiserServiceMockAddScoreExpectation

	callArgs []*AdvertiserServiceMockAddScoreParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AdvertiserServiceMockAddScoreExpectation specifies expectation struct of the AdvertiserService.AddScore
type AdvertiserServiceMockAddScoreExpectation struct {
	mock               *AdvertiserServiceMock
	params             *AdvertiserServiceMockAddScoreParams
	paramPtrs          *AdvertiserServiceMockAddScoreParamPtrs
	expectationOrigins AdvertiserServiceMockAddScoreExpectationOrigins
	results            *AdvertiserServiceMockAddScoreResults
	returnOrigin       string
	Counter            uint64
}

// AdvertiserServiceMockAddScoreParams contains parameters of the AdvertiserService.AddScore
type AdvertiserServiceMockAddScoreParams struct {
	ctx   context.Context
	score *model.Score
}

// AdvertiserServiceMockAddScoreParamPtrs contains pointers to parameters of the AdvertiserService.AddScore
type AdvertiserServiceMockAddScoreParamPtrs struct {
	ctx   *context.Context
	score **model.Score
}

// AdvertiserServiceMockAddScoreResults contains results of the AdvertiserService.AddScore
type AdvertiserServiceMockAddScoreResults struct {
	err error
}

// AdvertiserServiceMockAddScoreOrigins contains origins of expectations of the AdvertiserService.AddScore
type AdvertiserServiceMockAddScoreExpectationOrigins struct {
	origin      string
	originCtx   string
	originScore string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmAddScore *mAdvertiserServiceMockAddScore) Optional() *mAdvertiserServiceMockAddScore {
	mmAddScore.optional = true
	return mmAddScore
}

// Expect sets up expected params for AdvertiserService.AddScore
func (mmAddScore *mAdvertiserServiceMockAddScore) Expect(ctx context.Context, score *model.Score) *mAdvertiserServiceMockAddScore {
	if mmAddScore.mock.funcAddScore != nil {
		mmAddScore.mock.t.Fatalf("AdvertiserServiceMock.AddScore mock is already set by Set")
	}

	if mmAddScore.defaultExpectation == nil {
		mmAddScore.defaultExpectation = &AdvertiserServiceMockAddScoreExpectation{}
	}

	if mmAddScore.defaultExpectation.paramPtrs != nil {
		mmAddScore.mock.t.Fatalf("AdvertiserServiceMock.AddScore mock is already set by ExpectParams functions")
	}

	mmAddScore.defaultExpectation.params = &AdvertiserServiceMockAddScoreParams{ctx, score}
	mmAddScore.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmAddScore.expectations {
		if minimock.Equal(e.params, mmAddScore.defaultExpectation.params) {
			mmAddScore.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddScore.defaultExpectation.params)
		}
	}

	return mmAddScore
}

// ExpectCtxParam1 sets up expected param ctx for AdvertiserService.AddScore
func (mmAddScore *mAdvertiserServiceMockAddScore) ExpectCtxParam1(ctx context.Context) *mAdvertiserServiceMockAddScore {
	if mmAddScore.mock.funcAddScore != nil {
		mmAddScore.mock.t.Fatalf("AdvertiserServiceMock.AddScore mock is already set by Set")
	}

	if mmAddScore.defaultExpectation == nil {
		mmAddScore.defaultExpectation = &AdvertiserServiceMockAddScoreExpectation{}
	}

	if mmAddScore.defaultExpectation.params != nil {
		mmAddScore.mock.t.Fatalf("AdvertiserServiceMock.AddScore mock is already set by Expect")
	}

	if mmAddScore.defaultExpectation.paramPtrs == nil {
		mmAddScore.defaultExpectation.paramPtrs = &AdvertiserServiceMockAddScoreParamPtrs{}
	}
	mmAddScore.defaultExpectation.paramPtrs.ctx = &ctx
	mmAddScore.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmAddScore
}

// ExpectScoreParam2 sets up expected param score for AdvertiserService.AddScore
func (mmAddScore *mAdvertiserServiceMockAddScore) ExpectScoreParam2(score *model.Score) *mAdvertiserServiceMockAddScore {
	if mmAddScore.mock.funcAddScore != nil {
		mmAddScore.mock.t.Fatalf("AdvertiserServiceMock.AddScore mock is already set by Set")
	}

	if mmAddScore.defaultExpectation == nil {
		mmAddScore.defaultExpectation = &AdvertiserServiceMockAddScoreExpectation{}
	}

	if mmAddScore.defaultExpectation.params != nil {
		mmAddScore.mock.t.Fatalf("AdvertiserServiceMock.AddScore mock is already set by Expect")
	}

	if mmAddScore.defaultExpectation.paramPtrs == nil {
		mmAddScore.defaultExpectation.paramPtrs = &AdvertiserServiceMockAddScoreParamPtrs{}
	}
	mmAddScore.defaultExpectation.paramPtrs.score = &score
	mmAddScore.defaultExpectation.expectationOrigins.originScore = minimock.CallerInfo(1)

	return mmAddScore
}

// Inspect accepts an inspector function that has same arguments as the AdvertiserService.AddScore
func (mmAddScore *mAdvertiserServiceMockAddScore) Inspect(f func(ctx context.Context, score *model.Score)) *mAdvertiserServiceMockAddScore {
	if mmAddScore.mock.inspectFuncAddScore != nil {
		mmAddScore.mock.t.Fatalf("Inspect function is already set for AdvertiserServiceMock.AddScore")
	}

	mmAddScore.mock.inspectFuncAddScore = f

	return mmAddScore
}

// Return sets up results that will be returned by AdvertiserService.AddScore
func (mmAddScore *mAdvertiserServiceMockAddScore) Return(err error) *AdvertiserServiceMock {
	if mmAddScore.mock.funcAddScore != nil {
		mmAddScore.mock.t.Fatalf("AdvertiserServiceMock.AddScore mock is already set by Set")
	}

	if mmAddScore.defaultExpectation == nil {
		mmAddScore.defaultExpectation = &AdvertiserServiceMockAddScoreExpectation{mock: mmAddScore.mock}
	}
	mmAddScore.defaultExpectation.results = &AdvertiserServiceMockAddScoreResults{err}
	mmAddScore.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmAddScore.mock
}

// Set uses given function f to mock the AdvertiserService.AddScore method
func (mmAddScore *mAdvertiserServiceMockAddScore) Set(f func(ctx context.Context, score *model.Score) (err error)) *AdvertiserServiceMock {
	if mmAddScore.defaultExpectation != nil {
		mmAddScore.mock.t.Fatalf("Default expectation is already set for the AdvertiserService.AddScore method")
	}

	if len(mmAddScore.expectations) > 0 {
		mmAddScore.mock.t.Fatalf("Some expectations are already set for the AdvertiserService.AddScore method")
	}

	mmAddScore.mock.funcAddScore = f
	mmAddScore.mock.funcAddScoreOrigin = minimock.CallerInfo(1)
	return mmAddScore.mock
}

// When sets expectation for the AdvertiserService.AddScore which will trigger the result defined by the following
// Then helper
func (mmAddScore *mAdvertiserServiceMockAddScore) When(ctx context.Context, score *model.Score) *AdvertiserServiceMockAddScoreExpectation {
	if mmAddScore.mock.funcAddScore != nil {
		mmAddScore.mock.t.Fatalf("AdvertiserServiceMock.AddScore mock is already set by Set")
	}

	expectation := &AdvertiserServiceMockAddScoreExpectation{
		mock:               mmAddScore.mock,
		params:             &AdvertiserServiceMockAddScoreParams{ctx, score},
		expectationOrigins: AdvertiserServiceMockAddScoreExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmAddScore.expectations = append(mmAddScore.expectations, expectation)
	return expectation
}

// Then sets up AdvertiserService.AddScore return parameters for the expectation previously defined by the When method
func (e *AdvertiserServiceMockAddScoreExpectation) Then(err error) *AdvertiserServiceMock {
	e.results = &AdvertiserServiceMockAddScoreResults{err}
	return e.mock
}

// Times sets number of times AdvertiserService.AddScore should be invoked
func (mmAddScore *mAdvertiserServiceMockAddScore) Times(n uint64) *mAdvertiserServiceMockAddScore {
	if n == 0 {
		mmAddScore.mock.t.Fatalf("Times of AdvertiserServiceMock.AddScore mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmAddScore.expectedInvocations, n)
	mmAddScore.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmAddScore
}

func (mmAddScore *mAdvertiserServiceMockAddScore) invocationsDone() bool {
	if len(mmAddScore.expectations) == 0 && mmAddScore.defaultExpectation == nil && mmAddScore.mock.funcAddScore == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmAddScore.mock.afterAddScoreCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmAddScore.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// AddScore implements mm_service.AdvertiserService
func (mmAddScore *AdvertiserServiceMock) AddScore(ctx context.Context, score *model.Score) (err error) {
	mm_atomic.AddUint64(&mmAddScore.beforeAddScoreCounter, 1)
	defer mm_atomic.AddUint64(&mmAddScore.afterAddScoreCounter, 1)

	mmAddScore.t.Helper()

	if mmAddScore.inspectFuncAddScore != nil {
		mmAddScore.inspectFuncAddScore(ctx, score)
	}

	mm_params := AdvertiserServiceMockAddScoreParams{ctx, score}

	// Record call args
	mmAddScore.AddScoreMock.mutex.Lock()
	mmAddScore.AddScoreMock.callArgs = append(mmAddScore.AddScoreMock.callArgs, &mm_params)
	mmAddScore.AddScoreMock.mutex.Unlock()

	for _, e := range mmAddScore.AddScoreMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmAddScore.AddScoreMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddScore.AddScoreMock.defaultExpectation.Counter, 1)
		mm_want := mmAddScore.AddScoreMock.defaultExpectation.params
		mm_want_ptrs := mmAddScore.AddScoreMock.defaultExpectation.paramPtrs

		mm_got := AdvertiserServiceMockAddScoreParams{ctx, score}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmAddScore.t.Errorf("AdvertiserServiceMock.AddScore got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddScore.AddScoreMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.score != nil && !minimock.Equal(*mm_want_ptrs.score, mm_got.score) {
				mmAddScore.t.Errorf("AdvertiserServiceMock.AddScore got unexpected parameter score, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddScore.AddScoreMock.defaultExpectation.expectationOrigins.originScore, *mm_want_ptrs.score, mm_got.score, minimock.Diff(*mm_want_ptrs.score, mm_got.score))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddScore.t.Errorf("AdvertiserServiceMock.AddScore got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmAddScore.AddScoreMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAddScore.AddScoreMock.defaultExpectation.results
		if mm_results == nil {
			mmAddScore.t.Fatal("No results are set for the AdvertiserServiceMock.AddScore")
		}
		return (*mm_results).err
	}
	if mmAddScore.funcAddScore != nil {
		return mmAddScore.funcAddScore(ctx, score)
	}
	mmAddScore.t.Fatalf("Unexpected call to AdvertiserServiceMock.AddScore. %v %v", ctx, score)
	return
}

// AddScoreAfterCounter returns a count of finished AdvertiserServiceMock.AddScore invocations
func (mmAddScore *AdvertiserServiceMock) AddScoreAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddScore.afterAddScoreCounter)
}

// AddScoreBeforeCounter returns a count of AdvertiserServiceMock.AddScore invocations
func (mmAddScore *AdvertiserServiceMock) AddScoreBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddScore.beforeAddScoreCounter)
}

// Calls returns a list of arguments used in each call to AdvertiserServiceMock.AddScore.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddScore *mAdvertiserServiceMockAddScore) Calls() []*AdvertiserServiceMockAddScoreParams {
	mmAddScore.mutex.RLock()

	argCopy := make([]*AdvertiserServiceMockAddScoreParams, len(mmAddScore.callArgs))
	copy(argCopy, mmAddScore.callArgs)

	mmAddScore.mutex.RUnlock()

	return argCopy
}

// MinimockAddScoreDone returns true if the count of the AddScore invocations corresponds
// the number of defined expectations
func (m *AdvertiserServiceMock) MinimockAddScoreDone() bool {
	if m.AddScoreMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.AddScoreMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.AddScoreMock.invocationsDone()
}

// MinimockAddScoreInspect logs each unmet expectation
func (m *AdvertiserServiceMock) MinimockAddScoreInspect() {
	for _, e := range m.AddScoreMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AdvertiserServiceMock.AddScore at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterAddScoreCounter := mm_atomic.LoadUint64(&m.afterAddScoreCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.AddScoreMock.defaultExpectation != nil && afterAddScoreCounter < 1 {
		if m.AddScoreMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AdvertiserServiceMock.AddScore at\n%s", m.AddScoreMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AdvertiserServiceMock.AddScore at\n%s with params: %#v", m.AddScoreMock.defaultExpectation.expectationOrigins.origin, *m.AddScoreMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddScore != nil && afterAddScoreCounter < 1 {
		m.t.Errorf("Expected call to AdvertiserServiceMock.AddScore at\n%s", m.funcAddScoreOrigin)
	}

	if !m.AddScoreMock.invocationsDone() && afterAddScoreCounter > 0 {
		m.t.Errorf("Expected %d calls to AdvertiserServiceMock.AddScore at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.AddScoreMock.expectedInvocations), m.AddScoreMock.expectedInvocationsOrigin, afterAddScoreCounter)
	}
}

type mAdvertiserServiceMockGenerate struct {
	optional           bool
	mock               *AdvertiserServiceMock
	defaultExpectation *AdvertiserServiceMockGenerateExpectation
	expectations       []*AdvertiserServiceMockGenerateExpectation

	callArgs []*AdvertiserServiceMockGenerateParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AdvertiserServiceMockGenerateExpectation specifies expectation struct of the AdvertiserService.Generate
type AdvertiserServiceMockGenerateExpectation struct {
	mock               *AdvertiserServiceMock
	params             *AdvertiserServiceMockGenerateParams
	paramPtrs          *AdvertiserServiceMockGenerateParamPtrs
	expectationOrigins AdvertiserServiceMockGenerateExpectationOrigins
	results            *AdvertiserServiceMockGenerateResults
	returnOrigin       string
	Counter            uint64
}

// AdvertiserServiceMockGenerateParams contains parameters of the AdvertiserService.Generate
type AdvertiserServiceMockGenerateParams struct {
	ctx          context.Context
	adveristerID string
	campaignName string
}

// AdvertiserServiceMockGenerateParamPtrs contains pointers to parameters of the AdvertiserService.Generate
type AdvertiserServiceMockGenerateParamPtrs struct {
	ctx          *context.Context
	adveristerID *string
	campaignName *string
}

// AdvertiserServiceMockGenerateResults contains results of the AdvertiserService.Generate
type AdvertiserServiceMockGenerateResults struct {
	s1  string
	err error
}

// AdvertiserServiceMockGenerateOrigins contains origins of expectations of the AdvertiserService.Generate
type AdvertiserServiceMockGenerateExpectationOrigins struct {
	origin             string
	originCtx          string
	originAdveristerID string
	originCampaignName string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGenerate *mAdvertiserServiceMockGenerate) Optional() *mAdvertiserServiceMockGenerate {
	mmGenerate.optional = true
	return mmGenerate
}

// Expect sets up expected params for AdvertiserService.Generate
func (mmGenerate *mAdvertiserServiceMockGenerate) Expect(ctx context.Context, adveristerID string, campaignName string) *mAdvertiserServiceMockGenerate {
	if mmGenerate.mock.funcGenerate != nil {
		mmGenerate.mock.t.Fatalf("AdvertiserServiceMock.Generate mock is already set by Set")
	}

	if mmGenerate.defaultExpectation == nil {
		mmGenerate.defaultExpectation = &AdvertiserServiceMockGenerateExpectation{}
	}

	if mmGenerate.defaultExpectation.paramPtrs != nil {
		mmGenerate.mock.t.Fatalf("AdvertiserServiceMock.Generate mock is already set by ExpectParams functions")
	}

	mmGenerate.defaultExpectation.params = &AdvertiserServiceMockGenerateParams{ctx, adveristerID, campaignName}
	mmGenerate.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGenerate.expectations {
		if minimock.Equal(e.params, mmGenerate.defaultExpectation.params) {
			mmGenerate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGenerate.defaultExpectation.params)
		}
	}

	return mmGenerate
}

// ExpectCtxParam1 sets up expected param ctx for AdvertiserService.Generate
func (mmGenerate *mAdvertiserServiceMockGenerate) ExpectCtxParam1(ctx context.Context) *mAdvertiserServiceMockGenerate {
	if mmGenerate.mock.funcGenerate != nil {
		mmGenerate.mock.t.Fatalf("AdvertiserServiceMock.Generate mock is already set by Set")
	}

	if mmGenerate.defaultExpectation == nil {
		mmGenerate.defaultExpectation = &AdvertiserServiceMockGenerateExpectation{}
	}

	if mmGenerate.defaultExpectation.params != nil {
		mmGenerate.mock.t.Fatalf("AdvertiserServiceMock.Generate mock is already set by Expect")
	}

	if mmGenerate.defaultExpectation.paramPtrs == nil {
		mmGenerate.defaultExpectation.paramPtrs = &AdvertiserServiceMockGenerateParamPtrs{}
	}
	mmGenerate.defaultExpectation.paramPtrs.ctx = &ctx
	mmGenerate.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGenerate
}

// ExpectAdveristerIDParam2 sets up expected param adveristerID for AdvertiserService.Generate
func (mmGenerate *mAdvertiserServiceMockGenerate) ExpectAdveristerIDParam2(adveristerID string) *mAdvertiserServiceMockGenerate {
	if mmGenerate.mock.funcGenerate != nil {
		mmGenerate.mock.t.Fatalf("AdvertiserServiceMock.Generate mock is already set by Set")
	}

	if mmGenerate.defaultExpectation == nil {
		mmGenerate.defaultExpectation = &AdvertiserServiceMockGenerateExpectation{}
	}

	if mmGenerate.defaultExpectation.params != nil {
		mmGenerate.mock.t.Fatalf("AdvertiserServiceMock.Generate mock is already set by Expect")
	}

	if mmGenerate.defaultExpectation.paramPtrs == nil {
		mmGenerate.defaultExpectation.paramPtrs = &AdvertiserServiceMockGenerateParamPtrs{}
	}
	mmGenerate.defaultExpectation.paramPtrs.adveristerID = &adveristerID
	mmGenerate.defaultExpectation.expectationOrigins.originAdveristerID = minimock.CallerInfo(1)

	return mmGenerate
}

// ExpectCampaignNameParam3 sets up expected param campaignName for AdvertiserService.Generate
func (mmGenerate *mAdvertiserServiceMockGenerate) ExpectCampaignNameParam3(campaignName string) *mAdvertiserServiceMockGenerate {
	if mmGenerate.mock.funcGenerate != nil {
		mmGenerate.mock.t.Fatalf("AdvertiserServiceMock.Generate mock is already set by Set")
	}

	if mmGenerate.defaultExpectation == nil {
		mmGenerate.defaultExpectation = &AdvertiserServiceMockGenerateExpectation{}
	}

	if mmGenerate.defaultExpectation.params != nil {
		mmGenerate.mock.t.Fatalf("AdvertiserServiceMock.Generate mock is already set by Expect")
	}

	if mmGenerate.defaultExpectation.paramPtrs == nil {
		mmGenerate.defaultExpectation.paramPtrs = &AdvertiserServiceMockGenerateParamPtrs{}
	}
	mmGenerate.defaultExpectation.paramPtrs.campaignName = &campaignName
	mmGenerate.defaultExpectation.expectationOrigins.originCampaignName = minimock.CallerInfo(1)

	return mmGenerate
}

// Inspect accepts an inspector function that has same arguments as the AdvertiserService.Generate
func (mmGenerate *mAdvertiserServiceMockGenerate) Inspect(f func(ctx context.Context, adveristerID string, campaignName string)) *mAdvertiserServiceMockGenerate {
	if mmGenerate.mock.inspectFuncGenerate != nil {
		mmGenerate.mock.t.Fatalf("Inspect function is already set for AdvertiserServiceMock.Generate")
	}

	mmGenerate.mock.inspectFuncGenerate = f

	return mmGenerate
}

// Return sets up results that will be returned by AdvertiserService.Generate
func (mmGenerate *mAdvertiserServiceMockGenerate) Return(s1 string, err error) *AdvertiserServiceMock {
	if mmGenerate.mock.funcGenerate != nil {
		mmGenerate.mock.t.Fatalf("AdvertiserServiceMock.Generate mock is already set by Set")
	}

	if mmGenerate.defaultExpectation == nil {
		mmGenerate.defaultExpectation = &AdvertiserServiceMockGenerateExpectation{mock: mmGenerate.mock}
	}
	mmGenerate.defaultExpectation.results = &AdvertiserServiceMockGenerateResults{s1, err}
	mmGenerate.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGenerate.mock
}

// Set uses given function f to mock the AdvertiserService.Generate method
func (mmGenerate *mAdvertiserServiceMockGenerate) Set(f func(ctx context.Context, adveristerID string, campaignName string) (s1 string, err error)) *AdvertiserServiceMock {
	if mmGenerate.defaultExpectation != nil {
		mmGenerate.mock.t.Fatalf("Default expectation is already set for the AdvertiserService.Generate method")
	}

	if len(mmGenerate.expectations) > 0 {
		mmGenerate.mock.t.Fatalf("Some expectations are already set for the AdvertiserService.Generate method")
	}

	mmGenerate.mock.funcGenerate = f
	mmGenerate.mock.funcGenerateOrigin = minimock.CallerInfo(1)
	return mmGenerate.mock
}

// When sets expectation for the AdvertiserService.Generate which will trigger the result defined by the following
// Then helper
func (mmGenerate *mAdvertiserServiceMockGenerate) When(ctx context.Context, adveristerID string, campaignName string) *AdvertiserServiceMockGenerateExpectation {
	if mmGenerate.mock.funcGenerate != nil {
		mmGenerate.mock.t.Fatalf("AdvertiserServiceMock.Generate mock is already set by Set")
	}

	expectation := &AdvertiserServiceMockGenerateExpectation{
		mock:               mmGenerate.mock,
		params:             &AdvertiserServiceMockGenerateParams{ctx, adveristerID, campaignName},
		expectationOrigins: AdvertiserServiceMockGenerateExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGenerate.expectations = append(mmGenerate.expectations, expectation)
	return expectation
}

// Then sets up AdvertiserService.Generate return parameters for the expectation previously defined by the When method
func (e *AdvertiserServiceMockGenerateExpectation) Then(s1 string, err error) *AdvertiserServiceMock {
	e.results = &AdvertiserServiceMockGenerateResults{s1, err}
	return e.mock
}

// Times sets number of times AdvertiserService.Generate should be invoked
func (mmGenerate *mAdvertiserServiceMockGenerate) Times(n uint64) *mAdvertiserServiceMockGenerate {
	if n == 0 {
		mmGenerate.mock.t.Fatalf("Times of AdvertiserServiceMock.Generate mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGenerate.expectedInvocations, n)
	mmGenerate.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGenerate
}

func (mmGenerate *mAdvertiserServiceMockGenerate) invocationsDone() bool {
	if len(mmGenerate.expectations) == 0 && mmGenerate.defaultExpectation == nil && mmGenerate.mock.funcGenerate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGenerate.mock.afterGenerateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGenerate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Generate implements mm_service.AdvertiserService
func (mmGenerate *AdvertiserServiceMock) Generate(ctx context.Context, adveristerID string, campaignName string) (s1 string, err error) {
	mm_atomic.AddUint64(&mmGenerate.beforeGenerateCounter, 1)
	defer mm_atomic.AddUint64(&mmGenerate.afterGenerateCounter, 1)

	mmGenerate.t.Helper()

	if mmGenerate.inspectFuncGenerate != nil {
		mmGenerate.inspectFuncGenerate(ctx, adveristerID, campaignName)
	}

	mm_params := AdvertiserServiceMockGenerateParams{ctx, adveristerID, campaignName}

	// Record call args
	mmGenerate.GenerateMock.mutex.Lock()
	mmGenerate.GenerateMock.callArgs = append(mmGenerate.GenerateMock.callArgs, &mm_params)
	mmGenerate.GenerateMock.mutex.Unlock()

	for _, e := range mmGenerate.GenerateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmGenerate.GenerateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGenerate.GenerateMock.defaultExpectation.Counter, 1)
		mm_want := mmGenerate.GenerateMock.defaultExpectation.params
		mm_want_ptrs := mmGenerate.GenerateMock.defaultExpectation.paramPtrs

		mm_got := AdvertiserServiceMockGenerateParams{ctx, adveristerID, campaignName}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGenerate.t.Errorf("AdvertiserServiceMock.Generate got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGenerate.GenerateMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.adveristerID != nil && !minimock.Equal(*mm_want_ptrs.adveristerID, mm_got.adveristerID) {
				mmGenerate.t.Errorf("AdvertiserServiceMock.Generate got unexpected parameter adveristerID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGenerate.GenerateMock.defaultExpectation.expectationOrigins.originAdveristerID, *mm_want_ptrs.adveristerID, mm_got.adveristerID, minimock.Diff(*mm_want_ptrs.adveristerID, mm_got.adveristerID))
			}

			if mm_want_ptrs.campaignName != nil && !minimock.Equal(*mm_want_ptrs.campaignName, mm_got.campaignName) {
				mmGenerate.t.Errorf("AdvertiserServiceMock.Generate got unexpected parameter campaignName, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGenerate.GenerateMock.defaultExpectation.expectationOrigins.originCampaignName, *mm_want_ptrs.campaignName, mm_got.campaignName, minimock.Diff(*mm_want_ptrs.campaignName, mm_got.campaignName))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGenerate.t.Errorf("AdvertiserServiceMock.Generate got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGenerate.GenerateMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGenerate.GenerateMock.defaultExpectation.results
		if mm_results == nil {
			mmGenerate.t.Fatal("No results are set for the AdvertiserServiceMock.Generate")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmGenerate.funcGenerate != nil {
		return mmGenerate.funcGenerate(ctx, adveristerID, campaignName)
	}
	mmGenerate.t.Fatalf("Unexpected call to AdvertiserServiceMock.Generate. %v %v %v", ctx, adveristerID, campaignName)
	return
}

// GenerateAfterCounter returns a count of finished AdvertiserServiceMock.Generate invocations
func (mmGenerate *AdvertiserServiceMock) GenerateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGenerate.afterGenerateCounter)
}

// GenerateBeforeCounter returns a count of AdvertiserServiceMock.Generate invocations
func (mmGenerate *AdvertiserServiceMock) GenerateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGenerate.beforeGenerateCounter)
}

// Calls returns a list of arguments used in each call to AdvertiserServiceMock.Generate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGenerate *mAdvertiserServiceMockGenerate) Calls() []*AdvertiserServiceMockGenerateParams {
	mmGenerate.mutex.RLock()

	argCopy := make([]*AdvertiserServiceMockGenerateParams, len(mmGenerate.callArgs))
	copy(argCopy, mmGenerate.callArgs)

	mmGenerate.mutex.RUnlock()

	return argCopy
}

// MinimockGenerateDone returns true if the count of the Generate invocations corresponds
// the number of defined expectations
func (m *AdvertiserServiceMock) MinimockGenerateDone() bool {
	if m.GenerateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GenerateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GenerateMock.invocationsDone()
}

// MinimockGenerateInspect logs each unmet expectation
func (m *AdvertiserServiceMock) MinimockGenerateInspect() {
	for _, e := range m.GenerateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AdvertiserServiceMock.Generate at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGenerateCounter := mm_atomic.LoadUint64(&m.afterGenerateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GenerateMock.defaultExpectation != nil && afterGenerateCounter < 1 {
		if m.GenerateMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AdvertiserServiceMock.Generate at\n%s", m.GenerateMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AdvertiserServiceMock.Generate at\n%s with params: %#v", m.GenerateMock.defaultExpectation.expectationOrigins.origin, *m.GenerateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGenerate != nil && afterGenerateCounter < 1 {
		m.t.Errorf("Expected call to AdvertiserServiceMock.Generate at\n%s", m.funcGenerateOrigin)
	}

	if !m.GenerateMock.invocationsDone() && afterGenerateCounter > 0 {
		m.t.Errorf("Expected %d calls to AdvertiserServiceMock.Generate at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GenerateMock.expectedInvocations), m.GenerateMock.expectedInvocationsOrigin, afterGenerateCounter)
	}
}

type mAdvertiserServiceMockGet struct {
	optional           bool
	mock               *AdvertiserServiceMock
	defaultExpectation *AdvertiserServiceMockGetExpectation
	expectations       []*AdvertiserServiceMockGetExpectation

	callArgs []*AdvertiserServiceMockGetParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AdvertiserServiceMockGetExpectation specifies expectation struct of the AdvertiserService.Get
type AdvertiserServiceMockGetExpectation struct {
	mock               *AdvertiserServiceMock
	params             *AdvertiserServiceMockGetParams
	paramPtrs          *AdvertiserServiceMockGetParamPtrs
	expectationOrigins AdvertiserServiceMockGetExpectationOrigins
	results            *AdvertiserServiceMockGetResults
	returnOrigin       string
	Counter            uint64
}

// AdvertiserServiceMockGetParams contains parameters of the AdvertiserService.Get
type AdvertiserServiceMockGetParams struct {
	ctx context.Context
	id  string
}

// AdvertiserServiceMockGetParamPtrs contains pointers to parameters of the AdvertiserService.Get
type AdvertiserServiceMockGetParamPtrs struct {
	ctx *context.Context
	id  *string
}

// AdvertiserServiceMockGetResults contains results of the AdvertiserService.Get
type AdvertiserServiceMockGetResults struct {
	ap1 *model.Advertiser
	err error
}

// AdvertiserServiceMockGetOrigins contains origins of expectations of the AdvertiserService.Get
type AdvertiserServiceMockGetExpectationOrigins struct {
	origin    string
	originCtx string
	originId  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGet *mAdvertiserServiceMockGet) Optional() *mAdvertiserServiceMockGet {
	mmGet.optional = true
	return mmGet
}

// Expect sets up expected params for AdvertiserService.Get
func (mmGet *mAdvertiserServiceMockGet) Expect(ctx context.Context, id string) *mAdvertiserServiceMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("AdvertiserServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &AdvertiserServiceMockGetExpectation{}
	}

	if mmGet.defaultExpectation.paramPtrs != nil {
		mmGet.mock.t.Fatalf("AdvertiserServiceMock.Get mock is already set by ExpectParams functions")
	}

	mmGet.defaultExpectation.params = &AdvertiserServiceMockGetParams{ctx, id}
	mmGet.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// ExpectCtxParam1 sets up expected param ctx for AdvertiserService.Get
func (mmGet *mAdvertiserServiceMockGet) ExpectCtxParam1(ctx context.Context) *mAdvertiserServiceMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("AdvertiserServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &AdvertiserServiceMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("AdvertiserServiceMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &AdvertiserServiceMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.ctx = &ctx
	mmGet.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGet
}

// ExpectIdParam2 sets up expected param id for AdvertiserService.Get
func (mmGet *mAdvertiserServiceMockGet) ExpectIdParam2(id string) *mAdvertiserServiceMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("AdvertiserServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &AdvertiserServiceMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("AdvertiserServiceMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &AdvertiserServiceMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.id = &id
	mmGet.defaultExpectation.expectationOrigins.originId = minimock.CallerInfo(1)

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the AdvertiserService.Get
func (mmGet *mAdvertiserServiceMockGet) Inspect(f func(ctx context.Context, id string)) *mAdvertiserServiceMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for AdvertiserServiceMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by AdvertiserService.Get
func (mmGet *mAdvertiserServiceMockGet) Return(ap1 *model.Advertiser, err error) *AdvertiserServiceMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("AdvertiserServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &AdvertiserServiceMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &AdvertiserServiceMockGetResults{ap1, err}
	mmGet.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGet.mock
}

// Set uses given function f to mock the AdvertiserService.Get method
func (mmGet *mAdvertiserServiceMockGet) Set(f func(ctx context.Context, id string) (ap1 *model.Advertiser, err error)) *AdvertiserServiceMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the AdvertiserService.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the AdvertiserService.Get method")
	}

	mmGet.mock.funcGet = f
	mmGet.mock.funcGetOrigin = minimock.CallerInfo(1)
	return mmGet.mock
}

// When sets expectation for the AdvertiserService.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mAdvertiserServiceMockGet) When(ctx context.Context, id string) *AdvertiserServiceMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("AdvertiserServiceMock.Get mock is already set by Set")
	}

	expectation := &AdvertiserServiceMockGetExpectation{
		mock:               mmGet.mock,
		params:             &AdvertiserServiceMockGetParams{ctx, id},
		expectationOrigins: AdvertiserServiceMockGetExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up AdvertiserService.Get return parameters for the expectation previously defined by the When method
func (e *AdvertiserServiceMockGetExpectation) Then(ap1 *model.Advertiser, err error) *AdvertiserServiceMock {
	e.results = &AdvertiserServiceMockGetResults{ap1, err}
	return e.mock
}

// Times sets number of times AdvertiserService.Get should be invoked
func (mmGet *mAdvertiserServiceMockGet) Times(n uint64) *mAdvertiserServiceMockGet {
	if n == 0 {
		mmGet.mock.t.Fatalf("Times of AdvertiserServiceMock.Get mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGet.expectedInvocations, n)
	mmGet.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGet
}

func (mmGet *mAdvertiserServiceMockGet) invocationsDone() bool {
	if len(mmGet.expectations) == 0 && mmGet.defaultExpectation == nil && mmGet.mock.funcGet == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGet.mock.afterGetCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGet.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Get implements mm_service.AdvertiserService
func (mmGet *AdvertiserServiceMock) Get(ctx context.Context, id string) (ap1 *model.Advertiser, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	mmGet.t.Helper()

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, id)
	}

	mm_params := AdvertiserServiceMockGetParams{ctx, id}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, &mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ap1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_want_ptrs := mmGet.GetMock.defaultExpectation.paramPtrs

		mm_got := AdvertiserServiceMockGetParams{ctx, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGet.t.Errorf("AdvertiserServiceMock.Get got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGet.GetMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmGet.t.Errorf("AdvertiserServiceMock.Get got unexpected parameter id, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGet.GetMock.defaultExpectation.expectationOrigins.originId, *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("AdvertiserServiceMock.Get got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGet.GetMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the AdvertiserServiceMock.Get")
		}
		return (*mm_results).ap1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, id)
	}
	mmGet.t.Fatalf("Unexpected call to AdvertiserServiceMock.Get. %v %v", ctx, id)
	return
}

// GetAfterCounter returns a count of finished AdvertiserServiceMock.Get invocations
func (mmGet *AdvertiserServiceMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of AdvertiserServiceMock.Get invocations
func (mmGet *AdvertiserServiceMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to AdvertiserServiceMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mAdvertiserServiceMockGet) Calls() []*AdvertiserServiceMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*AdvertiserServiceMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *AdvertiserServiceMock) MinimockGetDone() bool {
	if m.GetMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetMock.invocationsDone()
}

// MinimockGetInspect logs each unmet expectation
func (m *AdvertiserServiceMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AdvertiserServiceMock.Get at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetCounter := mm_atomic.LoadUint64(&m.afterGetCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && afterGetCounter < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AdvertiserServiceMock.Get at\n%s", m.GetMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AdvertiserServiceMock.Get at\n%s with params: %#v", m.GetMock.defaultExpectation.expectationOrigins.origin, *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && afterGetCounter < 1 {
		m.t.Errorf("Expected call to AdvertiserServiceMock.Get at\n%s", m.funcGetOrigin)
	}

	if !m.GetMock.invocationsDone() && afterGetCounter > 0 {
		m.t.Errorf("Expected %d calls to AdvertiserServiceMock.Get at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetMock.expectedInvocations), m.GetMock.expectedInvocationsOrigin, afterGetCounter)
	}
}

type mAdvertiserServiceMockSave struct {
	optional           bool
	mock               *AdvertiserServiceMock
	defaultExpectation *AdvertiserServiceMockSaveExpectation
	expectations       []*AdvertiserServiceMockSaveExpectation

	callArgs []*AdvertiserServiceMockSaveParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AdvertiserServiceMockSaveExpectation specifies expectation struct of the AdvertiserService.Save
type AdvertiserServiceMockSaveExpectation struct {
	mock               *AdvertiserServiceMock
	params             *AdvertiserServiceMockSaveParams
	paramPtrs          *AdvertiserServiceMockSaveParamPtrs
	expectationOrigins AdvertiserServiceMockSaveExpectationOrigins
	results            *AdvertiserServiceMockSaveResults
	returnOrigin       string
	Counter            uint64
}

// AdvertiserServiceMockSaveParams contains parameters of the AdvertiserService.Save
type AdvertiserServiceMockSaveParams struct {
	ctx         context.Context
	advertisers []*model.Advertiser
}

// AdvertiserServiceMockSaveParamPtrs contains pointers to parameters of the AdvertiserService.Save
type AdvertiserServiceMockSaveParamPtrs struct {
	ctx         *context.Context
	advertisers *[]*model.Advertiser
}

// AdvertiserServiceMockSaveResults contains results of the AdvertiserService.Save
type AdvertiserServiceMockSaveResults struct {
	err error
}

// AdvertiserServiceMockSaveOrigins contains origins of expectations of the AdvertiserService.Save
type AdvertiserServiceMockSaveExpectationOrigins struct {
	origin            string
	originCtx         string
	originAdvertisers string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSave *mAdvertiserServiceMockSave) Optional() *mAdvertiserServiceMockSave {
	mmSave.optional = true
	return mmSave
}

// Expect sets up expected params for AdvertiserService.Save
func (mmSave *mAdvertiserServiceMockSave) Expect(ctx context.Context, advertisers []*model.Advertiser) *mAdvertiserServiceMockSave {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("AdvertiserServiceMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &AdvertiserServiceMockSaveExpectation{}
	}

	if mmSave.defaultExpectation.paramPtrs != nil {
		mmSave.mock.t.Fatalf("AdvertiserServiceMock.Save mock is already set by ExpectParams functions")
	}

	mmSave.defaultExpectation.params = &AdvertiserServiceMockSaveParams{ctx, advertisers}
	mmSave.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSave.expectations {
		if minimock.Equal(e.params, mmSave.defaultExpectation.params) {
			mmSave.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSave.defaultExpectation.params)
		}
	}

	return mmSave
}

// ExpectCtxParam1 sets up expected param ctx for AdvertiserService.Save
func (mmSave *mAdvertiserServiceMockSave) ExpectCtxParam1(ctx context.Context) *mAdvertiserServiceMockSave {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("AdvertiserServiceMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &AdvertiserServiceMockSaveExpectation{}
	}

	if mmSave.defaultExpectation.params != nil {
		mmSave.mock.t.Fatalf("AdvertiserServiceMock.Save mock is already set by Expect")
	}

	if mmSave.defaultExpectation.paramPtrs == nil {
		mmSave.defaultExpectation.paramPtrs = &AdvertiserServiceMockSaveParamPtrs{}
	}
	mmSave.defaultExpectation.paramPtrs.ctx = &ctx
	mmSave.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSave
}

// ExpectAdvertisersParam2 sets up expected param advertisers for AdvertiserService.Save
func (mmSave *mAdvertiserServiceMockSave) ExpectAdvertisersParam2(advertisers []*model.Advertiser) *mAdvertiserServiceMockSave {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("AdvertiserServiceMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &AdvertiserServiceMockSaveExpectation{}
	}

	if mmSave.defaultExpectation.params != nil {
		mmSave.mock.t.Fatalf("AdvertiserServiceMock.Save mock is already set by Expect")
	}

	if mmSave.defaultExpectation.paramPtrs == nil {
		mmSave.defaultExpectation.paramPtrs = &AdvertiserServiceMockSaveParamPtrs{}
	}
	mmSave.defaultExpectation.paramPtrs.advertisers = &advertisers
	mmSave.defaultExpectation.expectationOrigins.originAdvertisers = minimock.CallerInfo(1)

	return mmSave
}

// Inspect accepts an inspector function that has same arguments as the AdvertiserService.Save
func (mmSave *mAdvertiserServiceMockSave) Inspect(f func(ctx context.Context, advertisers []*model.Advertiser)) *mAdvertiserServiceMockSave {
	if mmSave.mock.inspectFuncSave != nil {
		mmSave.mock.t.Fatalf("Inspect function is already set for AdvertiserServiceMock.Save")
	}

	mmSave.mock.inspectFuncSave = f

	return mmSave
}

// Return sets up results that will be returned by AdvertiserService.Save
func (mmSave *mAdvertiserServiceMockSave) Return(err error) *AdvertiserServiceMock {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("AdvertiserServiceMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &AdvertiserServiceMockSaveExpectation{mock: mmSave.mock}
	}
	mmSave.defaultExpectation.results = &AdvertiserServiceMockSaveResults{err}
	mmSave.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSave.mock
}

// Set uses given function f to mock the AdvertiserService.Save method
func (mmSave *mAdvertiserServiceMockSave) Set(f func(ctx context.Context, advertisers []*model.Advertiser) (err error)) *AdvertiserServiceMock {
	if mmSave.defaultExpectation != nil {
		mmSave.mock.t.Fatalf("Default expectation is already set for the AdvertiserService.Save method")
	}

	if len(mmSave.expectations) > 0 {
		mmSave.mock.t.Fatalf("Some expectations are already set for the AdvertiserService.Save method")
	}

	mmSave.mock.funcSave = f
	mmSave.mock.funcSaveOrigin = minimock.CallerInfo(1)
	return mmSave.mock
}

// When sets expectation for the AdvertiserService.Save which will trigger the result defined by the following
// Then helper
func (mmSave *mAdvertiserServiceMockSave) When(ctx context.Context, advertisers []*model.Advertiser) *AdvertiserServiceMockSaveExpectation {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("AdvertiserServiceMock.Save mock is already set by Set")
	}

	expectation := &AdvertiserServiceMockSaveExpectation{
		mock:               mmSave.mock,
		params:             &AdvertiserServiceMockSaveParams{ctx, advertisers},
		expectationOrigins: AdvertiserServiceMockSaveExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSave.expectations = append(mmSave.expectations, expectation)
	return expectation
}

// Then sets up AdvertiserService.Save return parameters for the expectation previously defined by the When method
func (e *AdvertiserServiceMockSaveExpectation) Then(err error) *AdvertiserServiceMock {
	e.results = &AdvertiserServiceMockSaveResults{err}
	return e.mock
}

// Times sets number of times AdvertiserService.Save should be invoked
func (mmSave *mAdvertiserServiceMockSave) Times(n uint64) *mAdvertiserServiceMockSave {
	if n == 0 {
		mmSave.mock.t.Fatalf("Times of AdvertiserServiceMock.Save mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSave.expectedInvocations, n)
	mmSave.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSave
}

func (mmSave *mAdvertiserServiceMockSave) invocationsDone() bool {
	if len(mmSave.expectations) == 0 && mmSave.defaultExpectation == nil && mmSave.mock.funcSave == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSave.mock.afterSaveCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSave.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Save implements mm_service.AdvertiserService
func (mmSave *AdvertiserServiceMock) Save(ctx context.Context, advertisers []*model.Advertiser) (err error) {
	mm_atomic.AddUint64(&mmSave.beforeSaveCounter, 1)
	defer mm_atomic.AddUint64(&mmSave.afterSaveCounter, 1)

	mmSave.t.Helper()

	if mmSave.inspectFuncSave != nil {
		mmSave.inspectFuncSave(ctx, advertisers)
	}

	mm_params := AdvertiserServiceMockSaveParams{ctx, advertisers}

	// Record call args
	mmSave.SaveMock.mutex.Lock()
	mmSave.SaveMock.callArgs = append(mmSave.SaveMock.callArgs, &mm_params)
	mmSave.SaveMock.mutex.Unlock()

	for _, e := range mmSave.SaveMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSave.SaveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSave.SaveMock.defaultExpectation.Counter, 1)
		mm_want := mmSave.SaveMock.defaultExpectation.params
		mm_want_ptrs := mmSave.SaveMock.defaultExpectation.paramPtrs

		mm_got := AdvertiserServiceMockSaveParams{ctx, advertisers}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSave.t.Errorf("AdvertiserServiceMock.Save got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSave.SaveMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.advertisers != nil && !minimock.Equal(*mm_want_ptrs.advertisers, mm_got.advertisers) {
				mmSave.t.Errorf("AdvertiserServiceMock.Save got unexpected parameter advertisers, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSave.SaveMock.defaultExpectation.expectationOrigins.originAdvertisers, *mm_want_ptrs.advertisers, mm_got.advertisers, minimock.Diff(*mm_want_ptrs.advertisers, mm_got.advertisers))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSave.t.Errorf("AdvertiserServiceMock.Save got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSave.SaveMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSave.SaveMock.defaultExpectation.results
		if mm_results == nil {
			mmSave.t.Fatal("No results are set for the AdvertiserServiceMock.Save")
		}
		return (*mm_results).err
	}
	if mmSave.funcSave != nil {
		return mmSave.funcSave(ctx, advertisers)
	}
	mmSave.t.Fatalf("Unexpected call to AdvertiserServiceMock.Save. %v %v", ctx, advertisers)
	return
}

// SaveAfterCounter returns a count of finished AdvertiserServiceMock.Save invocations
func (mmSave *AdvertiserServiceMock) SaveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSave.afterSaveCounter)
}

// SaveBeforeCounter returns a count of AdvertiserServiceMock.Save invocations
func (mmSave *AdvertiserServiceMock) SaveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSave.beforeSaveCounter)
}

// Calls returns a list of arguments used in each call to AdvertiserServiceMock.Save.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSave *mAdvertiserServiceMockSave) Calls() []*AdvertiserServiceMockSaveParams {
	mmSave.mutex.RLock()

	argCopy := make([]*AdvertiserServiceMockSaveParams, len(mmSave.callArgs))
	copy(argCopy, mmSave.callArgs)

	mmSave.mutex.RUnlock()

	return argCopy
}

// MinimockSaveDone returns true if the count of the Save invocations corresponds
// the number of defined expectations
func (m *AdvertiserServiceMock) MinimockSaveDone() bool {
	if m.SaveMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SaveMock.invocationsDone()
}

// MinimockSaveInspect logs each unmet expectation
func (m *AdvertiserServiceMock) MinimockSaveInspect() {
	for _, e := range m.SaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AdvertiserServiceMock.Save at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSaveCounter := mm_atomic.LoadUint64(&m.afterSaveCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SaveMock.defaultExpectation != nil && afterSaveCounter < 1 {
		if m.SaveMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AdvertiserServiceMock.Save at\n%s", m.SaveMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AdvertiserServiceMock.Save at\n%s with params: %#v", m.SaveMock.defaultExpectation.expectationOrigins.origin, *m.SaveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSave != nil && afterSaveCounter < 1 {
		m.t.Errorf("Expected call to AdvertiserServiceMock.Save at\n%s", m.funcSaveOrigin)
	}

	if !m.SaveMock.invocationsDone() && afterSaveCounter > 0 {
		m.t.Errorf("Expected %d calls to AdvertiserServiceMock.Save at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SaveMock.expectedInvocations), m.SaveMock.expectedInvocationsOrigin, afterSaveCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AdvertiserServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockAddScoreInspect()

			m.MinimockGenerateInspect()

			m.MinimockGetInspect()

			m.MinimockSaveInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AdvertiserServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AdvertiserServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddScoreDone() &&
		m.MinimockGenerateDone() &&
		m.MinimockGetDone() &&
		m.MinimockSaveDone()
}
