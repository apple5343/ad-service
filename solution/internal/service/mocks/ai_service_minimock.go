// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i server/internal/service.AiService -o ai_service_minimock.go -n AiServiceMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// AiServiceMock implements mm_service.AiService
type AiServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGenerateCampaignDescription          func(ctx context.Context, adveristerName string, campaignName string) (s1 string, err error)
	funcGenerateCampaignDescriptionOrigin    string
	inspectFuncGenerateCampaignDescription   func(ctx context.Context, adveristerName string, campaignName string)
	afterGenerateCampaignDescriptionCounter  uint64
	beforeGenerateCampaignDescriptionCounter uint64
	GenerateCampaignDescriptionMock          mAiServiceMockGenerateCampaignDescription

	funcModerateText          func(ctx context.Context, text string) (b1 bool, sa1 []string, err error)
	funcModerateTextOrigin    string
	inspectFuncModerateText   func(ctx context.Context, text string)
	afterModerateTextCounter  uint64
	beforeModerateTextCounter uint64
	ModerateTextMock          mAiServiceMockModerateText
}

// NewAiServiceMock returns a mock for mm_service.AiService
func NewAiServiceMock(t minimock.Tester) *AiServiceMock {
	m := &AiServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GenerateCampaignDescriptionMock = mAiServiceMockGenerateCampaignDescription{mock: m}
	m.GenerateCampaignDescriptionMock.callArgs = []*AiServiceMockGenerateCampaignDescriptionParams{}

	m.ModerateTextMock = mAiServiceMockModerateText{mock: m}
	m.ModerateTextMock.callArgs = []*AiServiceMockModerateTextParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mAiServiceMockGenerateCampaignDescription struct {
	optional           bool
	mock               *AiServiceMock
	defaultExpectation *AiServiceMockGenerateCampaignDescriptionExpectation
	expectations       []*AiServiceMockGenerateCampaignDescriptionExpectation

	callArgs []*AiServiceMockGenerateCampaignDescriptionParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AiServiceMockGenerateCampaignDescriptionExpectation specifies expectation struct of the AiService.GenerateCampaignDescription
type AiServiceMockGenerateCampaignDescriptionExpectation struct {
	mock               *AiServiceMock
	params             *AiServiceMockGenerateCampaignDescriptionParams
	paramPtrs          *AiServiceMockGenerateCampaignDescriptionParamPtrs
	expectationOrigins AiServiceMockGenerateCampaignDescriptionExpectationOrigins
	results            *AiServiceMockGenerateCampaignDescriptionResults
	returnOrigin       string
	Counter            uint64
}

// AiServiceMockGenerateCampaignDescriptionParams contains parameters of the AiService.GenerateCampaignDescription
type AiServiceMockGenerateCampaignDescriptionParams struct {
	ctx            context.Context
	adveristerName string
	campaignName   string
}

// AiServiceMockGenerateCampaignDescriptionParamPtrs contains pointers to parameters of the AiService.GenerateCampaignDescription
type AiServiceMockGenerateCampaignDescriptionParamPtrs struct {
	ctx            *context.Context
	adveristerName *string
	campaignName   *string
}

// AiServiceMockGenerateCampaignDescriptionResults contains results of the AiService.GenerateCampaignDescription
type AiServiceMockGenerateCampaignDescriptionResults struct {
	s1  string
	err error
}

// AiServiceMockGenerateCampaignDescriptionOrigins contains origins of expectations of the AiService.GenerateCampaignDescription
type AiServiceMockGenerateCampaignDescriptionExpectationOrigins struct {
	origin               string
	originCtx            string
	originAdveristerName string
	originCampaignName   string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGenerateCampaignDescription *mAiServiceMockGenerateCampaignDescription) Optional() *mAiServiceMockGenerateCampaignDescription {
	mmGenerateCampaignDescription.optional = true
	return mmGenerateCampaignDescription
}

// Expect sets up expected params for AiService.GenerateCampaignDescription
func (mmGenerateCampaignDescription *mAiServiceMockGenerateCampaignDescription) Expect(ctx context.Context, adveristerName string, campaignName string) *mAiServiceMockGenerateCampaignDescription {
	if mmGenerateCampaignDescription.mock.funcGenerateCampaignDescription != nil {
		mmGenerateCampaignDescription.mock.t.Fatalf("AiServiceMock.GenerateCampaignDescription mock is already set by Set")
	}

	if mmGenerateCampaignDescription.defaultExpectation == nil {
		mmGenerateCampaignDescription.defaultExpectation = &AiServiceMockGenerateCampaignDescriptionExpectation{}
	}

	if mmGenerateCampaignDescription.defaultExpectation.paramPtrs != nil {
		mmGenerateCampaignDescription.mock.t.Fatalf("AiServiceMock.GenerateCampaignDescription mock is already set by ExpectParams functions")
	}

	mmGenerateCampaignDescription.defaultExpectation.params = &AiServiceMockGenerateCampaignDescriptionParams{ctx, adveristerName, campaignName}
	mmGenerateCampaignDescription.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGenerateCampaignDescription.expectations {
		if minimock.Equal(e.params, mmGenerateCampaignDescription.defaultExpectation.params) {
			mmGenerateCampaignDescription.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGenerateCampaignDescription.defaultExpectation.params)
		}
	}

	return mmGenerateCampaignDescription
}

// ExpectCtxParam1 sets up expected param ctx for AiService.GenerateCampaignDescription
func (mmGenerateCampaignDescription *mAiServiceMockGenerateCampaignDescription) ExpectCtxParam1(ctx context.Context) *mAiServiceMockGenerateCampaignDescription {
	if mmGenerateCampaignDescription.mock.funcGenerateCampaignDescription != nil {
		mmGenerateCampaignDescription.mock.t.Fatalf("AiServiceMock.GenerateCampaignDescription mock is already set by Set")
	}

	if mmGenerateCampaignDescription.defaultExpectation == nil {
		mmGenerateCampaignDescription.defaultExpectation = &AiServiceMockGenerateCampaignDescriptionExpectation{}
	}

	if mmGenerateCampaignDescription.defaultExpectation.params != nil {
		mmGenerateCampaignDescription.mock.t.Fatalf("AiServiceMock.GenerateCampaignDescription mock is already set by Expect")
	}

	if mmGenerateCampaignDescription.defaultExpectation.paramPtrs == nil {
		mmGenerateCampaignDescription.defaultExpectation.paramPtrs = &AiServiceMockGenerateCampaignDescriptionParamPtrs{}
	}
	mmGenerateCampaignDescription.defaultExpectation.paramPtrs.ctx = &ctx
	mmGenerateCampaignDescription.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGenerateCampaignDescription
}

// ExpectAdveristerNameParam2 sets up expected param adveristerName for AiService.GenerateCampaignDescription
func (mmGenerateCampaignDescription *mAiServiceMockGenerateCampaignDescription) ExpectAdveristerNameParam2(adveristerName string) *mAiServiceMockGenerateCampaignDescription {
	if mmGenerateCampaignDescription.mock.funcGenerateCampaignDescription != nil {
		mmGenerateCampaignDescription.mock.t.Fatalf("AiServiceMock.GenerateCampaignDescription mock is already set by Set")
	}

	if mmGenerateCampaignDescription.defaultExpectation == nil {
		mmGenerateCampaignDescription.defaultExpectation = &AiServiceMockGenerateCampaignDescriptionExpectation{}
	}

	if mmGenerateCampaignDescription.defaultExpectation.params != nil {
		mmGenerateCampaignDescription.mock.t.Fatalf("AiServiceMock.GenerateCampaignDescription mock is already set by Expect")
	}

	if mmGenerateCampaignDescription.defaultExpectation.paramPtrs == nil {
		mmGenerateCampaignDescription.defaultExpectation.paramPtrs = &AiServiceMockGenerateCampaignDescriptionParamPtrs{}
	}
	mmGenerateCampaignDescription.defaultExpectation.paramPtrs.adveristerName = &adveristerName
	mmGenerateCampaignDescription.defaultExpectation.expectationOrigins.originAdveristerName = minimock.CallerInfo(1)

	return mmGenerateCampaignDescription
}

// ExpectCampaignNameParam3 sets up expected param campaignName for AiService.GenerateCampaignDescription
func (mmGenerateCampaignDescription *mAiServiceMockGenerateCampaignDescription) ExpectCampaignNameParam3(campaignName string) *mAiServiceMockGenerateCampaignDescription {
	if mmGenerateCampaignDescription.mock.funcGenerateCampaignDescription != nil {
		mmGenerateCampaignDescription.mock.t.Fatalf("AiServiceMock.GenerateCampaignDescription mock is already set by Set")
	}

	if mmGenerateCampaignDescription.defaultExpectation == nil {
		mmGenerateCampaignDescription.defaultExpectation = &AiServiceMockGenerateCampaignDescriptionExpectation{}
	}

	if mmGenerateCampaignDescription.defaultExpectation.params != nil {
		mmGenerateCampaignDescription.mock.t.Fatalf("AiServiceMock.GenerateCampaignDescription mock is already set by Expect")
	}

	if mmGenerateCampaignDescription.defaultExpectation.paramPtrs == nil {
		mmGenerateCampaignDescription.defaultExpectation.paramPtrs = &AiServiceMockGenerateCampaignDescriptionParamPtrs{}
	}
	mmGenerateCampaignDescription.defaultExpectation.paramPtrs.campaignName = &campaignName
	mmGenerateCampaignDescription.defaultExpectation.expectationOrigins.originCampaignName = minimock.CallerInfo(1)

	return mmGenerateCampaignDescription
}

// Inspect accepts an inspector function that has same arguments as the AiService.GenerateCampaignDescription
func (mmGenerateCampaignDescription *mAiServiceMockGenerateCampaignDescription) Inspect(f func(ctx context.Context, adveristerName string, campaignName string)) *mAiServiceMockGenerateCampaignDescription {
	if mmGenerateCampaignDescription.mock.inspectFuncGenerateCampaignDescription != nil {
		mmGenerateCampaignDescription.mock.t.Fatalf("Inspect function is already set for AiServiceMock.GenerateCampaignDescription")
	}

	mmGenerateCampaignDescription.mock.inspectFuncGenerateCampaignDescription = f

	return mmGenerateCampaignDescription
}

// Return sets up results that will be returned by AiService.GenerateCampaignDescription
func (mmGenerateCampaignDescription *mAiServiceMockGenerateCampaignDescription) Return(s1 string, err error) *AiServiceMock {
	if mmGenerateCampaignDescription.mock.funcGenerateCampaignDescription != nil {
		mmGenerateCampaignDescription.mock.t.Fatalf("AiServiceMock.GenerateCampaignDescription mock is already set by Set")
	}

	if mmGenerateCampaignDescription.defaultExpectation == nil {
		mmGenerateCampaignDescription.defaultExpectation = &AiServiceMockGenerateCampaignDescriptionExpectation{mock: mmGenerateCampaignDescription.mock}
	}
	mmGenerateCampaignDescription.defaultExpectation.results = &AiServiceMockGenerateCampaignDescriptionResults{s1, err}
	mmGenerateCampaignDescription.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGenerateCampaignDescription.mock
}

// Set uses given function f to mock the AiService.GenerateCampaignDescription method
func (mmGenerateCampaignDescription *mAiServiceMockGenerateCampaignDescription) Set(f func(ctx context.Context, adveristerName string, campaignName string) (s1 string, err error)) *AiServiceMock {
	if mmGenerateCampaignDescription.defaultExpectation != nil {
		mmGenerateCampaignDescription.mock.t.Fatalf("Default expectation is already set for the AiService.GenerateCampaignDescription method")
	}

	if len(mmGenerateCampaignDescription.expectations) > 0 {
		mmGenerateCampaignDescription.mock.t.Fatalf("Some expectations are already set for the AiService.GenerateCampaignDescription method")
	}

	mmGenerateCampaignDescription.mock.funcGenerateCampaignDescription = f
	mmGenerateCampaignDescription.mock.funcGenerateCampaignDescriptionOrigin = minimock.CallerInfo(1)
	return mmGenerateCampaignDescription.mock
}

// When sets expectation for the AiService.GenerateCampaignDescription which will trigger the result defined by the following
// Then helper
func (mmGenerateCampaignDescription *mAiServiceMockGenerateCampaignDescription) When(ctx context.Context, adveristerName string, campaignName string) *AiServiceMockGenerateCampaignDescriptionExpectation {
	if mmGenerateCampaignDescription.mock.funcGenerateCampaignDescription != nil {
		mmGenerateCampaignDescription.mock.t.Fatalf("AiServiceMock.GenerateCampaignDescription mock is already set by Set")
	}

	expectation := &AiServiceMockGenerateCampaignDescriptionExpectation{
		mock:               mmGenerateCampaignDescription.mock,
		params:             &AiServiceMockGenerateCampaignDescriptionParams{ctx, adveristerName, campaignName},
		expectationOrigins: AiServiceMockGenerateCampaignDescriptionExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGenerateCampaignDescription.expectations = append(mmGenerateCampaignDescription.expectations, expectation)
	return expectation
}

// Then sets up AiService.GenerateCampaignDescription return parameters for the expectation previously defined by the When method
func (e *AiServiceMockGenerateCampaignDescriptionExpectation) Then(s1 string, err error) *AiServiceMock {
	e.results = &AiServiceMockGenerateCampaignDescriptionResults{s1, err}
	return e.mock
}

// Times sets number of times AiService.GenerateCampaignDescription should be invoked
func (mmGenerateCampaignDescription *mAiServiceMockGenerateCampaignDescription) Times(n uint64) *mAiServiceMockGenerateCampaignDescription {
	if n == 0 {
		mmGenerateCampaignDescription.mock.t.Fatalf("Times of AiServiceMock.GenerateCampaignDescription mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGenerateCampaignDescription.expectedInvocations, n)
	mmGenerateCampaignDescription.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGenerateCampaignDescription
}

func (mmGenerateCampaignDescription *mAiServiceMockGenerateCampaignDescription) invocationsDone() bool {
	if len(mmGenerateCampaignDescription.expectations) == 0 && mmGenerateCampaignDescription.defaultExpectation == nil && mmGenerateCampaignDescription.mock.funcGenerateCampaignDescription == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGenerateCampaignDescription.mock.afterGenerateCampaignDescriptionCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGenerateCampaignDescription.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GenerateCampaignDescription implements mm_service.AiService
func (mmGenerateCampaignDescription *AiServiceMock) GenerateCampaignDescription(ctx context.Context, adveristerName string, campaignName string) (s1 string, err error) {
	mm_atomic.AddUint64(&mmGenerateCampaignDescription.beforeGenerateCampaignDescriptionCounter, 1)
	defer mm_atomic.AddUint64(&mmGenerateCampaignDescription.afterGenerateCampaignDescriptionCounter, 1)

	mmGenerateCampaignDescription.t.Helper()

	if mmGenerateCampaignDescription.inspectFuncGenerateCampaignDescription != nil {
		mmGenerateCampaignDescription.inspectFuncGenerateCampaignDescription(ctx, adveristerName, campaignName)
	}

	mm_params := AiServiceMockGenerateCampaignDescriptionParams{ctx, adveristerName, campaignName}

	// Record call args
	mmGenerateCampaignDescription.GenerateCampaignDescriptionMock.mutex.Lock()
	mmGenerateCampaignDescription.GenerateCampaignDescriptionMock.callArgs = append(mmGenerateCampaignDescription.GenerateCampaignDescriptionMock.callArgs, &mm_params)
	mmGenerateCampaignDescription.GenerateCampaignDescriptionMock.mutex.Unlock()

	for _, e := range mmGenerateCampaignDescription.GenerateCampaignDescriptionMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmGenerateCampaignDescription.GenerateCampaignDescriptionMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGenerateCampaignDescription.GenerateCampaignDescriptionMock.defaultExpectation.Counter, 1)
		mm_want := mmGenerateCampaignDescription.GenerateCampaignDescriptionMock.defaultExpectation.params
		mm_want_ptrs := mmGenerateCampaignDescription.GenerateCampaignDescriptionMock.defaultExpectation.paramPtrs

		mm_got := AiServiceMockGenerateCampaignDescriptionParams{ctx, adveristerName, campaignName}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGenerateCampaignDescription.t.Errorf("AiServiceMock.GenerateCampaignDescription got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGenerateCampaignDescription.GenerateCampaignDescriptionMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.adveristerName != nil && !minimock.Equal(*mm_want_ptrs.adveristerName, mm_got.adveristerName) {
				mmGenerateCampaignDescription.t.Errorf("AiServiceMock.GenerateCampaignDescription got unexpected parameter adveristerName, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGenerateCampaignDescription.GenerateCampaignDescriptionMock.defaultExpectation.expectationOrigins.originAdveristerName, *mm_want_ptrs.adveristerName, mm_got.adveristerName, minimock.Diff(*mm_want_ptrs.adveristerName, mm_got.adveristerName))
			}

			if mm_want_ptrs.campaignName != nil && !minimock.Equal(*mm_want_ptrs.campaignName, mm_got.campaignName) {
				mmGenerateCampaignDescription.t.Errorf("AiServiceMock.GenerateCampaignDescription got unexpected parameter campaignName, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGenerateCampaignDescription.GenerateCampaignDescriptionMock.defaultExpectation.expectationOrigins.originCampaignName, *mm_want_ptrs.campaignName, mm_got.campaignName, minimock.Diff(*mm_want_ptrs.campaignName, mm_got.campaignName))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGenerateCampaignDescription.t.Errorf("AiServiceMock.GenerateCampaignDescription got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGenerateCampaignDescription.GenerateCampaignDescriptionMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGenerateCampaignDescription.GenerateCampaignDescriptionMock.defaultExpectation.results
		if mm_results == nil {
			mmGenerateCampaignDescription.t.Fatal("No results are set for the AiServiceMock.GenerateCampaignDescription")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmGenerateCampaignDescription.funcGenerateCampaignDescription != nil {
		return mmGenerateCampaignDescription.funcGenerateCampaignDescription(ctx, adveristerName, campaignName)
	}
	mmGenerateCampaignDescription.t.Fatalf("Unexpected call to AiServiceMock.GenerateCampaignDescription. %v %v %v", ctx, adveristerName, campaignName)
	return
}

// GenerateCampaignDescriptionAfterCounter returns a count of finished AiServiceMock.GenerateCampaignDescription invocations
func (mmGenerateCampaignDescription *AiServiceMock) GenerateCampaignDescriptionAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGenerateCampaignDescription.afterGenerateCampaignDescriptionCounter)
}

// GenerateCampaignDescriptionBeforeCounter returns a count of AiServiceMock.GenerateCampaignDescription invocations
func (mmGenerateCampaignDescription *AiServiceMock) GenerateCampaignDescriptionBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGenerateCampaignDescription.beforeGenerateCampaignDescriptionCounter)
}

// Calls returns a list of arguments used in each call to AiServiceMock.GenerateCampaignDescription.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGenerateCampaignDescription *mAiServiceMockGenerateCampaignDescription) Calls() []*AiServiceMockGenerateCampaignDescriptionParams {
	mmGenerateCampaignDescription.mutex.RLock()

	argCopy := make([]*AiServiceMockGenerateCampaignDescriptionParams, len(mmGenerateCampaignDescription.callArgs))
	copy(argCopy, mmGenerateCampaignDescription.callArgs)

	mmGenerateCampaignDescription.mutex.RUnlock()

	return argCopy
}

// MinimockGenerateCampaignDescriptionDone returns true if the count of the GenerateCampaignDescription invocations corresponds
// the number of defined expectations
func (m *AiServiceMock) MinimockGenerateCampaignDescriptionDone() bool {
	if m.GenerateCampaignDescriptionMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GenerateCampaignDescriptionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GenerateCampaignDescriptionMock.invocationsDone()
}

// MinimockGenerateCampaignDescriptionInspect logs each unmet expectation
func (m *AiServiceMock) MinimockGenerateCampaignDescriptionInspect() {
	for _, e := range m.GenerateCampaignDescriptionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AiServiceMock.GenerateCampaignDescription at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGenerateCampaignDescriptionCounter := mm_atomic.LoadUint64(&m.afterGenerateCampaignDescriptionCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GenerateCampaignDescriptionMock.defaultExpectation != nil && afterGenerateCampaignDescriptionCounter < 1 {
		if m.GenerateCampaignDescriptionMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AiServiceMock.GenerateCampaignDescription at\n%s", m.GenerateCampaignDescriptionMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AiServiceMock.GenerateCampaignDescription at\n%s with params: %#v", m.GenerateCampaignDescriptionMock.defaultExpectation.expectationOrigins.origin, *m.GenerateCampaignDescriptionMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGenerateCampaignDescription != nil && afterGenerateCampaignDescriptionCounter < 1 {
		m.t.Errorf("Expected call to AiServiceMock.GenerateCampaignDescription at\n%s", m.funcGenerateCampaignDescriptionOrigin)
	}

	if !m.GenerateCampaignDescriptionMock.invocationsDone() && afterGenerateCampaignDescriptionCounter > 0 {
		m.t.Errorf("Expected %d calls to AiServiceMock.GenerateCampaignDescription at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GenerateCampaignDescriptionMock.expectedInvocations), m.GenerateCampaignDescriptionMock.expectedInvocationsOrigin, afterGenerateCampaignDescriptionCounter)
	}
}

type mAiServiceMockModerateText struct {
	optional           bool
	mock               *AiServiceMock
	defaultExpectation *AiServiceMockModerateTextExpectation
	expectations       []*AiServiceMockModerateTextExpectation

	callArgs []*AiServiceMockModerateTextParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AiServiceMockModerateTextExpectation specifies expectation struct of the AiService.ModerateText
type AiServiceMockModerateTextExpectation struct {
	mock               *AiServiceMock
	params             *AiServiceMockModerateTextParams
	paramPtrs          *AiServiceMockModerateTextParamPtrs
	expectationOrigins AiServiceMockModerateTextExpectationOrigins
	results            *AiServiceMockModerateTextResults
	returnOrigin       string
	Counter            uint64
}

// AiServiceMockModerateTextParams contains parameters of the AiService.ModerateText
type AiServiceMockModerateTextParams struct {
	ctx  context.Context
	text string
}

// AiServiceMockModerateTextParamPtrs contains pointers to parameters of the AiService.ModerateText
type AiServiceMockModerateTextParamPtrs struct {
	ctx  *context.Context
	text *string
}

// AiServiceMockModerateTextResults contains results of the AiService.ModerateText
type AiServiceMockModerateTextResults struct {
	b1  bool
	sa1 []string
	err error
}

// AiServiceMockModerateTextOrigins contains origins of expectations of the AiService.ModerateText
type AiServiceMockModerateTextExpectationOrigins struct {
	origin     string
	originCtx  string
	originText string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmModerateText *mAiServiceMockModerateText) Optional() *mAiServiceMockModerateText {
	mmModerateText.optional = true
	return mmModerateText
}

// Expect sets up expected params for AiService.ModerateText
func (mmModerateText *mAiServiceMockModerateText) Expect(ctx context.Context, text string) *mAiServiceMockModerateText {
	if mmModerateText.mock.funcModerateText != nil {
		mmModerateText.mock.t.Fatalf("AiServiceMock.ModerateText mock is already set by Set")
	}

	if mmModerateText.defaultExpectation == nil {
		mmModerateText.defaultExpectation = &AiServiceMockModerateTextExpectation{}
	}

	if mmModerateText.defaultExpectation.paramPtrs != nil {
		mmModerateText.mock.t.Fatalf("AiServiceMock.ModerateText mock is already set by ExpectParams functions")
	}

	mmModerateText.defaultExpectation.params = &AiServiceMockModerateTextParams{ctx, text}
	mmModerateText.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmModerateText.expectations {
		if minimock.Equal(e.params, mmModerateText.defaultExpectation.params) {
			mmModerateText.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmModerateText.defaultExpectation.params)
		}
	}

	return mmModerateText
}

// ExpectCtxParam1 sets up expected param ctx for AiService.ModerateText
func (mmModerateText *mAiServiceMockModerateText) ExpectCtxParam1(ctx context.Context) *mAiServiceMockModerateText {
	if mmModerateText.mock.funcModerateText != nil {
		mmModerateText.mock.t.Fatalf("AiServiceMock.ModerateText mock is already set by Set")
	}

	if mmModerateText.defaultExpectation == nil {
		mmModerateText.defaultExpectation = &AiServiceMockModerateTextExpectation{}
	}

	if mmModerateText.defaultExpectation.params != nil {
		mmModerateText.mock.t.Fatalf("AiServiceMock.ModerateText mock is already set by Expect")
	}

	if mmModerateText.defaultExpectation.paramPtrs == nil {
		mmModerateText.defaultExpectation.paramPtrs = &AiServiceMockModerateTextParamPtrs{}
	}
	mmModerateText.defaultExpectation.paramPtrs.ctx = &ctx
	mmModerateText.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmModerateText
}

// ExpectTextParam2 sets up expected param text for AiService.ModerateText
func (mmModerateText *mAiServiceMockModerateText) ExpectTextParam2(text string) *mAiServiceMockModerateText {
	if mmModerateText.mock.funcModerateText != nil {
		mmModerateText.mock.t.Fatalf("AiServiceMock.ModerateText mock is already set by Set")
	}

	if mmModerateText.defaultExpectation == nil {
		mmModerateText.defaultExpectation = &AiServiceMockModerateTextExpectation{}
	}

	if mmModerateText.defaultExpectation.params != nil {
		mmModerateText.mock.t.Fatalf("AiServiceMock.ModerateText mock is already set by Expect")
	}

	if mmModerateText.defaultExpectation.paramPtrs == nil {
		mmModerateText.defaultExpectation.paramPtrs = &AiServiceMockModerateTextParamPtrs{}
	}
	mmModerateText.defaultExpectation.paramPtrs.text = &text
	mmModerateText.defaultExpectation.expectationOrigins.originText = minimock.CallerInfo(1)

	return mmModerateText
}

// Inspect accepts an inspector function that has same arguments as the AiService.ModerateText
func (mmModerateText *mAiServiceMockModerateText) Inspect(f func(ctx context.Context, text string)) *mAiServiceMockModerateText {
	if mmModerateText.mock.inspectFuncModerateText != nil {
		mmModerateText.mock.t.Fatalf("Inspect function is already set for AiServiceMock.ModerateText")
	}

	mmModerateText.mock.inspectFuncModerateText = f

	return mmModerateText
}

// Return sets up results that will be returned by AiService.ModerateText
func (mmModerateText *mAiServiceMockModerateText) Return(b1 bool, sa1 []string, err error) *AiServiceMock {
	if mmModerateText.mock.funcModerateText != nil {
		mmModerateText.mock.t.Fatalf("AiServiceMock.ModerateText mock is already set by Set")
	}

	if mmModerateText.defaultExpectation == nil {
		mmModerateText.defaultExpectation = &AiServiceMockModerateTextExpectation{mock: mmModerateText.mock}
	}
	mmModerateText.defaultExpectation.results = &AiServiceMockModerateTextResults{b1, sa1, err}
	mmModerateText.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmModerateText.mock
}

// Set uses given function f to mock the AiService.ModerateText method
func (mmModerateText *mAiServiceMockModerateText) Set(f func(ctx context.Context, text string) (b1 bool, sa1 []string, err error)) *AiServiceMock {
	if mmModerateText.defaultExpectation != nil {
		mmModerateText.mock.t.Fatalf("Default expectation is already set for the AiService.ModerateText method")
	}

	if len(mmModerateText.expectations) > 0 {
		mmModerateText.mock.t.Fatalf("Some expectations are already set for the AiService.ModerateText method")
	}

	mmModerateText.mock.funcModerateText = f
	mmModerateText.mock.funcModerateTextOrigin = minimock.CallerInfo(1)
	return mmModerateText.mock
}

// When sets expectation for the AiService.ModerateText which will trigger the result defined by the following
// Then helper
func (mmModerateText *mAiServiceMockModerateText) When(ctx context.Context, text string) *AiServiceMockModerateTextExpectation {
	if mmModerateText.mock.funcModerateText != nil {
		mmModerateText.mock.t.Fatalf("AiServiceMock.ModerateText mock is already set by Set")
	}

	expectation := &AiServiceMockModerateTextExpectation{
		mock:               mmModerateText.mock,
		params:             &AiServiceMockModerateTextParams{ctx, text},
		expectationOrigins: AiServiceMockModerateTextExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmModerateText.expectations = append(mmModerateText.expectations, expectation)
	return expectation
}

// Then sets up AiService.ModerateText return parameters for the expectation previously defined by the When method
func (e *AiServiceMockModerateTextExpectation) Then(b1 bool, sa1 []string, err error) *AiServiceMock {
	e.results = &AiServiceMockModerateTextResults{b1, sa1, err}
	return e.mock
}

// Times sets number of times AiService.ModerateText should be invoked
func (mmModerateText *mAiServiceMockModerateText) Times(n uint64) *mAiServiceMockModerateText {
	if n == 0 {
		mmModerateText.mock.t.Fatalf("Times of AiServiceMock.ModerateText mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmModerateText.expectedInvocations, n)
	mmModerateText.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmModerateText
}

func (mmModerateText *mAiServiceMockModerateText) invocationsDone() bool {
	if len(mmModerateText.expectations) == 0 && mmModerateText.defaultExpectation == nil && mmModerateText.mock.funcModerateText == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmModerateText.mock.afterModerateTextCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmModerateText.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ModerateText implements mm_service.AiService
func (mmModerateText *AiServiceMock) ModerateText(ctx context.Context, text string) (b1 bool, sa1 []string, err error) {
	mm_atomic.AddUint64(&mmModerateText.beforeModerateTextCounter, 1)
	defer mm_atomic.AddUint64(&mmModerateText.afterModerateTextCounter, 1)

	mmModerateText.t.Helper()

	if mmModerateText.inspectFuncModerateText != nil {
		mmModerateText.inspectFuncModerateText(ctx, text)
	}

	mm_params := AiServiceMockModerateTextParams{ctx, text}

	// Record call args
	mmModerateText.ModerateTextMock.mutex.Lock()
	mmModerateText.ModerateTextMock.callArgs = append(mmModerateText.ModerateTextMock.callArgs, &mm_params)
	mmModerateText.ModerateTextMock.mutex.Unlock()

	for _, e := range mmModerateText.ModerateTextMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1, e.results.sa1, e.results.err
		}
	}

	if mmModerateText.ModerateTextMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmModerateText.ModerateTextMock.defaultExpectation.Counter, 1)
		mm_want := mmModerateText.ModerateTextMock.defaultExpectation.params
		mm_want_ptrs := mmModerateText.ModerateTextMock.defaultExpectation.paramPtrs

		mm_got := AiServiceMockModerateTextParams{ctx, text}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmModerateText.t.Errorf("AiServiceMock.ModerateText got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmModerateText.ModerateTextMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.text != nil && !minimock.Equal(*mm_want_ptrs.text, mm_got.text) {
				mmModerateText.t.Errorf("AiServiceMock.ModerateText got unexpected parameter text, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmModerateText.ModerateTextMock.defaultExpectation.expectationOrigins.originText, *mm_want_ptrs.text, mm_got.text, minimock.Diff(*mm_want_ptrs.text, mm_got.text))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmModerateText.t.Errorf("AiServiceMock.ModerateText got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmModerateText.ModerateTextMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmModerateText.ModerateTextMock.defaultExpectation.results
		if mm_results == nil {
			mmModerateText.t.Fatal("No results are set for the AiServiceMock.ModerateText")
		}
		return (*mm_results).b1, (*mm_results).sa1, (*mm_results).err
	}
	if mmModerateText.funcModerateText != nil {
		return mmModerateText.funcModerateText(ctx, text)
	}
	mmModerateText.t.Fatalf("Unexpected call to AiServiceMock.ModerateText. %v %v", ctx, text)
	return
}

// ModerateTextAfterCounter returns a count of finished AiServiceMock.ModerateText invocations
func (mmModerateText *AiServiceMock) ModerateTextAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmModerateText.afterModerateTextCounter)
}

// ModerateTextBeforeCounter returns a count of AiServiceMock.ModerateText invocations
func (mmModerateText *AiServiceMock) ModerateTextBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmModerateText.beforeModerateTextCounter)
}

// Calls returns a list of arguments used in each call to AiServiceMock.ModerateText.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmModerateText *mAiServiceMockModerateText) Calls() []*AiServiceMockModerateTextParams {
	mmModerateText.mutex.RLock()

	argCopy := make([]*AiServiceMockModerateTextParams, len(mmModerateText.callArgs))
	copy(argCopy, mmModerateText.callArgs)

	mmModerateText.mutex.RUnlock()

	return argCopy
}

// MinimockModerateTextDone returns true if the count of the ModerateText invocations corresponds
// the number of defined expectations
func (m *AiServiceMock) MinimockModerateTextDone() bool {
	if m.ModerateTextMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ModerateTextMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ModerateTextMock.invocationsDone()
}

// MinimockModerateTextInspect logs each unmet expectation
func (m *AiServiceMock) MinimockModerateTextInspect() {
	for _, e := range m.ModerateTextMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AiServiceMock.ModerateText at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterModerateTextCounter := mm_atomic.LoadUint64(&m.afterModerateTextCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ModerateTextMock.defaultExpectation != nil && afterModerateTextCounter < 1 {
		if m.ModerateTextMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AiServiceMock.ModerateText at\n%s", m.ModerateTextMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AiServiceMock.ModerateText at\n%s with params: %#v", m.ModerateTextMock.defaultExpectation.expectationOrigins.origin, *m.ModerateTextMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcModerateText != nil && afterModerateTextCounter < 1 {
		m.t.Errorf("Expected call to AiServiceMock.ModerateText at\n%s", m.funcModerateTextOrigin)
	}

	if !m.ModerateTextMock.invocationsDone() && afterModerateTextCounter > 0 {
		m.t.Errorf("Expected %d calls to AiServiceMock.ModerateText at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ModerateTextMock.expectedInvocations), m.ModerateTextMock.expectedInvocationsOrigin, afterModerateTextCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AiServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGenerateCampaignDescriptionInspect()

			m.MinimockModerateTextInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AiServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AiServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGenerateCampaignDescriptionDone() &&
		m.MinimockModerateTextDone()
}
