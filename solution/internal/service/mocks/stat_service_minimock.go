// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i server/internal/service.StatService -o stat_service_minimock.go -n StatServiceMock -p mocks

import (
	"context"
	"server/internal/model"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// StatServiceMock implements mm_service.StatService
type StatServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetByAdvertiser          func(ctx context.Context, advertiserID string) (sp1 *model.Stat, err error)
	funcGetByAdvertiserOrigin    string
	inspectFuncGetByAdvertiser   func(ctx context.Context, advertiserID string)
	afterGetByAdvertiserCounter  uint64
	beforeGetByAdvertiserCounter uint64
	GetByAdvertiserMock          mStatServiceMockGetByAdvertiser

	funcGetByAdvertiserDaily          func(ctx context.Context, advertiserID string) (sp1 *model.Stat, err error)
	funcGetByAdvertiserDailyOrigin    string
	inspectFuncGetByAdvertiserDaily   func(ctx context.Context, advertiserID string)
	afterGetByAdvertiserDailyCounter  uint64
	beforeGetByAdvertiserDailyCounter uint64
	GetByAdvertiserDailyMock          mStatServiceMockGetByAdvertiserDaily

	funcGetByCampaign          func(ctx context.Context, campaignID string) (sp1 *model.Stat, err error)
	funcGetByCampaignOrigin    string
	inspectFuncGetByCampaign   func(ctx context.Context, campaignID string)
	afterGetByCampaignCounter  uint64
	beforeGetByCampaignCounter uint64
	GetByCampaignMock          mStatServiceMockGetByCampaign

	funcGetByCampaignDaily          func(ctx context.Context, campaignID string) (sp1 *model.Stat, err error)
	funcGetByCampaignDailyOrigin    string
	inspectFuncGetByCampaignDaily   func(ctx context.Context, campaignID string)
	afterGetByCampaignDailyCounter  uint64
	beforeGetByCampaignDailyCounter uint64
	GetByCampaignDailyMock          mStatServiceMockGetByCampaignDaily
}

// NewStatServiceMock returns a mock for mm_service.StatService
func NewStatServiceMock(t minimock.Tester) *StatServiceMock {
	m := &StatServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetByAdvertiserMock = mStatServiceMockGetByAdvertiser{mock: m}
	m.GetByAdvertiserMock.callArgs = []*StatServiceMockGetByAdvertiserParams{}

	m.GetByAdvertiserDailyMock = mStatServiceMockGetByAdvertiserDaily{mock: m}
	m.GetByAdvertiserDailyMock.callArgs = []*StatServiceMockGetByAdvertiserDailyParams{}

	m.GetByCampaignMock = mStatServiceMockGetByCampaign{mock: m}
	m.GetByCampaignMock.callArgs = []*StatServiceMockGetByCampaignParams{}

	m.GetByCampaignDailyMock = mStatServiceMockGetByCampaignDaily{mock: m}
	m.GetByCampaignDailyMock.callArgs = []*StatServiceMockGetByCampaignDailyParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mStatServiceMockGetByAdvertiser struct {
	optional           bool
	mock               *StatServiceMock
	defaultExpectation *StatServiceMockGetByAdvertiserExpectation
	expectations       []*StatServiceMockGetByAdvertiserExpectation

	callArgs []*StatServiceMockGetByAdvertiserParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// StatServiceMockGetByAdvertiserExpectation specifies expectation struct of the StatService.GetByAdvertiser
type StatServiceMockGetByAdvertiserExpectation struct {
	mock               *StatServiceMock
	params             *StatServiceMockGetByAdvertiserParams
	paramPtrs          *StatServiceMockGetByAdvertiserParamPtrs
	expectationOrigins StatServiceMockGetByAdvertiserExpectationOrigins
	results            *StatServiceMockGetByAdvertiserResults
	returnOrigin       string
	Counter            uint64
}

// StatServiceMockGetByAdvertiserParams contains parameters of the StatService.GetByAdvertiser
type StatServiceMockGetByAdvertiserParams struct {
	ctx          context.Context
	advertiserID string
}

// StatServiceMockGetByAdvertiserParamPtrs contains pointers to parameters of the StatService.GetByAdvertiser
type StatServiceMockGetByAdvertiserParamPtrs struct {
	ctx          *context.Context
	advertiserID *string
}

// StatServiceMockGetByAdvertiserResults contains results of the StatService.GetByAdvertiser
type StatServiceMockGetByAdvertiserResults struct {
	sp1 *model.Stat
	err error
}

// StatServiceMockGetByAdvertiserOrigins contains origins of expectations of the StatService.GetByAdvertiser
type StatServiceMockGetByAdvertiserExpectationOrigins struct {
	origin             string
	originCtx          string
	originAdvertiserID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetByAdvertiser *mStatServiceMockGetByAdvertiser) Optional() *mStatServiceMockGetByAdvertiser {
	mmGetByAdvertiser.optional = true
	return mmGetByAdvertiser
}

// Expect sets up expected params for StatService.GetByAdvertiser
func (mmGetByAdvertiser *mStatServiceMockGetByAdvertiser) Expect(ctx context.Context, advertiserID string) *mStatServiceMockGetByAdvertiser {
	if mmGetByAdvertiser.mock.funcGetByAdvertiser != nil {
		mmGetByAdvertiser.mock.t.Fatalf("StatServiceMock.GetByAdvertiser mock is already set by Set")
	}

	if mmGetByAdvertiser.defaultExpectation == nil {
		mmGetByAdvertiser.defaultExpectation = &StatServiceMockGetByAdvertiserExpectation{}
	}

	if mmGetByAdvertiser.defaultExpectation.paramPtrs != nil {
		mmGetByAdvertiser.mock.t.Fatalf("StatServiceMock.GetByAdvertiser mock is already set by ExpectParams functions")
	}

	mmGetByAdvertiser.defaultExpectation.params = &StatServiceMockGetByAdvertiserParams{ctx, advertiserID}
	mmGetByAdvertiser.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetByAdvertiser.expectations {
		if minimock.Equal(e.params, mmGetByAdvertiser.defaultExpectation.params) {
			mmGetByAdvertiser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetByAdvertiser.defaultExpectation.params)
		}
	}

	return mmGetByAdvertiser
}

// ExpectCtxParam1 sets up expected param ctx for StatService.GetByAdvertiser
func (mmGetByAdvertiser *mStatServiceMockGetByAdvertiser) ExpectCtxParam1(ctx context.Context) *mStatServiceMockGetByAdvertiser {
	if mmGetByAdvertiser.mock.funcGetByAdvertiser != nil {
		mmGetByAdvertiser.mock.t.Fatalf("StatServiceMock.GetByAdvertiser mock is already set by Set")
	}

	if mmGetByAdvertiser.defaultExpectation == nil {
		mmGetByAdvertiser.defaultExpectation = &StatServiceMockGetByAdvertiserExpectation{}
	}

	if mmGetByAdvertiser.defaultExpectation.params != nil {
		mmGetByAdvertiser.mock.t.Fatalf("StatServiceMock.GetByAdvertiser mock is already set by Expect")
	}

	if mmGetByAdvertiser.defaultExpectation.paramPtrs == nil {
		mmGetByAdvertiser.defaultExpectation.paramPtrs = &StatServiceMockGetByAdvertiserParamPtrs{}
	}
	mmGetByAdvertiser.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetByAdvertiser.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetByAdvertiser
}

// ExpectAdvertiserIDParam2 sets up expected param advertiserID for StatService.GetByAdvertiser
func (mmGetByAdvertiser *mStatServiceMockGetByAdvertiser) ExpectAdvertiserIDParam2(advertiserID string) *mStatServiceMockGetByAdvertiser {
	if mmGetByAdvertiser.mock.funcGetByAdvertiser != nil {
		mmGetByAdvertiser.mock.t.Fatalf("StatServiceMock.GetByAdvertiser mock is already set by Set")
	}

	if mmGetByAdvertiser.defaultExpectation == nil {
		mmGetByAdvertiser.defaultExpectation = &StatServiceMockGetByAdvertiserExpectation{}
	}

	if mmGetByAdvertiser.defaultExpectation.params != nil {
		mmGetByAdvertiser.mock.t.Fatalf("StatServiceMock.GetByAdvertiser mock is already set by Expect")
	}

	if mmGetByAdvertiser.defaultExpectation.paramPtrs == nil {
		mmGetByAdvertiser.defaultExpectation.paramPtrs = &StatServiceMockGetByAdvertiserParamPtrs{}
	}
	mmGetByAdvertiser.defaultExpectation.paramPtrs.advertiserID = &advertiserID
	mmGetByAdvertiser.defaultExpectation.expectationOrigins.originAdvertiserID = minimock.CallerInfo(1)

	return mmGetByAdvertiser
}

// Inspect accepts an inspector function that has same arguments as the StatService.GetByAdvertiser
func (mmGetByAdvertiser *mStatServiceMockGetByAdvertiser) Inspect(f func(ctx context.Context, advertiserID string)) *mStatServiceMockGetByAdvertiser {
	if mmGetByAdvertiser.mock.inspectFuncGetByAdvertiser != nil {
		mmGetByAdvertiser.mock.t.Fatalf("Inspect function is already set for StatServiceMock.GetByAdvertiser")
	}

	mmGetByAdvertiser.mock.inspectFuncGetByAdvertiser = f

	return mmGetByAdvertiser
}

// Return sets up results that will be returned by StatService.GetByAdvertiser
func (mmGetByAdvertiser *mStatServiceMockGetByAdvertiser) Return(sp1 *model.Stat, err error) *StatServiceMock {
	if mmGetByAdvertiser.mock.funcGetByAdvertiser != nil {
		mmGetByAdvertiser.mock.t.Fatalf("StatServiceMock.GetByAdvertiser mock is already set by Set")
	}

	if mmGetByAdvertiser.defaultExpectation == nil {
		mmGetByAdvertiser.defaultExpectation = &StatServiceMockGetByAdvertiserExpectation{mock: mmGetByAdvertiser.mock}
	}
	mmGetByAdvertiser.defaultExpectation.results = &StatServiceMockGetByAdvertiserResults{sp1, err}
	mmGetByAdvertiser.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetByAdvertiser.mock
}

// Set uses given function f to mock the StatService.GetByAdvertiser method
func (mmGetByAdvertiser *mStatServiceMockGetByAdvertiser) Set(f func(ctx context.Context, advertiserID string) (sp1 *model.Stat, err error)) *StatServiceMock {
	if mmGetByAdvertiser.defaultExpectation != nil {
		mmGetByAdvertiser.mock.t.Fatalf("Default expectation is already set for the StatService.GetByAdvertiser method")
	}

	if len(mmGetByAdvertiser.expectations) > 0 {
		mmGetByAdvertiser.mock.t.Fatalf("Some expectations are already set for the StatService.GetByAdvertiser method")
	}

	mmGetByAdvertiser.mock.funcGetByAdvertiser = f
	mmGetByAdvertiser.mock.funcGetByAdvertiserOrigin = minimock.CallerInfo(1)
	return mmGetByAdvertiser.mock
}

// When sets expectation for the StatService.GetByAdvertiser which will trigger the result defined by the following
// Then helper
func (mmGetByAdvertiser *mStatServiceMockGetByAdvertiser) When(ctx context.Context, advertiserID string) *StatServiceMockGetByAdvertiserExpectation {
	if mmGetByAdvertiser.mock.funcGetByAdvertiser != nil {
		mmGetByAdvertiser.mock.t.Fatalf("StatServiceMock.GetByAdvertiser mock is already set by Set")
	}

	expectation := &StatServiceMockGetByAdvertiserExpectation{
		mock:               mmGetByAdvertiser.mock,
		params:             &StatServiceMockGetByAdvertiserParams{ctx, advertiserID},
		expectationOrigins: StatServiceMockGetByAdvertiserExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetByAdvertiser.expectations = append(mmGetByAdvertiser.expectations, expectation)
	return expectation
}

// Then sets up StatService.GetByAdvertiser return parameters for the expectation previously defined by the When method
func (e *StatServiceMockGetByAdvertiserExpectation) Then(sp1 *model.Stat, err error) *StatServiceMock {
	e.results = &StatServiceMockGetByAdvertiserResults{sp1, err}
	return e.mock
}

// Times sets number of times StatService.GetByAdvertiser should be invoked
func (mmGetByAdvertiser *mStatServiceMockGetByAdvertiser) Times(n uint64) *mStatServiceMockGetByAdvertiser {
	if n == 0 {
		mmGetByAdvertiser.mock.t.Fatalf("Times of StatServiceMock.GetByAdvertiser mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetByAdvertiser.expectedInvocations, n)
	mmGetByAdvertiser.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetByAdvertiser
}

func (mmGetByAdvertiser *mStatServiceMockGetByAdvertiser) invocationsDone() bool {
	if len(mmGetByAdvertiser.expectations) == 0 && mmGetByAdvertiser.defaultExpectation == nil && mmGetByAdvertiser.mock.funcGetByAdvertiser == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetByAdvertiser.mock.afterGetByAdvertiserCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetByAdvertiser.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetByAdvertiser implements mm_service.StatService
func (mmGetByAdvertiser *StatServiceMock) GetByAdvertiser(ctx context.Context, advertiserID string) (sp1 *model.Stat, err error) {
	mm_atomic.AddUint64(&mmGetByAdvertiser.beforeGetByAdvertiserCounter, 1)
	defer mm_atomic.AddUint64(&mmGetByAdvertiser.afterGetByAdvertiserCounter, 1)

	mmGetByAdvertiser.t.Helper()

	if mmGetByAdvertiser.inspectFuncGetByAdvertiser != nil {
		mmGetByAdvertiser.inspectFuncGetByAdvertiser(ctx, advertiserID)
	}

	mm_params := StatServiceMockGetByAdvertiserParams{ctx, advertiserID}

	// Record call args
	mmGetByAdvertiser.GetByAdvertiserMock.mutex.Lock()
	mmGetByAdvertiser.GetByAdvertiserMock.callArgs = append(mmGetByAdvertiser.GetByAdvertiserMock.callArgs, &mm_params)
	mmGetByAdvertiser.GetByAdvertiserMock.mutex.Unlock()

	for _, e := range mmGetByAdvertiser.GetByAdvertiserMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sp1, e.results.err
		}
	}

	if mmGetByAdvertiser.GetByAdvertiserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetByAdvertiser.GetByAdvertiserMock.defaultExpectation.Counter, 1)
		mm_want := mmGetByAdvertiser.GetByAdvertiserMock.defaultExpectation.params
		mm_want_ptrs := mmGetByAdvertiser.GetByAdvertiserMock.defaultExpectation.paramPtrs

		mm_got := StatServiceMockGetByAdvertiserParams{ctx, advertiserID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetByAdvertiser.t.Errorf("StatServiceMock.GetByAdvertiser got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetByAdvertiser.GetByAdvertiserMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.advertiserID != nil && !minimock.Equal(*mm_want_ptrs.advertiserID, mm_got.advertiserID) {
				mmGetByAdvertiser.t.Errorf("StatServiceMock.GetByAdvertiser got unexpected parameter advertiserID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetByAdvertiser.GetByAdvertiserMock.defaultExpectation.expectationOrigins.originAdvertiserID, *mm_want_ptrs.advertiserID, mm_got.advertiserID, minimock.Diff(*mm_want_ptrs.advertiserID, mm_got.advertiserID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetByAdvertiser.t.Errorf("StatServiceMock.GetByAdvertiser got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetByAdvertiser.GetByAdvertiserMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetByAdvertiser.GetByAdvertiserMock.defaultExpectation.results
		if mm_results == nil {
			mmGetByAdvertiser.t.Fatal("No results are set for the StatServiceMock.GetByAdvertiser")
		}
		return (*mm_results).sp1, (*mm_results).err
	}
	if mmGetByAdvertiser.funcGetByAdvertiser != nil {
		return mmGetByAdvertiser.funcGetByAdvertiser(ctx, advertiserID)
	}
	mmGetByAdvertiser.t.Fatalf("Unexpected call to StatServiceMock.GetByAdvertiser. %v %v", ctx, advertiserID)
	return
}

// GetByAdvertiserAfterCounter returns a count of finished StatServiceMock.GetByAdvertiser invocations
func (mmGetByAdvertiser *StatServiceMock) GetByAdvertiserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByAdvertiser.afterGetByAdvertiserCounter)
}

// GetByAdvertiserBeforeCounter returns a count of StatServiceMock.GetByAdvertiser invocations
func (mmGetByAdvertiser *StatServiceMock) GetByAdvertiserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByAdvertiser.beforeGetByAdvertiserCounter)
}

// Calls returns a list of arguments used in each call to StatServiceMock.GetByAdvertiser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetByAdvertiser *mStatServiceMockGetByAdvertiser) Calls() []*StatServiceMockGetByAdvertiserParams {
	mmGetByAdvertiser.mutex.RLock()

	argCopy := make([]*StatServiceMockGetByAdvertiserParams, len(mmGetByAdvertiser.callArgs))
	copy(argCopy, mmGetByAdvertiser.callArgs)

	mmGetByAdvertiser.mutex.RUnlock()

	return argCopy
}

// MinimockGetByAdvertiserDone returns true if the count of the GetByAdvertiser invocations corresponds
// the number of defined expectations
func (m *StatServiceMock) MinimockGetByAdvertiserDone() bool {
	if m.GetByAdvertiserMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetByAdvertiserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetByAdvertiserMock.invocationsDone()
}

// MinimockGetByAdvertiserInspect logs each unmet expectation
func (m *StatServiceMock) MinimockGetByAdvertiserInspect() {
	for _, e := range m.GetByAdvertiserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StatServiceMock.GetByAdvertiser at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetByAdvertiserCounter := mm_atomic.LoadUint64(&m.afterGetByAdvertiserCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetByAdvertiserMock.defaultExpectation != nil && afterGetByAdvertiserCounter < 1 {
		if m.GetByAdvertiserMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to StatServiceMock.GetByAdvertiser at\n%s", m.GetByAdvertiserMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to StatServiceMock.GetByAdvertiser at\n%s with params: %#v", m.GetByAdvertiserMock.defaultExpectation.expectationOrigins.origin, *m.GetByAdvertiserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByAdvertiser != nil && afterGetByAdvertiserCounter < 1 {
		m.t.Errorf("Expected call to StatServiceMock.GetByAdvertiser at\n%s", m.funcGetByAdvertiserOrigin)
	}

	if !m.GetByAdvertiserMock.invocationsDone() && afterGetByAdvertiserCounter > 0 {
		m.t.Errorf("Expected %d calls to StatServiceMock.GetByAdvertiser at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetByAdvertiserMock.expectedInvocations), m.GetByAdvertiserMock.expectedInvocationsOrigin, afterGetByAdvertiserCounter)
	}
}

type mStatServiceMockGetByAdvertiserDaily struct {
	optional           bool
	mock               *StatServiceMock
	defaultExpectation *StatServiceMockGetByAdvertiserDailyExpectation
	expectations       []*StatServiceMockGetByAdvertiserDailyExpectation

	callArgs []*StatServiceMockGetByAdvertiserDailyParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// StatServiceMockGetByAdvertiserDailyExpectation specifies expectation struct of the StatService.GetByAdvertiserDaily
type StatServiceMockGetByAdvertiserDailyExpectation struct {
	mock               *StatServiceMock
	params             *StatServiceMockGetByAdvertiserDailyParams
	paramPtrs          *StatServiceMockGetByAdvertiserDailyParamPtrs
	expectationOrigins StatServiceMockGetByAdvertiserDailyExpectationOrigins
	results            *StatServiceMockGetByAdvertiserDailyResults
	returnOrigin       string
	Counter            uint64
}

// StatServiceMockGetByAdvertiserDailyParams contains parameters of the StatService.GetByAdvertiserDaily
type StatServiceMockGetByAdvertiserDailyParams struct {
	ctx          context.Context
	advertiserID string
}

// StatServiceMockGetByAdvertiserDailyParamPtrs contains pointers to parameters of the StatService.GetByAdvertiserDaily
type StatServiceMockGetByAdvertiserDailyParamPtrs struct {
	ctx          *context.Context
	advertiserID *string
}

// StatServiceMockGetByAdvertiserDailyResults contains results of the StatService.GetByAdvertiserDaily
type StatServiceMockGetByAdvertiserDailyResults struct {
	sp1 *model.Stat
	err error
}

// StatServiceMockGetByAdvertiserDailyOrigins contains origins of expectations of the StatService.GetByAdvertiserDaily
type StatServiceMockGetByAdvertiserDailyExpectationOrigins struct {
	origin             string
	originCtx          string
	originAdvertiserID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetByAdvertiserDaily *mStatServiceMockGetByAdvertiserDaily) Optional() *mStatServiceMockGetByAdvertiserDaily {
	mmGetByAdvertiserDaily.optional = true
	return mmGetByAdvertiserDaily
}

// Expect sets up expected params for StatService.GetByAdvertiserDaily
func (mmGetByAdvertiserDaily *mStatServiceMockGetByAdvertiserDaily) Expect(ctx context.Context, advertiserID string) *mStatServiceMockGetByAdvertiserDaily {
	if mmGetByAdvertiserDaily.mock.funcGetByAdvertiserDaily != nil {
		mmGetByAdvertiserDaily.mock.t.Fatalf("StatServiceMock.GetByAdvertiserDaily mock is already set by Set")
	}

	if mmGetByAdvertiserDaily.defaultExpectation == nil {
		mmGetByAdvertiserDaily.defaultExpectation = &StatServiceMockGetByAdvertiserDailyExpectation{}
	}

	if mmGetByAdvertiserDaily.defaultExpectation.paramPtrs != nil {
		mmGetByAdvertiserDaily.mock.t.Fatalf("StatServiceMock.GetByAdvertiserDaily mock is already set by ExpectParams functions")
	}

	mmGetByAdvertiserDaily.defaultExpectation.params = &StatServiceMockGetByAdvertiserDailyParams{ctx, advertiserID}
	mmGetByAdvertiserDaily.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetByAdvertiserDaily.expectations {
		if minimock.Equal(e.params, mmGetByAdvertiserDaily.defaultExpectation.params) {
			mmGetByAdvertiserDaily.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetByAdvertiserDaily.defaultExpectation.params)
		}
	}

	return mmGetByAdvertiserDaily
}

// ExpectCtxParam1 sets up expected param ctx for StatService.GetByAdvertiserDaily
func (mmGetByAdvertiserDaily *mStatServiceMockGetByAdvertiserDaily) ExpectCtxParam1(ctx context.Context) *mStatServiceMockGetByAdvertiserDaily {
	if mmGetByAdvertiserDaily.mock.funcGetByAdvertiserDaily != nil {
		mmGetByAdvertiserDaily.mock.t.Fatalf("StatServiceMock.GetByAdvertiserDaily mock is already set by Set")
	}

	if mmGetByAdvertiserDaily.defaultExpectation == nil {
		mmGetByAdvertiserDaily.defaultExpectation = &StatServiceMockGetByAdvertiserDailyExpectation{}
	}

	if mmGetByAdvertiserDaily.defaultExpectation.params != nil {
		mmGetByAdvertiserDaily.mock.t.Fatalf("StatServiceMock.GetByAdvertiserDaily mock is already set by Expect")
	}

	if mmGetByAdvertiserDaily.defaultExpectation.paramPtrs == nil {
		mmGetByAdvertiserDaily.defaultExpectation.paramPtrs = &StatServiceMockGetByAdvertiserDailyParamPtrs{}
	}
	mmGetByAdvertiserDaily.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetByAdvertiserDaily.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetByAdvertiserDaily
}

// ExpectAdvertiserIDParam2 sets up expected param advertiserID for StatService.GetByAdvertiserDaily
func (mmGetByAdvertiserDaily *mStatServiceMockGetByAdvertiserDaily) ExpectAdvertiserIDParam2(advertiserID string) *mStatServiceMockGetByAdvertiserDaily {
	if mmGetByAdvertiserDaily.mock.funcGetByAdvertiserDaily != nil {
		mmGetByAdvertiserDaily.mock.t.Fatalf("StatServiceMock.GetByAdvertiserDaily mock is already set by Set")
	}

	if mmGetByAdvertiserDaily.defaultExpectation == nil {
		mmGetByAdvertiserDaily.defaultExpectation = &StatServiceMockGetByAdvertiserDailyExpectation{}
	}

	if mmGetByAdvertiserDaily.defaultExpectation.params != nil {
		mmGetByAdvertiserDaily.mock.t.Fatalf("StatServiceMock.GetByAdvertiserDaily mock is already set by Expect")
	}

	if mmGetByAdvertiserDaily.defaultExpectation.paramPtrs == nil {
		mmGetByAdvertiserDaily.defaultExpectation.paramPtrs = &StatServiceMockGetByAdvertiserDailyParamPtrs{}
	}
	mmGetByAdvertiserDaily.defaultExpectation.paramPtrs.advertiserID = &advertiserID
	mmGetByAdvertiserDaily.defaultExpectation.expectationOrigins.originAdvertiserID = minimock.CallerInfo(1)

	return mmGetByAdvertiserDaily
}

// Inspect accepts an inspector function that has same arguments as the StatService.GetByAdvertiserDaily
func (mmGetByAdvertiserDaily *mStatServiceMockGetByAdvertiserDaily) Inspect(f func(ctx context.Context, advertiserID string)) *mStatServiceMockGetByAdvertiserDaily {
	if mmGetByAdvertiserDaily.mock.inspectFuncGetByAdvertiserDaily != nil {
		mmGetByAdvertiserDaily.mock.t.Fatalf("Inspect function is already set for StatServiceMock.GetByAdvertiserDaily")
	}

	mmGetByAdvertiserDaily.mock.inspectFuncGetByAdvertiserDaily = f

	return mmGetByAdvertiserDaily
}

// Return sets up results that will be returned by StatService.GetByAdvertiserDaily
func (mmGetByAdvertiserDaily *mStatServiceMockGetByAdvertiserDaily) Return(sp1 *model.Stat, err error) *StatServiceMock {
	if mmGetByAdvertiserDaily.mock.funcGetByAdvertiserDaily != nil {
		mmGetByAdvertiserDaily.mock.t.Fatalf("StatServiceMock.GetByAdvertiserDaily mock is already set by Set")
	}

	if mmGetByAdvertiserDaily.defaultExpectation == nil {
		mmGetByAdvertiserDaily.defaultExpectation = &StatServiceMockGetByAdvertiserDailyExpectation{mock: mmGetByAdvertiserDaily.mock}
	}
	mmGetByAdvertiserDaily.defaultExpectation.results = &StatServiceMockGetByAdvertiserDailyResults{sp1, err}
	mmGetByAdvertiserDaily.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetByAdvertiserDaily.mock
}

// Set uses given function f to mock the StatService.GetByAdvertiserDaily method
func (mmGetByAdvertiserDaily *mStatServiceMockGetByAdvertiserDaily) Set(f func(ctx context.Context, advertiserID string) (sp1 *model.Stat, err error)) *StatServiceMock {
	if mmGetByAdvertiserDaily.defaultExpectation != nil {
		mmGetByAdvertiserDaily.mock.t.Fatalf("Default expectation is already set for the StatService.GetByAdvertiserDaily method")
	}

	if len(mmGetByAdvertiserDaily.expectations) > 0 {
		mmGetByAdvertiserDaily.mock.t.Fatalf("Some expectations are already set for the StatService.GetByAdvertiserDaily method")
	}

	mmGetByAdvertiserDaily.mock.funcGetByAdvertiserDaily = f
	mmGetByAdvertiserDaily.mock.funcGetByAdvertiserDailyOrigin = minimock.CallerInfo(1)
	return mmGetByAdvertiserDaily.mock
}

// When sets expectation for the StatService.GetByAdvertiserDaily which will trigger the result defined by the following
// Then helper
func (mmGetByAdvertiserDaily *mStatServiceMockGetByAdvertiserDaily) When(ctx context.Context, advertiserID string) *StatServiceMockGetByAdvertiserDailyExpectation {
	if mmGetByAdvertiserDaily.mock.funcGetByAdvertiserDaily != nil {
		mmGetByAdvertiserDaily.mock.t.Fatalf("StatServiceMock.GetByAdvertiserDaily mock is already set by Set")
	}

	expectation := &StatServiceMockGetByAdvertiserDailyExpectation{
		mock:               mmGetByAdvertiserDaily.mock,
		params:             &StatServiceMockGetByAdvertiserDailyParams{ctx, advertiserID},
		expectationOrigins: StatServiceMockGetByAdvertiserDailyExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetByAdvertiserDaily.expectations = append(mmGetByAdvertiserDaily.expectations, expectation)
	return expectation
}

// Then sets up StatService.GetByAdvertiserDaily return parameters for the expectation previously defined by the When method
func (e *StatServiceMockGetByAdvertiserDailyExpectation) Then(sp1 *model.Stat, err error) *StatServiceMock {
	e.results = &StatServiceMockGetByAdvertiserDailyResults{sp1, err}
	return e.mock
}

// Times sets number of times StatService.GetByAdvertiserDaily should be invoked
func (mmGetByAdvertiserDaily *mStatServiceMockGetByAdvertiserDaily) Times(n uint64) *mStatServiceMockGetByAdvertiserDaily {
	if n == 0 {
		mmGetByAdvertiserDaily.mock.t.Fatalf("Times of StatServiceMock.GetByAdvertiserDaily mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetByAdvertiserDaily.expectedInvocations, n)
	mmGetByAdvertiserDaily.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetByAdvertiserDaily
}

func (mmGetByAdvertiserDaily *mStatServiceMockGetByAdvertiserDaily) invocationsDone() bool {
	if len(mmGetByAdvertiserDaily.expectations) == 0 && mmGetByAdvertiserDaily.defaultExpectation == nil && mmGetByAdvertiserDaily.mock.funcGetByAdvertiserDaily == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetByAdvertiserDaily.mock.afterGetByAdvertiserDailyCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetByAdvertiserDaily.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetByAdvertiserDaily implements mm_service.StatService
func (mmGetByAdvertiserDaily *StatServiceMock) GetByAdvertiserDaily(ctx context.Context, advertiserID string) (sp1 *model.Stat, err error) {
	mm_atomic.AddUint64(&mmGetByAdvertiserDaily.beforeGetByAdvertiserDailyCounter, 1)
	defer mm_atomic.AddUint64(&mmGetByAdvertiserDaily.afterGetByAdvertiserDailyCounter, 1)

	mmGetByAdvertiserDaily.t.Helper()

	if mmGetByAdvertiserDaily.inspectFuncGetByAdvertiserDaily != nil {
		mmGetByAdvertiserDaily.inspectFuncGetByAdvertiserDaily(ctx, advertiserID)
	}

	mm_params := StatServiceMockGetByAdvertiserDailyParams{ctx, advertiserID}

	// Record call args
	mmGetByAdvertiserDaily.GetByAdvertiserDailyMock.mutex.Lock()
	mmGetByAdvertiserDaily.GetByAdvertiserDailyMock.callArgs = append(mmGetByAdvertiserDaily.GetByAdvertiserDailyMock.callArgs, &mm_params)
	mmGetByAdvertiserDaily.GetByAdvertiserDailyMock.mutex.Unlock()

	for _, e := range mmGetByAdvertiserDaily.GetByAdvertiserDailyMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sp1, e.results.err
		}
	}

	if mmGetByAdvertiserDaily.GetByAdvertiserDailyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetByAdvertiserDaily.GetByAdvertiserDailyMock.defaultExpectation.Counter, 1)
		mm_want := mmGetByAdvertiserDaily.GetByAdvertiserDailyMock.defaultExpectation.params
		mm_want_ptrs := mmGetByAdvertiserDaily.GetByAdvertiserDailyMock.defaultExpectation.paramPtrs

		mm_got := StatServiceMockGetByAdvertiserDailyParams{ctx, advertiserID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetByAdvertiserDaily.t.Errorf("StatServiceMock.GetByAdvertiserDaily got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetByAdvertiserDaily.GetByAdvertiserDailyMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.advertiserID != nil && !minimock.Equal(*mm_want_ptrs.advertiserID, mm_got.advertiserID) {
				mmGetByAdvertiserDaily.t.Errorf("StatServiceMock.GetByAdvertiserDaily got unexpected parameter advertiserID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetByAdvertiserDaily.GetByAdvertiserDailyMock.defaultExpectation.expectationOrigins.originAdvertiserID, *mm_want_ptrs.advertiserID, mm_got.advertiserID, minimock.Diff(*mm_want_ptrs.advertiserID, mm_got.advertiserID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetByAdvertiserDaily.t.Errorf("StatServiceMock.GetByAdvertiserDaily got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetByAdvertiserDaily.GetByAdvertiserDailyMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetByAdvertiserDaily.GetByAdvertiserDailyMock.defaultExpectation.results
		if mm_results == nil {
			mmGetByAdvertiserDaily.t.Fatal("No results are set for the StatServiceMock.GetByAdvertiserDaily")
		}
		return (*mm_results).sp1, (*mm_results).err
	}
	if mmGetByAdvertiserDaily.funcGetByAdvertiserDaily != nil {
		return mmGetByAdvertiserDaily.funcGetByAdvertiserDaily(ctx, advertiserID)
	}
	mmGetByAdvertiserDaily.t.Fatalf("Unexpected call to StatServiceMock.GetByAdvertiserDaily. %v %v", ctx, advertiserID)
	return
}

// GetByAdvertiserDailyAfterCounter returns a count of finished StatServiceMock.GetByAdvertiserDaily invocations
func (mmGetByAdvertiserDaily *StatServiceMock) GetByAdvertiserDailyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByAdvertiserDaily.afterGetByAdvertiserDailyCounter)
}

// GetByAdvertiserDailyBeforeCounter returns a count of StatServiceMock.GetByAdvertiserDaily invocations
func (mmGetByAdvertiserDaily *StatServiceMock) GetByAdvertiserDailyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByAdvertiserDaily.beforeGetByAdvertiserDailyCounter)
}

// Calls returns a list of arguments used in each call to StatServiceMock.GetByAdvertiserDaily.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetByAdvertiserDaily *mStatServiceMockGetByAdvertiserDaily) Calls() []*StatServiceMockGetByAdvertiserDailyParams {
	mmGetByAdvertiserDaily.mutex.RLock()

	argCopy := make([]*StatServiceMockGetByAdvertiserDailyParams, len(mmGetByAdvertiserDaily.callArgs))
	copy(argCopy, mmGetByAdvertiserDaily.callArgs)

	mmGetByAdvertiserDaily.mutex.RUnlock()

	return argCopy
}

// MinimockGetByAdvertiserDailyDone returns true if the count of the GetByAdvertiserDaily invocations corresponds
// the number of defined expectations
func (m *StatServiceMock) MinimockGetByAdvertiserDailyDone() bool {
	if m.GetByAdvertiserDailyMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetByAdvertiserDailyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetByAdvertiserDailyMock.invocationsDone()
}

// MinimockGetByAdvertiserDailyInspect logs each unmet expectation
func (m *StatServiceMock) MinimockGetByAdvertiserDailyInspect() {
	for _, e := range m.GetByAdvertiserDailyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StatServiceMock.GetByAdvertiserDaily at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetByAdvertiserDailyCounter := mm_atomic.LoadUint64(&m.afterGetByAdvertiserDailyCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetByAdvertiserDailyMock.defaultExpectation != nil && afterGetByAdvertiserDailyCounter < 1 {
		if m.GetByAdvertiserDailyMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to StatServiceMock.GetByAdvertiserDaily at\n%s", m.GetByAdvertiserDailyMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to StatServiceMock.GetByAdvertiserDaily at\n%s with params: %#v", m.GetByAdvertiserDailyMock.defaultExpectation.expectationOrigins.origin, *m.GetByAdvertiserDailyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByAdvertiserDaily != nil && afterGetByAdvertiserDailyCounter < 1 {
		m.t.Errorf("Expected call to StatServiceMock.GetByAdvertiserDaily at\n%s", m.funcGetByAdvertiserDailyOrigin)
	}

	if !m.GetByAdvertiserDailyMock.invocationsDone() && afterGetByAdvertiserDailyCounter > 0 {
		m.t.Errorf("Expected %d calls to StatServiceMock.GetByAdvertiserDaily at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetByAdvertiserDailyMock.expectedInvocations), m.GetByAdvertiserDailyMock.expectedInvocationsOrigin, afterGetByAdvertiserDailyCounter)
	}
}

type mStatServiceMockGetByCampaign struct {
	optional           bool
	mock               *StatServiceMock
	defaultExpectation *StatServiceMockGetByCampaignExpectation
	expectations       []*StatServiceMockGetByCampaignExpectation

	callArgs []*StatServiceMockGetByCampaignParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// StatServiceMockGetByCampaignExpectation specifies expectation struct of the StatService.GetByCampaign
type StatServiceMockGetByCampaignExpectation struct {
	mock               *StatServiceMock
	params             *StatServiceMockGetByCampaignParams
	paramPtrs          *StatServiceMockGetByCampaignParamPtrs
	expectationOrigins StatServiceMockGetByCampaignExpectationOrigins
	results            *StatServiceMockGetByCampaignResults
	returnOrigin       string
	Counter            uint64
}

// StatServiceMockGetByCampaignParams contains parameters of the StatService.GetByCampaign
type StatServiceMockGetByCampaignParams struct {
	ctx        context.Context
	campaignID string
}

// StatServiceMockGetByCampaignParamPtrs contains pointers to parameters of the StatService.GetByCampaign
type StatServiceMockGetByCampaignParamPtrs struct {
	ctx        *context.Context
	campaignID *string
}

// StatServiceMockGetByCampaignResults contains results of the StatService.GetByCampaign
type StatServiceMockGetByCampaignResults struct {
	sp1 *model.Stat
	err error
}

// StatServiceMockGetByCampaignOrigins contains origins of expectations of the StatService.GetByCampaign
type StatServiceMockGetByCampaignExpectationOrigins struct {
	origin           string
	originCtx        string
	originCampaignID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetByCampaign *mStatServiceMockGetByCampaign) Optional() *mStatServiceMockGetByCampaign {
	mmGetByCampaign.optional = true
	return mmGetByCampaign
}

// Expect sets up expected params for StatService.GetByCampaign
func (mmGetByCampaign *mStatServiceMockGetByCampaign) Expect(ctx context.Context, campaignID string) *mStatServiceMockGetByCampaign {
	if mmGetByCampaign.mock.funcGetByCampaign != nil {
		mmGetByCampaign.mock.t.Fatalf("StatServiceMock.GetByCampaign mock is already set by Set")
	}

	if mmGetByCampaign.defaultExpectation == nil {
		mmGetByCampaign.defaultExpectation = &StatServiceMockGetByCampaignExpectation{}
	}

	if mmGetByCampaign.defaultExpectation.paramPtrs != nil {
		mmGetByCampaign.mock.t.Fatalf("StatServiceMock.GetByCampaign mock is already set by ExpectParams functions")
	}

	mmGetByCampaign.defaultExpectation.params = &StatServiceMockGetByCampaignParams{ctx, campaignID}
	mmGetByCampaign.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetByCampaign.expectations {
		if minimock.Equal(e.params, mmGetByCampaign.defaultExpectation.params) {
			mmGetByCampaign.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetByCampaign.defaultExpectation.params)
		}
	}

	return mmGetByCampaign
}

// ExpectCtxParam1 sets up expected param ctx for StatService.GetByCampaign
func (mmGetByCampaign *mStatServiceMockGetByCampaign) ExpectCtxParam1(ctx context.Context) *mStatServiceMockGetByCampaign {
	if mmGetByCampaign.mock.funcGetByCampaign != nil {
		mmGetByCampaign.mock.t.Fatalf("StatServiceMock.GetByCampaign mock is already set by Set")
	}

	if mmGetByCampaign.defaultExpectation == nil {
		mmGetByCampaign.defaultExpectation = &StatServiceMockGetByCampaignExpectation{}
	}

	if mmGetByCampaign.defaultExpectation.params != nil {
		mmGetByCampaign.mock.t.Fatalf("StatServiceMock.GetByCampaign mock is already set by Expect")
	}

	if mmGetByCampaign.defaultExpectation.paramPtrs == nil {
		mmGetByCampaign.defaultExpectation.paramPtrs = &StatServiceMockGetByCampaignParamPtrs{}
	}
	mmGetByCampaign.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetByCampaign.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetByCampaign
}

// ExpectCampaignIDParam2 sets up expected param campaignID for StatService.GetByCampaign
func (mmGetByCampaign *mStatServiceMockGetByCampaign) ExpectCampaignIDParam2(campaignID string) *mStatServiceMockGetByCampaign {
	if mmGetByCampaign.mock.funcGetByCampaign != nil {
		mmGetByCampaign.mock.t.Fatalf("StatServiceMock.GetByCampaign mock is already set by Set")
	}

	if mmGetByCampaign.defaultExpectation == nil {
		mmGetByCampaign.defaultExpectation = &StatServiceMockGetByCampaignExpectation{}
	}

	if mmGetByCampaign.defaultExpectation.params != nil {
		mmGetByCampaign.mock.t.Fatalf("StatServiceMock.GetByCampaign mock is already set by Expect")
	}

	if mmGetByCampaign.defaultExpectation.paramPtrs == nil {
		mmGetByCampaign.defaultExpectation.paramPtrs = &StatServiceMockGetByCampaignParamPtrs{}
	}
	mmGetByCampaign.defaultExpectation.paramPtrs.campaignID = &campaignID
	mmGetByCampaign.defaultExpectation.expectationOrigins.originCampaignID = minimock.CallerInfo(1)

	return mmGetByCampaign
}

// Inspect accepts an inspector function that has same arguments as the StatService.GetByCampaign
func (mmGetByCampaign *mStatServiceMockGetByCampaign) Inspect(f func(ctx context.Context, campaignID string)) *mStatServiceMockGetByCampaign {
	if mmGetByCampaign.mock.inspectFuncGetByCampaign != nil {
		mmGetByCampaign.mock.t.Fatalf("Inspect function is already set for StatServiceMock.GetByCampaign")
	}

	mmGetByCampaign.mock.inspectFuncGetByCampaign = f

	return mmGetByCampaign
}

// Return sets up results that will be returned by StatService.GetByCampaign
func (mmGetByCampaign *mStatServiceMockGetByCampaign) Return(sp1 *model.Stat, err error) *StatServiceMock {
	if mmGetByCampaign.mock.funcGetByCampaign != nil {
		mmGetByCampaign.mock.t.Fatalf("StatServiceMock.GetByCampaign mock is already set by Set")
	}

	if mmGetByCampaign.defaultExpectation == nil {
		mmGetByCampaign.defaultExpectation = &StatServiceMockGetByCampaignExpectation{mock: mmGetByCampaign.mock}
	}
	mmGetByCampaign.defaultExpectation.results = &StatServiceMockGetByCampaignResults{sp1, err}
	mmGetByCampaign.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetByCampaign.mock
}

// Set uses given function f to mock the StatService.GetByCampaign method
func (mmGetByCampaign *mStatServiceMockGetByCampaign) Set(f func(ctx context.Context, campaignID string) (sp1 *model.Stat, err error)) *StatServiceMock {
	if mmGetByCampaign.defaultExpectation != nil {
		mmGetByCampaign.mock.t.Fatalf("Default expectation is already set for the StatService.GetByCampaign method")
	}

	if len(mmGetByCampaign.expectations) > 0 {
		mmGetByCampaign.mock.t.Fatalf("Some expectations are already set for the StatService.GetByCampaign method")
	}

	mmGetByCampaign.mock.funcGetByCampaign = f
	mmGetByCampaign.mock.funcGetByCampaignOrigin = minimock.CallerInfo(1)
	return mmGetByCampaign.mock
}

// When sets expectation for the StatService.GetByCampaign which will trigger the result defined by the following
// Then helper
func (mmGetByCampaign *mStatServiceMockGetByCampaign) When(ctx context.Context, campaignID string) *StatServiceMockGetByCampaignExpectation {
	if mmGetByCampaign.mock.funcGetByCampaign != nil {
		mmGetByCampaign.mock.t.Fatalf("StatServiceMock.GetByCampaign mock is already set by Set")
	}

	expectation := &StatServiceMockGetByCampaignExpectation{
		mock:               mmGetByCampaign.mock,
		params:             &StatServiceMockGetByCampaignParams{ctx, campaignID},
		expectationOrigins: StatServiceMockGetByCampaignExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetByCampaign.expectations = append(mmGetByCampaign.expectations, expectation)
	return expectation
}

// Then sets up StatService.GetByCampaign return parameters for the expectation previously defined by the When method
func (e *StatServiceMockGetByCampaignExpectation) Then(sp1 *model.Stat, err error) *StatServiceMock {
	e.results = &StatServiceMockGetByCampaignResults{sp1, err}
	return e.mock
}

// Times sets number of times StatService.GetByCampaign should be invoked
func (mmGetByCampaign *mStatServiceMockGetByCampaign) Times(n uint64) *mStatServiceMockGetByCampaign {
	if n == 0 {
		mmGetByCampaign.mock.t.Fatalf("Times of StatServiceMock.GetByCampaign mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetByCampaign.expectedInvocations, n)
	mmGetByCampaign.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetByCampaign
}

func (mmGetByCampaign *mStatServiceMockGetByCampaign) invocationsDone() bool {
	if len(mmGetByCampaign.expectations) == 0 && mmGetByCampaign.defaultExpectation == nil && mmGetByCampaign.mock.funcGetByCampaign == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetByCampaign.mock.afterGetByCampaignCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetByCampaign.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetByCampaign implements mm_service.StatService
func (mmGetByCampaign *StatServiceMock) GetByCampaign(ctx context.Context, campaignID string) (sp1 *model.Stat, err error) {
	mm_atomic.AddUint64(&mmGetByCampaign.beforeGetByCampaignCounter, 1)
	defer mm_atomic.AddUint64(&mmGetByCampaign.afterGetByCampaignCounter, 1)

	mmGetByCampaign.t.Helper()

	if mmGetByCampaign.inspectFuncGetByCampaign != nil {
		mmGetByCampaign.inspectFuncGetByCampaign(ctx, campaignID)
	}

	mm_params := StatServiceMockGetByCampaignParams{ctx, campaignID}

	// Record call args
	mmGetByCampaign.GetByCampaignMock.mutex.Lock()
	mmGetByCampaign.GetByCampaignMock.callArgs = append(mmGetByCampaign.GetByCampaignMock.callArgs, &mm_params)
	mmGetByCampaign.GetByCampaignMock.mutex.Unlock()

	for _, e := range mmGetByCampaign.GetByCampaignMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sp1, e.results.err
		}
	}

	if mmGetByCampaign.GetByCampaignMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetByCampaign.GetByCampaignMock.defaultExpectation.Counter, 1)
		mm_want := mmGetByCampaign.GetByCampaignMock.defaultExpectation.params
		mm_want_ptrs := mmGetByCampaign.GetByCampaignMock.defaultExpectation.paramPtrs

		mm_got := StatServiceMockGetByCampaignParams{ctx, campaignID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetByCampaign.t.Errorf("StatServiceMock.GetByCampaign got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetByCampaign.GetByCampaignMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.campaignID != nil && !minimock.Equal(*mm_want_ptrs.campaignID, mm_got.campaignID) {
				mmGetByCampaign.t.Errorf("StatServiceMock.GetByCampaign got unexpected parameter campaignID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetByCampaign.GetByCampaignMock.defaultExpectation.expectationOrigins.originCampaignID, *mm_want_ptrs.campaignID, mm_got.campaignID, minimock.Diff(*mm_want_ptrs.campaignID, mm_got.campaignID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetByCampaign.t.Errorf("StatServiceMock.GetByCampaign got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetByCampaign.GetByCampaignMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetByCampaign.GetByCampaignMock.defaultExpectation.results
		if mm_results == nil {
			mmGetByCampaign.t.Fatal("No results are set for the StatServiceMock.GetByCampaign")
		}
		return (*mm_results).sp1, (*mm_results).err
	}
	if mmGetByCampaign.funcGetByCampaign != nil {
		return mmGetByCampaign.funcGetByCampaign(ctx, campaignID)
	}
	mmGetByCampaign.t.Fatalf("Unexpected call to StatServiceMock.GetByCampaign. %v %v", ctx, campaignID)
	return
}

// GetByCampaignAfterCounter returns a count of finished StatServiceMock.GetByCampaign invocations
func (mmGetByCampaign *StatServiceMock) GetByCampaignAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByCampaign.afterGetByCampaignCounter)
}

// GetByCampaignBeforeCounter returns a count of StatServiceMock.GetByCampaign invocations
func (mmGetByCampaign *StatServiceMock) GetByCampaignBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByCampaign.beforeGetByCampaignCounter)
}

// Calls returns a list of arguments used in each call to StatServiceMock.GetByCampaign.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetByCampaign *mStatServiceMockGetByCampaign) Calls() []*StatServiceMockGetByCampaignParams {
	mmGetByCampaign.mutex.RLock()

	argCopy := make([]*StatServiceMockGetByCampaignParams, len(mmGetByCampaign.callArgs))
	copy(argCopy, mmGetByCampaign.callArgs)

	mmGetByCampaign.mutex.RUnlock()

	return argCopy
}

// MinimockGetByCampaignDone returns true if the count of the GetByCampaign invocations corresponds
// the number of defined expectations
func (m *StatServiceMock) MinimockGetByCampaignDone() bool {
	if m.GetByCampaignMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetByCampaignMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetByCampaignMock.invocationsDone()
}

// MinimockGetByCampaignInspect logs each unmet expectation
func (m *StatServiceMock) MinimockGetByCampaignInspect() {
	for _, e := range m.GetByCampaignMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StatServiceMock.GetByCampaign at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetByCampaignCounter := mm_atomic.LoadUint64(&m.afterGetByCampaignCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetByCampaignMock.defaultExpectation != nil && afterGetByCampaignCounter < 1 {
		if m.GetByCampaignMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to StatServiceMock.GetByCampaign at\n%s", m.GetByCampaignMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to StatServiceMock.GetByCampaign at\n%s with params: %#v", m.GetByCampaignMock.defaultExpectation.expectationOrigins.origin, *m.GetByCampaignMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByCampaign != nil && afterGetByCampaignCounter < 1 {
		m.t.Errorf("Expected call to StatServiceMock.GetByCampaign at\n%s", m.funcGetByCampaignOrigin)
	}

	if !m.GetByCampaignMock.invocationsDone() && afterGetByCampaignCounter > 0 {
		m.t.Errorf("Expected %d calls to StatServiceMock.GetByCampaign at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetByCampaignMock.expectedInvocations), m.GetByCampaignMock.expectedInvocationsOrigin, afterGetByCampaignCounter)
	}
}

type mStatServiceMockGetByCampaignDaily struct {
	optional           bool
	mock               *StatServiceMock
	defaultExpectation *StatServiceMockGetByCampaignDailyExpectation
	expectations       []*StatServiceMockGetByCampaignDailyExpectation

	callArgs []*StatServiceMockGetByCampaignDailyParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// StatServiceMockGetByCampaignDailyExpectation specifies expectation struct of the StatService.GetByCampaignDaily
type StatServiceMockGetByCampaignDailyExpectation struct {
	mock               *StatServiceMock
	params             *StatServiceMockGetByCampaignDailyParams
	paramPtrs          *StatServiceMockGetByCampaignDailyParamPtrs
	expectationOrigins StatServiceMockGetByCampaignDailyExpectationOrigins
	results            *StatServiceMockGetByCampaignDailyResults
	returnOrigin       string
	Counter            uint64
}

// StatServiceMockGetByCampaignDailyParams contains parameters of the StatService.GetByCampaignDaily
type StatServiceMockGetByCampaignDailyParams struct {
	ctx        context.Context
	campaignID string
}

// StatServiceMockGetByCampaignDailyParamPtrs contains pointers to parameters of the StatService.GetByCampaignDaily
type StatServiceMockGetByCampaignDailyParamPtrs struct {
	ctx        *context.Context
	campaignID *string
}

// StatServiceMockGetByCampaignDailyResults contains results of the StatService.GetByCampaignDaily
type StatServiceMockGetByCampaignDailyResults struct {
	sp1 *model.Stat
	err error
}

// StatServiceMockGetByCampaignDailyOrigins contains origins of expectations of the StatService.GetByCampaignDaily
type StatServiceMockGetByCampaignDailyExpectationOrigins struct {
	origin           string
	originCtx        string
	originCampaignID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetByCampaignDaily *mStatServiceMockGetByCampaignDaily) Optional() *mStatServiceMockGetByCampaignDaily {
	mmGetByCampaignDaily.optional = true
	return mmGetByCampaignDaily
}

// Expect sets up expected params for StatService.GetByCampaignDaily
func (mmGetByCampaignDaily *mStatServiceMockGetByCampaignDaily) Expect(ctx context.Context, campaignID string) *mStatServiceMockGetByCampaignDaily {
	if mmGetByCampaignDaily.mock.funcGetByCampaignDaily != nil {
		mmGetByCampaignDaily.mock.t.Fatalf("StatServiceMock.GetByCampaignDaily mock is already set by Set")
	}

	if mmGetByCampaignDaily.defaultExpectation == nil {
		mmGetByCampaignDaily.defaultExpectation = &StatServiceMockGetByCampaignDailyExpectation{}
	}

	if mmGetByCampaignDaily.defaultExpectation.paramPtrs != nil {
		mmGetByCampaignDaily.mock.t.Fatalf("StatServiceMock.GetByCampaignDaily mock is already set by ExpectParams functions")
	}

	mmGetByCampaignDaily.defaultExpectation.params = &StatServiceMockGetByCampaignDailyParams{ctx, campaignID}
	mmGetByCampaignDaily.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetByCampaignDaily.expectations {
		if minimock.Equal(e.params, mmGetByCampaignDaily.defaultExpectation.params) {
			mmGetByCampaignDaily.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetByCampaignDaily.defaultExpectation.params)
		}
	}

	return mmGetByCampaignDaily
}

// ExpectCtxParam1 sets up expected param ctx for StatService.GetByCampaignDaily
func (mmGetByCampaignDaily *mStatServiceMockGetByCampaignDaily) ExpectCtxParam1(ctx context.Context) *mStatServiceMockGetByCampaignDaily {
	if mmGetByCampaignDaily.mock.funcGetByCampaignDaily != nil {
		mmGetByCampaignDaily.mock.t.Fatalf("StatServiceMock.GetByCampaignDaily mock is already set by Set")
	}

	if mmGetByCampaignDaily.defaultExpectation == nil {
		mmGetByCampaignDaily.defaultExpectation = &StatServiceMockGetByCampaignDailyExpectation{}
	}

	if mmGetByCampaignDaily.defaultExpectation.params != nil {
		mmGetByCampaignDaily.mock.t.Fatalf("StatServiceMock.GetByCampaignDaily mock is already set by Expect")
	}

	if mmGetByCampaignDaily.defaultExpectation.paramPtrs == nil {
		mmGetByCampaignDaily.defaultExpectation.paramPtrs = &StatServiceMockGetByCampaignDailyParamPtrs{}
	}
	mmGetByCampaignDaily.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetByCampaignDaily.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetByCampaignDaily
}

// ExpectCampaignIDParam2 sets up expected param campaignID for StatService.GetByCampaignDaily
func (mmGetByCampaignDaily *mStatServiceMockGetByCampaignDaily) ExpectCampaignIDParam2(campaignID string) *mStatServiceMockGetByCampaignDaily {
	if mmGetByCampaignDaily.mock.funcGetByCampaignDaily != nil {
		mmGetByCampaignDaily.mock.t.Fatalf("StatServiceMock.GetByCampaignDaily mock is already set by Set")
	}

	if mmGetByCampaignDaily.defaultExpectation == nil {
		mmGetByCampaignDaily.defaultExpectation = &StatServiceMockGetByCampaignDailyExpectation{}
	}

	if mmGetByCampaignDaily.defaultExpectation.params != nil {
		mmGetByCampaignDaily.mock.t.Fatalf("StatServiceMock.GetByCampaignDaily mock is already set by Expect")
	}

	if mmGetByCampaignDaily.defaultExpectation.paramPtrs == nil {
		mmGetByCampaignDaily.defaultExpectation.paramPtrs = &StatServiceMockGetByCampaignDailyParamPtrs{}
	}
	mmGetByCampaignDaily.defaultExpectation.paramPtrs.campaignID = &campaignID
	mmGetByCampaignDaily.defaultExpectation.expectationOrigins.originCampaignID = minimock.CallerInfo(1)

	return mmGetByCampaignDaily
}

// Inspect accepts an inspector function that has same arguments as the StatService.GetByCampaignDaily
func (mmGetByCampaignDaily *mStatServiceMockGetByCampaignDaily) Inspect(f func(ctx context.Context, campaignID string)) *mStatServiceMockGetByCampaignDaily {
	if mmGetByCampaignDaily.mock.inspectFuncGetByCampaignDaily != nil {
		mmGetByCampaignDaily.mock.t.Fatalf("Inspect function is already set for StatServiceMock.GetByCampaignDaily")
	}

	mmGetByCampaignDaily.mock.inspectFuncGetByCampaignDaily = f

	return mmGetByCampaignDaily
}

// Return sets up results that will be returned by StatService.GetByCampaignDaily
func (mmGetByCampaignDaily *mStatServiceMockGetByCampaignDaily) Return(sp1 *model.Stat, err error) *StatServiceMock {
	if mmGetByCampaignDaily.mock.funcGetByCampaignDaily != nil {
		mmGetByCampaignDaily.mock.t.Fatalf("StatServiceMock.GetByCampaignDaily mock is already set by Set")
	}

	if mmGetByCampaignDaily.defaultExpectation == nil {
		mmGetByCampaignDaily.defaultExpectation = &StatServiceMockGetByCampaignDailyExpectation{mock: mmGetByCampaignDaily.mock}
	}
	mmGetByCampaignDaily.defaultExpectation.results = &StatServiceMockGetByCampaignDailyResults{sp1, err}
	mmGetByCampaignDaily.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetByCampaignDaily.mock
}

// Set uses given function f to mock the StatService.GetByCampaignDaily method
func (mmGetByCampaignDaily *mStatServiceMockGetByCampaignDaily) Set(f func(ctx context.Context, campaignID string) (sp1 *model.Stat, err error)) *StatServiceMock {
	if mmGetByCampaignDaily.defaultExpectation != nil {
		mmGetByCampaignDaily.mock.t.Fatalf("Default expectation is already set for the StatService.GetByCampaignDaily method")
	}

	if len(mmGetByCampaignDaily.expectations) > 0 {
		mmGetByCampaignDaily.mock.t.Fatalf("Some expectations are already set for the StatService.GetByCampaignDaily method")
	}

	mmGetByCampaignDaily.mock.funcGetByCampaignDaily = f
	mmGetByCampaignDaily.mock.funcGetByCampaignDailyOrigin = minimock.CallerInfo(1)
	return mmGetByCampaignDaily.mock
}

// When sets expectation for the StatService.GetByCampaignDaily which will trigger the result defined by the following
// Then helper
func (mmGetByCampaignDaily *mStatServiceMockGetByCampaignDaily) When(ctx context.Context, campaignID string) *StatServiceMockGetByCampaignDailyExpectation {
	if mmGetByCampaignDaily.mock.funcGetByCampaignDaily != nil {
		mmGetByCampaignDaily.mock.t.Fatalf("StatServiceMock.GetByCampaignDaily mock is already set by Set")
	}

	expectation := &StatServiceMockGetByCampaignDailyExpectation{
		mock:               mmGetByCampaignDaily.mock,
		params:             &StatServiceMockGetByCampaignDailyParams{ctx, campaignID},
		expectationOrigins: StatServiceMockGetByCampaignDailyExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetByCampaignDaily.expectations = append(mmGetByCampaignDaily.expectations, expectation)
	return expectation
}

// Then sets up StatService.GetByCampaignDaily return parameters for the expectation previously defined by the When method
func (e *StatServiceMockGetByCampaignDailyExpectation) Then(sp1 *model.Stat, err error) *StatServiceMock {
	e.results = &StatServiceMockGetByCampaignDailyResults{sp1, err}
	return e.mock
}

// Times sets number of times StatService.GetByCampaignDaily should be invoked
func (mmGetByCampaignDaily *mStatServiceMockGetByCampaignDaily) Times(n uint64) *mStatServiceMockGetByCampaignDaily {
	if n == 0 {
		mmGetByCampaignDaily.mock.t.Fatalf("Times of StatServiceMock.GetByCampaignDaily mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetByCampaignDaily.expectedInvocations, n)
	mmGetByCampaignDaily.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetByCampaignDaily
}

func (mmGetByCampaignDaily *mStatServiceMockGetByCampaignDaily) invocationsDone() bool {
	if len(mmGetByCampaignDaily.expectations) == 0 && mmGetByCampaignDaily.defaultExpectation == nil && mmGetByCampaignDaily.mock.funcGetByCampaignDaily == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetByCampaignDaily.mock.afterGetByCampaignDailyCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetByCampaignDaily.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetByCampaignDaily implements mm_service.StatService
func (mmGetByCampaignDaily *StatServiceMock) GetByCampaignDaily(ctx context.Context, campaignID string) (sp1 *model.Stat, err error) {
	mm_atomic.AddUint64(&mmGetByCampaignDaily.beforeGetByCampaignDailyCounter, 1)
	defer mm_atomic.AddUint64(&mmGetByCampaignDaily.afterGetByCampaignDailyCounter, 1)

	mmGetByCampaignDaily.t.Helper()

	if mmGetByCampaignDaily.inspectFuncGetByCampaignDaily != nil {
		mmGetByCampaignDaily.inspectFuncGetByCampaignDaily(ctx, campaignID)
	}

	mm_params := StatServiceMockGetByCampaignDailyParams{ctx, campaignID}

	// Record call args
	mmGetByCampaignDaily.GetByCampaignDailyMock.mutex.Lock()
	mmGetByCampaignDaily.GetByCampaignDailyMock.callArgs = append(mmGetByCampaignDaily.GetByCampaignDailyMock.callArgs, &mm_params)
	mmGetByCampaignDaily.GetByCampaignDailyMock.mutex.Unlock()

	for _, e := range mmGetByCampaignDaily.GetByCampaignDailyMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sp1, e.results.err
		}
	}

	if mmGetByCampaignDaily.GetByCampaignDailyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetByCampaignDaily.GetByCampaignDailyMock.defaultExpectation.Counter, 1)
		mm_want := mmGetByCampaignDaily.GetByCampaignDailyMock.defaultExpectation.params
		mm_want_ptrs := mmGetByCampaignDaily.GetByCampaignDailyMock.defaultExpectation.paramPtrs

		mm_got := StatServiceMockGetByCampaignDailyParams{ctx, campaignID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetByCampaignDaily.t.Errorf("StatServiceMock.GetByCampaignDaily got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetByCampaignDaily.GetByCampaignDailyMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.campaignID != nil && !minimock.Equal(*mm_want_ptrs.campaignID, mm_got.campaignID) {
				mmGetByCampaignDaily.t.Errorf("StatServiceMock.GetByCampaignDaily got unexpected parameter campaignID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetByCampaignDaily.GetByCampaignDailyMock.defaultExpectation.expectationOrigins.originCampaignID, *mm_want_ptrs.campaignID, mm_got.campaignID, minimock.Diff(*mm_want_ptrs.campaignID, mm_got.campaignID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetByCampaignDaily.t.Errorf("StatServiceMock.GetByCampaignDaily got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetByCampaignDaily.GetByCampaignDailyMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetByCampaignDaily.GetByCampaignDailyMock.defaultExpectation.results
		if mm_results == nil {
			mmGetByCampaignDaily.t.Fatal("No results are set for the StatServiceMock.GetByCampaignDaily")
		}
		return (*mm_results).sp1, (*mm_results).err
	}
	if mmGetByCampaignDaily.funcGetByCampaignDaily != nil {
		return mmGetByCampaignDaily.funcGetByCampaignDaily(ctx, campaignID)
	}
	mmGetByCampaignDaily.t.Fatalf("Unexpected call to StatServiceMock.GetByCampaignDaily. %v %v", ctx, campaignID)
	return
}

// GetByCampaignDailyAfterCounter returns a count of finished StatServiceMock.GetByCampaignDaily invocations
func (mmGetByCampaignDaily *StatServiceMock) GetByCampaignDailyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByCampaignDaily.afterGetByCampaignDailyCounter)
}

// GetByCampaignDailyBeforeCounter returns a count of StatServiceMock.GetByCampaignDaily invocations
func (mmGetByCampaignDaily *StatServiceMock) GetByCampaignDailyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByCampaignDaily.beforeGetByCampaignDailyCounter)
}

// Calls returns a list of arguments used in each call to StatServiceMock.GetByCampaignDaily.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetByCampaignDaily *mStatServiceMockGetByCampaignDaily) Calls() []*StatServiceMockGetByCampaignDailyParams {
	mmGetByCampaignDaily.mutex.RLock()

	argCopy := make([]*StatServiceMockGetByCampaignDailyParams, len(mmGetByCampaignDaily.callArgs))
	copy(argCopy, mmGetByCampaignDaily.callArgs)

	mmGetByCampaignDaily.mutex.RUnlock()

	return argCopy
}

// MinimockGetByCampaignDailyDone returns true if the count of the GetByCampaignDaily invocations corresponds
// the number of defined expectations
func (m *StatServiceMock) MinimockGetByCampaignDailyDone() bool {
	if m.GetByCampaignDailyMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetByCampaignDailyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetByCampaignDailyMock.invocationsDone()
}

// MinimockGetByCampaignDailyInspect logs each unmet expectation
func (m *StatServiceMock) MinimockGetByCampaignDailyInspect() {
	for _, e := range m.GetByCampaignDailyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StatServiceMock.GetByCampaignDaily at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetByCampaignDailyCounter := mm_atomic.LoadUint64(&m.afterGetByCampaignDailyCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetByCampaignDailyMock.defaultExpectation != nil && afterGetByCampaignDailyCounter < 1 {
		if m.GetByCampaignDailyMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to StatServiceMock.GetByCampaignDaily at\n%s", m.GetByCampaignDailyMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to StatServiceMock.GetByCampaignDaily at\n%s with params: %#v", m.GetByCampaignDailyMock.defaultExpectation.expectationOrigins.origin, *m.GetByCampaignDailyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByCampaignDaily != nil && afterGetByCampaignDailyCounter < 1 {
		m.t.Errorf("Expected call to StatServiceMock.GetByCampaignDaily at\n%s", m.funcGetByCampaignDailyOrigin)
	}

	if !m.GetByCampaignDailyMock.invocationsDone() && afterGetByCampaignDailyCounter > 0 {
		m.t.Errorf("Expected %d calls to StatServiceMock.GetByCampaignDaily at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetByCampaignDailyMock.expectedInvocations), m.GetByCampaignDailyMock.expectedInvocationsOrigin, afterGetByCampaignDailyCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StatServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetByAdvertiserInspect()

			m.MinimockGetByAdvertiserDailyInspect()

			m.MinimockGetByCampaignInspect()

			m.MinimockGetByCampaignDailyInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StatServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StatServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetByAdvertiserDone() &&
		m.MinimockGetByAdvertiserDailyDone() &&
		m.MinimockGetByCampaignDone() &&
		m.MinimockGetByCampaignDailyDone()
}
