// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i server/internal/service.TimeService -o time_service_minimock.go -n TimeServiceMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// TimeServiceMock implements mm_service.TimeService
type TimeServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcSet          func(ctx context.Context, day int) (err error)
	funcSetOrigin    string
	inspectFuncSet   func(ctx context.Context, day int)
	afterSetCounter  uint64
	beforeSetCounter uint64
	SetMock          mTimeServiceMockSet
}

// NewTimeServiceMock returns a mock for mm_service.TimeService
func NewTimeServiceMock(t minimock.Tester) *TimeServiceMock {
	m := &TimeServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SetMock = mTimeServiceMockSet{mock: m}
	m.SetMock.callArgs = []*TimeServiceMockSetParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mTimeServiceMockSet struct {
	optional           bool
	mock               *TimeServiceMock
	defaultExpectation *TimeServiceMockSetExpectation
	expectations       []*TimeServiceMockSetExpectation

	callArgs []*TimeServiceMockSetParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// TimeServiceMockSetExpectation specifies expectation struct of the TimeService.Set
type TimeServiceMockSetExpectation struct {
	mock               *TimeServiceMock
	params             *TimeServiceMockSetParams
	paramPtrs          *TimeServiceMockSetParamPtrs
	expectationOrigins TimeServiceMockSetExpectationOrigins
	results            *TimeServiceMockSetResults
	returnOrigin       string
	Counter            uint64
}

// TimeServiceMockSetParams contains parameters of the TimeService.Set
type TimeServiceMockSetParams struct {
	ctx context.Context
	day int
}

// TimeServiceMockSetParamPtrs contains pointers to parameters of the TimeService.Set
type TimeServiceMockSetParamPtrs struct {
	ctx *context.Context
	day *int
}

// TimeServiceMockSetResults contains results of the TimeService.Set
type TimeServiceMockSetResults struct {
	err error
}

// TimeServiceMockSetOrigins contains origins of expectations of the TimeService.Set
type TimeServiceMockSetExpectationOrigins struct {
	origin    string
	originCtx string
	originDay string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSet *mTimeServiceMockSet) Optional() *mTimeServiceMockSet {
	mmSet.optional = true
	return mmSet
}

// Expect sets up expected params for TimeService.Set
func (mmSet *mTimeServiceMockSet) Expect(ctx context.Context, day int) *mTimeServiceMockSet {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("TimeServiceMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &TimeServiceMockSetExpectation{}
	}

	if mmSet.defaultExpectation.paramPtrs != nil {
		mmSet.mock.t.Fatalf("TimeServiceMock.Set mock is already set by ExpectParams functions")
	}

	mmSet.defaultExpectation.params = &TimeServiceMockSetParams{ctx, day}
	mmSet.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSet.expectations {
		if minimock.Equal(e.params, mmSet.defaultExpectation.params) {
			mmSet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSet.defaultExpectation.params)
		}
	}

	return mmSet
}

// ExpectCtxParam1 sets up expected param ctx for TimeService.Set
func (mmSet *mTimeServiceMockSet) ExpectCtxParam1(ctx context.Context) *mTimeServiceMockSet {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("TimeServiceMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &TimeServiceMockSetExpectation{}
	}

	if mmSet.defaultExpectation.params != nil {
		mmSet.mock.t.Fatalf("TimeServiceMock.Set mock is already set by Expect")
	}

	if mmSet.defaultExpectation.paramPtrs == nil {
		mmSet.defaultExpectation.paramPtrs = &TimeServiceMockSetParamPtrs{}
	}
	mmSet.defaultExpectation.paramPtrs.ctx = &ctx
	mmSet.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSet
}

// ExpectDayParam2 sets up expected param day for TimeService.Set
func (mmSet *mTimeServiceMockSet) ExpectDayParam2(day int) *mTimeServiceMockSet {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("TimeServiceMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &TimeServiceMockSetExpectation{}
	}

	if mmSet.defaultExpectation.params != nil {
		mmSet.mock.t.Fatalf("TimeServiceMock.Set mock is already set by Expect")
	}

	if mmSet.defaultExpectation.paramPtrs == nil {
		mmSet.defaultExpectation.paramPtrs = &TimeServiceMockSetParamPtrs{}
	}
	mmSet.defaultExpectation.paramPtrs.day = &day
	mmSet.defaultExpectation.expectationOrigins.originDay = minimock.CallerInfo(1)

	return mmSet
}

// Inspect accepts an inspector function that has same arguments as the TimeService.Set
func (mmSet *mTimeServiceMockSet) Inspect(f func(ctx context.Context, day int)) *mTimeServiceMockSet {
	if mmSet.mock.inspectFuncSet != nil {
		mmSet.mock.t.Fatalf("Inspect function is already set for TimeServiceMock.Set")
	}

	mmSet.mock.inspectFuncSet = f

	return mmSet
}

// Return sets up results that will be returned by TimeService.Set
func (mmSet *mTimeServiceMockSet) Return(err error) *TimeServiceMock {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("TimeServiceMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &TimeServiceMockSetExpectation{mock: mmSet.mock}
	}
	mmSet.defaultExpectation.results = &TimeServiceMockSetResults{err}
	mmSet.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSet.mock
}

// Set uses given function f to mock the TimeService.Set method
func (mmSet *mTimeServiceMockSet) Set(f func(ctx context.Context, day int) (err error)) *TimeServiceMock {
	if mmSet.defaultExpectation != nil {
		mmSet.mock.t.Fatalf("Default expectation is already set for the TimeService.Set method")
	}

	if len(mmSet.expectations) > 0 {
		mmSet.mock.t.Fatalf("Some expectations are already set for the TimeService.Set method")
	}

	mmSet.mock.funcSet = f
	mmSet.mock.funcSetOrigin = minimock.CallerInfo(1)
	return mmSet.mock
}

// When sets expectation for the TimeService.Set which will trigger the result defined by the following
// Then helper
func (mmSet *mTimeServiceMockSet) When(ctx context.Context, day int) *TimeServiceMockSetExpectation {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("TimeServiceMock.Set mock is already set by Set")
	}

	expectation := &TimeServiceMockSetExpectation{
		mock:               mmSet.mock,
		params:             &TimeServiceMockSetParams{ctx, day},
		expectationOrigins: TimeServiceMockSetExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSet.expectations = append(mmSet.expectations, expectation)
	return expectation
}

// Then sets up TimeService.Set return parameters for the expectation previously defined by the When method
func (e *TimeServiceMockSetExpectation) Then(err error) *TimeServiceMock {
	e.results = &TimeServiceMockSetResults{err}
	return e.mock
}

// Times sets number of times TimeService.Set should be invoked
func (mmSet *mTimeServiceMockSet) Times(n uint64) *mTimeServiceMockSet {
	if n == 0 {
		mmSet.mock.t.Fatalf("Times of TimeServiceMock.Set mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSet.expectedInvocations, n)
	mmSet.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSet
}

func (mmSet *mTimeServiceMockSet) invocationsDone() bool {
	if len(mmSet.expectations) == 0 && mmSet.defaultExpectation == nil && mmSet.mock.funcSet == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSet.mock.afterSetCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSet.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Set implements mm_service.TimeService
func (mmSet *TimeServiceMock) Set(ctx context.Context, day int) (err error) {
	mm_atomic.AddUint64(&mmSet.beforeSetCounter, 1)
	defer mm_atomic.AddUint64(&mmSet.afterSetCounter, 1)

	mmSet.t.Helper()

	if mmSet.inspectFuncSet != nil {
		mmSet.inspectFuncSet(ctx, day)
	}

	mm_params := TimeServiceMockSetParams{ctx, day}

	// Record call args
	mmSet.SetMock.mutex.Lock()
	mmSet.SetMock.callArgs = append(mmSet.SetMock.callArgs, &mm_params)
	mmSet.SetMock.mutex.Unlock()

	for _, e := range mmSet.SetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSet.SetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSet.SetMock.defaultExpectation.Counter, 1)
		mm_want := mmSet.SetMock.defaultExpectation.params
		mm_want_ptrs := mmSet.SetMock.defaultExpectation.paramPtrs

		mm_got := TimeServiceMockSetParams{ctx, day}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSet.t.Errorf("TimeServiceMock.Set got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSet.SetMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.day != nil && !minimock.Equal(*mm_want_ptrs.day, mm_got.day) {
				mmSet.t.Errorf("TimeServiceMock.Set got unexpected parameter day, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSet.SetMock.defaultExpectation.expectationOrigins.originDay, *mm_want_ptrs.day, mm_got.day, minimock.Diff(*mm_want_ptrs.day, mm_got.day))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSet.t.Errorf("TimeServiceMock.Set got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSet.SetMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSet.SetMock.defaultExpectation.results
		if mm_results == nil {
			mmSet.t.Fatal("No results are set for the TimeServiceMock.Set")
		}
		return (*mm_results).err
	}
	if mmSet.funcSet != nil {
		return mmSet.funcSet(ctx, day)
	}
	mmSet.t.Fatalf("Unexpected call to TimeServiceMock.Set. %v %v", ctx, day)
	return
}

// SetAfterCounter returns a count of finished TimeServiceMock.Set invocations
func (mmSet *TimeServiceMock) SetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSet.afterSetCounter)
}

// SetBeforeCounter returns a count of TimeServiceMock.Set invocations
func (mmSet *TimeServiceMock) SetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSet.beforeSetCounter)
}

// Calls returns a list of arguments used in each call to TimeServiceMock.Set.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSet *mTimeServiceMockSet) Calls() []*TimeServiceMockSetParams {
	mmSet.mutex.RLock()

	argCopy := make([]*TimeServiceMockSetParams, len(mmSet.callArgs))
	copy(argCopy, mmSet.callArgs)

	mmSet.mutex.RUnlock()

	return argCopy
}

// MinimockSetDone returns true if the count of the Set invocations corresponds
// the number of defined expectations
func (m *TimeServiceMock) MinimockSetDone() bool {
	if m.SetMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SetMock.invocationsDone()
}

// MinimockSetInspect logs each unmet expectation
func (m *TimeServiceMock) MinimockSetInspect() {
	for _, e := range m.SetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TimeServiceMock.Set at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSetCounter := mm_atomic.LoadUint64(&m.afterSetCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SetMock.defaultExpectation != nil && afterSetCounter < 1 {
		if m.SetMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to TimeServiceMock.Set at\n%s", m.SetMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to TimeServiceMock.Set at\n%s with params: %#v", m.SetMock.defaultExpectation.expectationOrigins.origin, *m.SetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSet != nil && afterSetCounter < 1 {
		m.t.Errorf("Expected call to TimeServiceMock.Set at\n%s", m.funcSetOrigin)
	}

	if !m.SetMock.invocationsDone() && afterSetCounter > 0 {
		m.t.Errorf("Expected %d calls to TimeServiceMock.Set at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SetMock.expectedInvocations), m.SetMock.expectedInvocationsOrigin, afterSetCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TimeServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockSetInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TimeServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TimeServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSetDone()
}
