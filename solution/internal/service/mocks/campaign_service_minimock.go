// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i server/internal/service.CampaignService -o campaign_service_minimock.go -n CampaignServiceMock -p mocks

import (
	"context"
	"server/internal/model"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// CampaignServiceMock implements mm_service.CampaignService
type CampaignServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreate          func(ctx context.Context, campaign *model.Campaign) (cp1 *model.Campaign, err error)
	funcCreateOrigin    string
	inspectFuncCreate   func(ctx context.Context, campaign *model.Campaign)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mCampaignServiceMockCreate

	funcDelete          func(ctx context.Context, advertiserID string, campaignID string) (err error)
	funcDeleteOrigin    string
	inspectFuncDelete   func(ctx context.Context, advertiserID string, campaignID string)
	afterDeleteCounter  uint64
	beforeDeleteCounter uint64
	DeleteMock          mCampaignServiceMockDelete

	funcGet          func(ctx context.Context, advertiserID string, campaignID string) (cp1 *model.Campaign, err error)
	funcGetOrigin    string
	inspectFuncGet   func(ctx context.Context, advertiserID string, campaignID string)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mCampaignServiceMockGet

	funcList          func(ctx context.Context, advertiserID string, page int, size int) (cpa1 []*model.Campaign, err error)
	funcListOrigin    string
	inspectFuncList   func(ctx context.Context, advertiserID string, page int, size int)
	afterListCounter  uint64
	beforeListCounter uint64
	ListMock          mCampaignServiceMockList

	funcSaveImage          func(ctx context.Context, advertiserID string, campaignID string, image *model.Image) (ip1 *model.Image, err error)
	funcSaveImageOrigin    string
	inspectFuncSaveImage   func(ctx context.Context, advertiserID string, campaignID string, image *model.Image)
	afterSaveImageCounter  uint64
	beforeSaveImageCounter uint64
	SaveImageMock          mCampaignServiceMockSaveImage

	funcSetModerateStatus          func(ctx context.Context, moderate bool) (err error)
	funcSetModerateStatusOrigin    string
	inspectFuncSetModerateStatus   func(ctx context.Context, moderate bool)
	afterSetModerateStatusCounter  uint64
	beforeSetModerateStatusCounter uint64
	SetModerateStatusMock          mCampaignServiceMockSetModerateStatus

	funcUpdate          func(ctx context.Context, campaign *model.Campaign) (cp1 *model.Campaign, err error)
	funcUpdateOrigin    string
	inspectFuncUpdate   func(ctx context.Context, campaign *model.Campaign)
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mCampaignServiceMockUpdate
}

// NewCampaignServiceMock returns a mock for mm_service.CampaignService
func NewCampaignServiceMock(t minimock.Tester) *CampaignServiceMock {
	m := &CampaignServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mCampaignServiceMockCreate{mock: m}
	m.CreateMock.callArgs = []*CampaignServiceMockCreateParams{}

	m.DeleteMock = mCampaignServiceMockDelete{mock: m}
	m.DeleteMock.callArgs = []*CampaignServiceMockDeleteParams{}

	m.GetMock = mCampaignServiceMockGet{mock: m}
	m.GetMock.callArgs = []*CampaignServiceMockGetParams{}

	m.ListMock = mCampaignServiceMockList{mock: m}
	m.ListMock.callArgs = []*CampaignServiceMockListParams{}

	m.SaveImageMock = mCampaignServiceMockSaveImage{mock: m}
	m.SaveImageMock.callArgs = []*CampaignServiceMockSaveImageParams{}

	m.SetModerateStatusMock = mCampaignServiceMockSetModerateStatus{mock: m}
	m.SetModerateStatusMock.callArgs = []*CampaignServiceMockSetModerateStatusParams{}

	m.UpdateMock = mCampaignServiceMockUpdate{mock: m}
	m.UpdateMock.callArgs = []*CampaignServiceMockUpdateParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mCampaignServiceMockCreate struct {
	optional           bool
	mock               *CampaignServiceMock
	defaultExpectation *CampaignServiceMockCreateExpectation
	expectations       []*CampaignServiceMockCreateExpectation

	callArgs []*CampaignServiceMockCreateParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// CampaignServiceMockCreateExpectation specifies expectation struct of the CampaignService.Create
type CampaignServiceMockCreateExpectation struct {
	mock               *CampaignServiceMock
	params             *CampaignServiceMockCreateParams
	paramPtrs          *CampaignServiceMockCreateParamPtrs
	expectationOrigins CampaignServiceMockCreateExpectationOrigins
	results            *CampaignServiceMockCreateResults
	returnOrigin       string
	Counter            uint64
}

// CampaignServiceMockCreateParams contains parameters of the CampaignService.Create
type CampaignServiceMockCreateParams struct {
	ctx      context.Context
	campaign *model.Campaign
}

// CampaignServiceMockCreateParamPtrs contains pointers to parameters of the CampaignService.Create
type CampaignServiceMockCreateParamPtrs struct {
	ctx      *context.Context
	campaign **model.Campaign
}

// CampaignServiceMockCreateResults contains results of the CampaignService.Create
type CampaignServiceMockCreateResults struct {
	cp1 *model.Campaign
	err error
}

// CampaignServiceMockCreateOrigins contains origins of expectations of the CampaignService.Create
type CampaignServiceMockCreateExpectationOrigins struct {
	origin         string
	originCtx      string
	originCampaign string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreate *mCampaignServiceMockCreate) Optional() *mCampaignServiceMockCreate {
	mmCreate.optional = true
	return mmCreate
}

// Expect sets up expected params for CampaignService.Create
func (mmCreate *mCampaignServiceMockCreate) Expect(ctx context.Context, campaign *model.Campaign) *mCampaignServiceMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("CampaignServiceMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &CampaignServiceMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.paramPtrs != nil {
		mmCreate.mock.t.Fatalf("CampaignServiceMock.Create mock is already set by ExpectParams functions")
	}

	mmCreate.defaultExpectation.params = &CampaignServiceMockCreateParams{ctx, campaign}
	mmCreate.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// ExpectCtxParam1 sets up expected param ctx for CampaignService.Create
func (mmCreate *mCampaignServiceMockCreate) ExpectCtxParam1(ctx context.Context) *mCampaignServiceMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("CampaignServiceMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &CampaignServiceMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("CampaignServiceMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &CampaignServiceMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreate.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreate
}

// ExpectCampaignParam2 sets up expected param campaign for CampaignService.Create
func (mmCreate *mCampaignServiceMockCreate) ExpectCampaignParam2(campaign *model.Campaign) *mCampaignServiceMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("CampaignServiceMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &CampaignServiceMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("CampaignServiceMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &CampaignServiceMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.campaign = &campaign
	mmCreate.defaultExpectation.expectationOrigins.originCampaign = minimock.CallerInfo(1)

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the CampaignService.Create
func (mmCreate *mCampaignServiceMockCreate) Inspect(f func(ctx context.Context, campaign *model.Campaign)) *mCampaignServiceMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for CampaignServiceMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by CampaignService.Create
func (mmCreate *mCampaignServiceMockCreate) Return(cp1 *model.Campaign, err error) *CampaignServiceMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("CampaignServiceMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &CampaignServiceMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &CampaignServiceMockCreateResults{cp1, err}
	mmCreate.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreate.mock
}

// Set uses given function f to mock the CampaignService.Create method
func (mmCreate *mCampaignServiceMockCreate) Set(f func(ctx context.Context, campaign *model.Campaign) (cp1 *model.Campaign, err error)) *CampaignServiceMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the CampaignService.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the CampaignService.Create method")
	}

	mmCreate.mock.funcCreate = f
	mmCreate.mock.funcCreateOrigin = minimock.CallerInfo(1)
	return mmCreate.mock
}

// When sets expectation for the CampaignService.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mCampaignServiceMockCreate) When(ctx context.Context, campaign *model.Campaign) *CampaignServiceMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("CampaignServiceMock.Create mock is already set by Set")
	}

	expectation := &CampaignServiceMockCreateExpectation{
		mock:               mmCreate.mock,
		params:             &CampaignServiceMockCreateParams{ctx, campaign},
		expectationOrigins: CampaignServiceMockCreateExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up CampaignService.Create return parameters for the expectation previously defined by the When method
func (e *CampaignServiceMockCreateExpectation) Then(cp1 *model.Campaign, err error) *CampaignServiceMock {
	e.results = &CampaignServiceMockCreateResults{cp1, err}
	return e.mock
}

// Times sets number of times CampaignService.Create should be invoked
func (mmCreate *mCampaignServiceMockCreate) Times(n uint64) *mCampaignServiceMockCreate {
	if n == 0 {
		mmCreate.mock.t.Fatalf("Times of CampaignServiceMock.Create mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreate.expectedInvocations, n)
	mmCreate.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreate
}

func (mmCreate *mCampaignServiceMockCreate) invocationsDone() bool {
	if len(mmCreate.expectations) == 0 && mmCreate.defaultExpectation == nil && mmCreate.mock.funcCreate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreate.mock.afterCreateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Create implements mm_service.CampaignService
func (mmCreate *CampaignServiceMock) Create(ctx context.Context, campaign *model.Campaign) (cp1 *model.Campaign, err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	mmCreate.t.Helper()

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, campaign)
	}

	mm_params := CampaignServiceMockCreateParams{ctx, campaign}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, &mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1, e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_want_ptrs := mmCreate.CreateMock.defaultExpectation.paramPtrs

		mm_got := CampaignServiceMockCreateParams{ctx, campaign}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreate.t.Errorf("CampaignServiceMock.Create got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreate.CreateMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.campaign != nil && !minimock.Equal(*mm_want_ptrs.campaign, mm_got.campaign) {
				mmCreate.t.Errorf("CampaignServiceMock.Create got unexpected parameter campaign, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreate.CreateMock.defaultExpectation.expectationOrigins.originCampaign, *mm_want_ptrs.campaign, mm_got.campaign, minimock.Diff(*mm_want_ptrs.campaign, mm_got.campaign))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("CampaignServiceMock.Create got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreate.CreateMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the CampaignServiceMock.Create")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, campaign)
	}
	mmCreate.t.Fatalf("Unexpected call to CampaignServiceMock.Create. %v %v", ctx, campaign)
	return
}

// CreateAfterCounter returns a count of finished CampaignServiceMock.Create invocations
func (mmCreate *CampaignServiceMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of CampaignServiceMock.Create invocations
func (mmCreate *CampaignServiceMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to CampaignServiceMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mCampaignServiceMockCreate) Calls() []*CampaignServiceMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*CampaignServiceMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *CampaignServiceMock) MinimockCreateDone() bool {
	if m.CreateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateMock.invocationsDone()
}

// MinimockCreateInspect logs each unmet expectation
func (m *CampaignServiceMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CampaignServiceMock.Create at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateCounter := mm_atomic.LoadUint64(&m.afterCreateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && afterCreateCounter < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to CampaignServiceMock.Create at\n%s", m.CreateMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to CampaignServiceMock.Create at\n%s with params: %#v", m.CreateMock.defaultExpectation.expectationOrigins.origin, *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && afterCreateCounter < 1 {
		m.t.Errorf("Expected call to CampaignServiceMock.Create at\n%s", m.funcCreateOrigin)
	}

	if !m.CreateMock.invocationsDone() && afterCreateCounter > 0 {
		m.t.Errorf("Expected %d calls to CampaignServiceMock.Create at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateMock.expectedInvocations), m.CreateMock.expectedInvocationsOrigin, afterCreateCounter)
	}
}

type mCampaignServiceMockDelete struct {
	optional           bool
	mock               *CampaignServiceMock
	defaultExpectation *CampaignServiceMockDeleteExpectation
	expectations       []*CampaignServiceMockDeleteExpectation

	callArgs []*CampaignServiceMockDeleteParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// CampaignServiceMockDeleteExpectation specifies expectation struct of the CampaignService.Delete
type CampaignServiceMockDeleteExpectation struct {
	mock               *CampaignServiceMock
	params             *CampaignServiceMockDeleteParams
	paramPtrs          *CampaignServiceMockDeleteParamPtrs
	expectationOrigins CampaignServiceMockDeleteExpectationOrigins
	results            *CampaignServiceMockDeleteResults
	returnOrigin       string
	Counter            uint64
}

// CampaignServiceMockDeleteParams contains parameters of the CampaignService.Delete
type CampaignServiceMockDeleteParams struct {
	ctx          context.Context
	advertiserID string
	campaignID   string
}

// CampaignServiceMockDeleteParamPtrs contains pointers to parameters of the CampaignService.Delete
type CampaignServiceMockDeleteParamPtrs struct {
	ctx          *context.Context
	advertiserID *string
	campaignID   *string
}

// CampaignServiceMockDeleteResults contains results of the CampaignService.Delete
type CampaignServiceMockDeleteResults struct {
	err error
}

// CampaignServiceMockDeleteOrigins contains origins of expectations of the CampaignService.Delete
type CampaignServiceMockDeleteExpectationOrigins struct {
	origin             string
	originCtx          string
	originAdvertiserID string
	originCampaignID   string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDelete *mCampaignServiceMockDelete) Optional() *mCampaignServiceMockDelete {
	mmDelete.optional = true
	return mmDelete
}

// Expect sets up expected params for CampaignService.Delete
func (mmDelete *mCampaignServiceMockDelete) Expect(ctx context.Context, advertiserID string, campaignID string) *mCampaignServiceMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("CampaignServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &CampaignServiceMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.paramPtrs != nil {
		mmDelete.mock.t.Fatalf("CampaignServiceMock.Delete mock is already set by ExpectParams functions")
	}

	mmDelete.defaultExpectation.params = &CampaignServiceMockDeleteParams{ctx, advertiserID, campaignID}
	mmDelete.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDelete.expectations {
		if minimock.Equal(e.params, mmDelete.defaultExpectation.params) {
			mmDelete.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDelete.defaultExpectation.params)
		}
	}

	return mmDelete
}

// ExpectCtxParam1 sets up expected param ctx for CampaignService.Delete
func (mmDelete *mCampaignServiceMockDelete) ExpectCtxParam1(ctx context.Context) *mCampaignServiceMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("CampaignServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &CampaignServiceMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.params != nil {
		mmDelete.mock.t.Fatalf("CampaignServiceMock.Delete mock is already set by Expect")
	}

	if mmDelete.defaultExpectation.paramPtrs == nil {
		mmDelete.defaultExpectation.paramPtrs = &CampaignServiceMockDeleteParamPtrs{}
	}
	mmDelete.defaultExpectation.paramPtrs.ctx = &ctx
	mmDelete.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDelete
}

// ExpectAdvertiserIDParam2 sets up expected param advertiserID for CampaignService.Delete
func (mmDelete *mCampaignServiceMockDelete) ExpectAdvertiserIDParam2(advertiserID string) *mCampaignServiceMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("CampaignServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &CampaignServiceMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.params != nil {
		mmDelete.mock.t.Fatalf("CampaignServiceMock.Delete mock is already set by Expect")
	}

	if mmDelete.defaultExpectation.paramPtrs == nil {
		mmDelete.defaultExpectation.paramPtrs = &CampaignServiceMockDeleteParamPtrs{}
	}
	mmDelete.defaultExpectation.paramPtrs.advertiserID = &advertiserID
	mmDelete.defaultExpectation.expectationOrigins.originAdvertiserID = minimock.CallerInfo(1)

	return mmDelete
}

// ExpectCampaignIDParam3 sets up expected param campaignID for CampaignService.Delete
func (mmDelete *mCampaignServiceMockDelete) ExpectCampaignIDParam3(campaignID string) *mCampaignServiceMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("CampaignServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &CampaignServiceMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.params != nil {
		mmDelete.mock.t.Fatalf("CampaignServiceMock.Delete mock is already set by Expect")
	}

	if mmDelete.defaultExpectation.paramPtrs == nil {
		mmDelete.defaultExpectation.paramPtrs = &CampaignServiceMockDeleteParamPtrs{}
	}
	mmDelete.defaultExpectation.paramPtrs.campaignID = &campaignID
	mmDelete.defaultExpectation.expectationOrigins.originCampaignID = minimock.CallerInfo(1)

	return mmDelete
}

// Inspect accepts an inspector function that has same arguments as the CampaignService.Delete
func (mmDelete *mCampaignServiceMockDelete) Inspect(f func(ctx context.Context, advertiserID string, campaignID string)) *mCampaignServiceMockDelete {
	if mmDelete.mock.inspectFuncDelete != nil {
		mmDelete.mock.t.Fatalf("Inspect function is already set for CampaignServiceMock.Delete")
	}

	mmDelete.mock.inspectFuncDelete = f

	return mmDelete
}

// Return sets up results that will be returned by CampaignService.Delete
func (mmDelete *mCampaignServiceMockDelete) Return(err error) *CampaignServiceMock {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("CampaignServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &CampaignServiceMockDeleteExpectation{mock: mmDelete.mock}
	}
	mmDelete.defaultExpectation.results = &CampaignServiceMockDeleteResults{err}
	mmDelete.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDelete.mock
}

// Set uses given function f to mock the CampaignService.Delete method
func (mmDelete *mCampaignServiceMockDelete) Set(f func(ctx context.Context, advertiserID string, campaignID string) (err error)) *CampaignServiceMock {
	if mmDelete.defaultExpectation != nil {
		mmDelete.mock.t.Fatalf("Default expectation is already set for the CampaignService.Delete method")
	}

	if len(mmDelete.expectations) > 0 {
		mmDelete.mock.t.Fatalf("Some expectations are already set for the CampaignService.Delete method")
	}

	mmDelete.mock.funcDelete = f
	mmDelete.mock.funcDeleteOrigin = minimock.CallerInfo(1)
	return mmDelete.mock
}

// When sets expectation for the CampaignService.Delete which will trigger the result defined by the following
// Then helper
func (mmDelete *mCampaignServiceMockDelete) When(ctx context.Context, advertiserID string, campaignID string) *CampaignServiceMockDeleteExpectation {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("CampaignServiceMock.Delete mock is already set by Set")
	}

	expectation := &CampaignServiceMockDeleteExpectation{
		mock:               mmDelete.mock,
		params:             &CampaignServiceMockDeleteParams{ctx, advertiserID, campaignID},
		expectationOrigins: CampaignServiceMockDeleteExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDelete.expectations = append(mmDelete.expectations, expectation)
	return expectation
}

// Then sets up CampaignService.Delete return parameters for the expectation previously defined by the When method
func (e *CampaignServiceMockDeleteExpectation) Then(err error) *CampaignServiceMock {
	e.results = &CampaignServiceMockDeleteResults{err}
	return e.mock
}

// Times sets number of times CampaignService.Delete should be invoked
func (mmDelete *mCampaignServiceMockDelete) Times(n uint64) *mCampaignServiceMockDelete {
	if n == 0 {
		mmDelete.mock.t.Fatalf("Times of CampaignServiceMock.Delete mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDelete.expectedInvocations, n)
	mmDelete.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDelete
}

func (mmDelete *mCampaignServiceMockDelete) invocationsDone() bool {
	if len(mmDelete.expectations) == 0 && mmDelete.defaultExpectation == nil && mmDelete.mock.funcDelete == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDelete.mock.afterDeleteCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDelete.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Delete implements mm_service.CampaignService
func (mmDelete *CampaignServiceMock) Delete(ctx context.Context, advertiserID string, campaignID string) (err error) {
	mm_atomic.AddUint64(&mmDelete.beforeDeleteCounter, 1)
	defer mm_atomic.AddUint64(&mmDelete.afterDeleteCounter, 1)

	mmDelete.t.Helper()

	if mmDelete.inspectFuncDelete != nil {
		mmDelete.inspectFuncDelete(ctx, advertiserID, campaignID)
	}

	mm_params := CampaignServiceMockDeleteParams{ctx, advertiserID, campaignID}

	// Record call args
	mmDelete.DeleteMock.mutex.Lock()
	mmDelete.DeleteMock.callArgs = append(mmDelete.DeleteMock.callArgs, &mm_params)
	mmDelete.DeleteMock.mutex.Unlock()

	for _, e := range mmDelete.DeleteMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDelete.DeleteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDelete.DeleteMock.defaultExpectation.Counter, 1)
		mm_want := mmDelete.DeleteMock.defaultExpectation.params
		mm_want_ptrs := mmDelete.DeleteMock.defaultExpectation.paramPtrs

		mm_got := CampaignServiceMockDeleteParams{ctx, advertiserID, campaignID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDelete.t.Errorf("CampaignServiceMock.Delete got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDelete.DeleteMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.advertiserID != nil && !minimock.Equal(*mm_want_ptrs.advertiserID, mm_got.advertiserID) {
				mmDelete.t.Errorf("CampaignServiceMock.Delete got unexpected parameter advertiserID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDelete.DeleteMock.defaultExpectation.expectationOrigins.originAdvertiserID, *mm_want_ptrs.advertiserID, mm_got.advertiserID, minimock.Diff(*mm_want_ptrs.advertiserID, mm_got.advertiserID))
			}

			if mm_want_ptrs.campaignID != nil && !minimock.Equal(*mm_want_ptrs.campaignID, mm_got.campaignID) {
				mmDelete.t.Errorf("CampaignServiceMock.Delete got unexpected parameter campaignID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDelete.DeleteMock.defaultExpectation.expectationOrigins.originCampaignID, *mm_want_ptrs.campaignID, mm_got.campaignID, minimock.Diff(*mm_want_ptrs.campaignID, mm_got.campaignID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDelete.t.Errorf("CampaignServiceMock.Delete got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDelete.DeleteMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDelete.DeleteMock.defaultExpectation.results
		if mm_results == nil {
			mmDelete.t.Fatal("No results are set for the CampaignServiceMock.Delete")
		}
		return (*mm_results).err
	}
	if mmDelete.funcDelete != nil {
		return mmDelete.funcDelete(ctx, advertiserID, campaignID)
	}
	mmDelete.t.Fatalf("Unexpected call to CampaignServiceMock.Delete. %v %v %v", ctx, advertiserID, campaignID)
	return
}

// DeleteAfterCounter returns a count of finished CampaignServiceMock.Delete invocations
func (mmDelete *CampaignServiceMock) DeleteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.afterDeleteCounter)
}

// DeleteBeforeCounter returns a count of CampaignServiceMock.Delete invocations
func (mmDelete *CampaignServiceMock) DeleteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.beforeDeleteCounter)
}

// Calls returns a list of arguments used in each call to CampaignServiceMock.Delete.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDelete *mCampaignServiceMockDelete) Calls() []*CampaignServiceMockDeleteParams {
	mmDelete.mutex.RLock()

	argCopy := make([]*CampaignServiceMockDeleteParams, len(mmDelete.callArgs))
	copy(argCopy, mmDelete.callArgs)

	mmDelete.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteDone returns true if the count of the Delete invocations corresponds
// the number of defined expectations
func (m *CampaignServiceMock) MinimockDeleteDone() bool {
	if m.DeleteMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteMock.invocationsDone()
}

// MinimockDeleteInspect logs each unmet expectation
func (m *CampaignServiceMock) MinimockDeleteInspect() {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CampaignServiceMock.Delete at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteCounter := mm_atomic.LoadUint64(&m.afterDeleteCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && afterDeleteCounter < 1 {
		if m.DeleteMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to CampaignServiceMock.Delete at\n%s", m.DeleteMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to CampaignServiceMock.Delete at\n%s with params: %#v", m.DeleteMock.defaultExpectation.expectationOrigins.origin, *m.DeleteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && afterDeleteCounter < 1 {
		m.t.Errorf("Expected call to CampaignServiceMock.Delete at\n%s", m.funcDeleteOrigin)
	}

	if !m.DeleteMock.invocationsDone() && afterDeleteCounter > 0 {
		m.t.Errorf("Expected %d calls to CampaignServiceMock.Delete at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteMock.expectedInvocations), m.DeleteMock.expectedInvocationsOrigin, afterDeleteCounter)
	}
}

type mCampaignServiceMockGet struct {
	optional           bool
	mock               *CampaignServiceMock
	defaultExpectation *CampaignServiceMockGetExpectation
	expectations       []*CampaignServiceMockGetExpectation

	callArgs []*CampaignServiceMockGetParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// CampaignServiceMockGetExpectation specifies expectation struct of the CampaignService.Get
type CampaignServiceMockGetExpectation struct {
	mock               *CampaignServiceMock
	params             *CampaignServiceMockGetParams
	paramPtrs          *CampaignServiceMockGetParamPtrs
	expectationOrigins CampaignServiceMockGetExpectationOrigins
	results            *CampaignServiceMockGetResults
	returnOrigin       string
	Counter            uint64
}

// CampaignServiceMockGetParams contains parameters of the CampaignService.Get
type CampaignServiceMockGetParams struct {
	ctx          context.Context
	advertiserID string
	campaignID   string
}

// CampaignServiceMockGetParamPtrs contains pointers to parameters of the CampaignService.Get
type CampaignServiceMockGetParamPtrs struct {
	ctx          *context.Context
	advertiserID *string
	campaignID   *string
}

// CampaignServiceMockGetResults contains results of the CampaignService.Get
type CampaignServiceMockGetResults struct {
	cp1 *model.Campaign
	err error
}

// CampaignServiceMockGetOrigins contains origins of expectations of the CampaignService.Get
type CampaignServiceMockGetExpectationOrigins struct {
	origin             string
	originCtx          string
	originAdvertiserID string
	originCampaignID   string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGet *mCampaignServiceMockGet) Optional() *mCampaignServiceMockGet {
	mmGet.optional = true
	return mmGet
}

// Expect sets up expected params for CampaignService.Get
func (mmGet *mCampaignServiceMockGet) Expect(ctx context.Context, advertiserID string, campaignID string) *mCampaignServiceMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("CampaignServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &CampaignServiceMockGetExpectation{}
	}

	if mmGet.defaultExpectation.paramPtrs != nil {
		mmGet.mock.t.Fatalf("CampaignServiceMock.Get mock is already set by ExpectParams functions")
	}

	mmGet.defaultExpectation.params = &CampaignServiceMockGetParams{ctx, advertiserID, campaignID}
	mmGet.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// ExpectCtxParam1 sets up expected param ctx for CampaignService.Get
func (mmGet *mCampaignServiceMockGet) ExpectCtxParam1(ctx context.Context) *mCampaignServiceMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("CampaignServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &CampaignServiceMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("CampaignServiceMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &CampaignServiceMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.ctx = &ctx
	mmGet.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGet
}

// ExpectAdvertiserIDParam2 sets up expected param advertiserID for CampaignService.Get
func (mmGet *mCampaignServiceMockGet) ExpectAdvertiserIDParam2(advertiserID string) *mCampaignServiceMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("CampaignServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &CampaignServiceMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("CampaignServiceMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &CampaignServiceMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.advertiserID = &advertiserID
	mmGet.defaultExpectation.expectationOrigins.originAdvertiserID = minimock.CallerInfo(1)

	return mmGet
}

// ExpectCampaignIDParam3 sets up expected param campaignID for CampaignService.Get
func (mmGet *mCampaignServiceMockGet) ExpectCampaignIDParam3(campaignID string) *mCampaignServiceMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("CampaignServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &CampaignServiceMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("CampaignServiceMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &CampaignServiceMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.campaignID = &campaignID
	mmGet.defaultExpectation.expectationOrigins.originCampaignID = minimock.CallerInfo(1)

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the CampaignService.Get
func (mmGet *mCampaignServiceMockGet) Inspect(f func(ctx context.Context, advertiserID string, campaignID string)) *mCampaignServiceMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for CampaignServiceMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by CampaignService.Get
func (mmGet *mCampaignServiceMockGet) Return(cp1 *model.Campaign, err error) *CampaignServiceMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("CampaignServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &CampaignServiceMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &CampaignServiceMockGetResults{cp1, err}
	mmGet.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGet.mock
}

// Set uses given function f to mock the CampaignService.Get method
func (mmGet *mCampaignServiceMockGet) Set(f func(ctx context.Context, advertiserID string, campaignID string) (cp1 *model.Campaign, err error)) *CampaignServiceMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the CampaignService.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the CampaignService.Get method")
	}

	mmGet.mock.funcGet = f
	mmGet.mock.funcGetOrigin = minimock.CallerInfo(1)
	return mmGet.mock
}

// When sets expectation for the CampaignService.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mCampaignServiceMockGet) When(ctx context.Context, advertiserID string, campaignID string) *CampaignServiceMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("CampaignServiceMock.Get mock is already set by Set")
	}

	expectation := &CampaignServiceMockGetExpectation{
		mock:               mmGet.mock,
		params:             &CampaignServiceMockGetParams{ctx, advertiserID, campaignID},
		expectationOrigins: CampaignServiceMockGetExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up CampaignService.Get return parameters for the expectation previously defined by the When method
func (e *CampaignServiceMockGetExpectation) Then(cp1 *model.Campaign, err error) *CampaignServiceMock {
	e.results = &CampaignServiceMockGetResults{cp1, err}
	return e.mock
}

// Times sets number of times CampaignService.Get should be invoked
func (mmGet *mCampaignServiceMockGet) Times(n uint64) *mCampaignServiceMockGet {
	if n == 0 {
		mmGet.mock.t.Fatalf("Times of CampaignServiceMock.Get mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGet.expectedInvocations, n)
	mmGet.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGet
}

func (mmGet *mCampaignServiceMockGet) invocationsDone() bool {
	if len(mmGet.expectations) == 0 && mmGet.defaultExpectation == nil && mmGet.mock.funcGet == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGet.mock.afterGetCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGet.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Get implements mm_service.CampaignService
func (mmGet *CampaignServiceMock) Get(ctx context.Context, advertiserID string, campaignID string) (cp1 *model.Campaign, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	mmGet.t.Helper()

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, advertiserID, campaignID)
	}

	mm_params := CampaignServiceMockGetParams{ctx, advertiserID, campaignID}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, &mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_want_ptrs := mmGet.GetMock.defaultExpectation.paramPtrs

		mm_got := CampaignServiceMockGetParams{ctx, advertiserID, campaignID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGet.t.Errorf("CampaignServiceMock.Get got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGet.GetMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.advertiserID != nil && !minimock.Equal(*mm_want_ptrs.advertiserID, mm_got.advertiserID) {
				mmGet.t.Errorf("CampaignServiceMock.Get got unexpected parameter advertiserID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGet.GetMock.defaultExpectation.expectationOrigins.originAdvertiserID, *mm_want_ptrs.advertiserID, mm_got.advertiserID, minimock.Diff(*mm_want_ptrs.advertiserID, mm_got.advertiserID))
			}

			if mm_want_ptrs.campaignID != nil && !minimock.Equal(*mm_want_ptrs.campaignID, mm_got.campaignID) {
				mmGet.t.Errorf("CampaignServiceMock.Get got unexpected parameter campaignID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGet.GetMock.defaultExpectation.expectationOrigins.originCampaignID, *mm_want_ptrs.campaignID, mm_got.campaignID, minimock.Diff(*mm_want_ptrs.campaignID, mm_got.campaignID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("CampaignServiceMock.Get got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGet.GetMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the CampaignServiceMock.Get")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, advertiserID, campaignID)
	}
	mmGet.t.Fatalf("Unexpected call to CampaignServiceMock.Get. %v %v %v", ctx, advertiserID, campaignID)
	return
}

// GetAfterCounter returns a count of finished CampaignServiceMock.Get invocations
func (mmGet *CampaignServiceMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of CampaignServiceMock.Get invocations
func (mmGet *CampaignServiceMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to CampaignServiceMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mCampaignServiceMockGet) Calls() []*CampaignServiceMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*CampaignServiceMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *CampaignServiceMock) MinimockGetDone() bool {
	if m.GetMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetMock.invocationsDone()
}

// MinimockGetInspect logs each unmet expectation
func (m *CampaignServiceMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CampaignServiceMock.Get at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetCounter := mm_atomic.LoadUint64(&m.afterGetCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && afterGetCounter < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to CampaignServiceMock.Get at\n%s", m.GetMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to CampaignServiceMock.Get at\n%s with params: %#v", m.GetMock.defaultExpectation.expectationOrigins.origin, *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && afterGetCounter < 1 {
		m.t.Errorf("Expected call to CampaignServiceMock.Get at\n%s", m.funcGetOrigin)
	}

	if !m.GetMock.invocationsDone() && afterGetCounter > 0 {
		m.t.Errorf("Expected %d calls to CampaignServiceMock.Get at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetMock.expectedInvocations), m.GetMock.expectedInvocationsOrigin, afterGetCounter)
	}
}

type mCampaignServiceMockList struct {
	optional           bool
	mock               *CampaignServiceMock
	defaultExpectation *CampaignServiceMockListExpectation
	expectations       []*CampaignServiceMockListExpectation

	callArgs []*CampaignServiceMockListParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// CampaignServiceMockListExpectation specifies expectation struct of the CampaignService.List
type CampaignServiceMockListExpectation struct {
	mock               *CampaignServiceMock
	params             *CampaignServiceMockListParams
	paramPtrs          *CampaignServiceMockListParamPtrs
	expectationOrigins CampaignServiceMockListExpectationOrigins
	results            *CampaignServiceMockListResults
	returnOrigin       string
	Counter            uint64
}

// CampaignServiceMockListParams contains parameters of the CampaignService.List
type CampaignServiceMockListParams struct {
	ctx          context.Context
	advertiserID string
	page         int
	size         int
}

// CampaignServiceMockListParamPtrs contains pointers to parameters of the CampaignService.List
type CampaignServiceMockListParamPtrs struct {
	ctx          *context.Context
	advertiserID *string
	page         *int
	size         *int
}

// CampaignServiceMockListResults contains results of the CampaignService.List
type CampaignServiceMockListResults struct {
	cpa1 []*model.Campaign
	err  error
}

// CampaignServiceMockListOrigins contains origins of expectations of the CampaignService.List
type CampaignServiceMockListExpectationOrigins struct {
	origin             string
	originCtx          string
	originAdvertiserID string
	originPage         string
	originSize         string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmList *mCampaignServiceMockList) Optional() *mCampaignServiceMockList {
	mmList.optional = true
	return mmList
}

// Expect sets up expected params for CampaignService.List
func (mmList *mCampaignServiceMockList) Expect(ctx context.Context, advertiserID string, page int, size int) *mCampaignServiceMockList {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("CampaignServiceMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &CampaignServiceMockListExpectation{}
	}

	if mmList.defaultExpectation.paramPtrs != nil {
		mmList.mock.t.Fatalf("CampaignServiceMock.List mock is already set by ExpectParams functions")
	}

	mmList.defaultExpectation.params = &CampaignServiceMockListParams{ctx, advertiserID, page, size}
	mmList.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmList.expectations {
		if minimock.Equal(e.params, mmList.defaultExpectation.params) {
			mmList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmList.defaultExpectation.params)
		}
	}

	return mmList
}

// ExpectCtxParam1 sets up expected param ctx for CampaignService.List
func (mmList *mCampaignServiceMockList) ExpectCtxParam1(ctx context.Context) *mCampaignServiceMockList {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("CampaignServiceMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &CampaignServiceMockListExpectation{}
	}

	if mmList.defaultExpectation.params != nil {
		mmList.mock.t.Fatalf("CampaignServiceMock.List mock is already set by Expect")
	}

	if mmList.defaultExpectation.paramPtrs == nil {
		mmList.defaultExpectation.paramPtrs = &CampaignServiceMockListParamPtrs{}
	}
	mmList.defaultExpectation.paramPtrs.ctx = &ctx
	mmList.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmList
}

// ExpectAdvertiserIDParam2 sets up expected param advertiserID for CampaignService.List
func (mmList *mCampaignServiceMockList) ExpectAdvertiserIDParam2(advertiserID string) *mCampaignServiceMockList {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("CampaignServiceMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &CampaignServiceMockListExpectation{}
	}

	if mmList.defaultExpectation.params != nil {
		mmList.mock.t.Fatalf("CampaignServiceMock.List mock is already set by Expect")
	}

	if mmList.defaultExpectation.paramPtrs == nil {
		mmList.defaultExpectation.paramPtrs = &CampaignServiceMockListParamPtrs{}
	}
	mmList.defaultExpectation.paramPtrs.advertiserID = &advertiserID
	mmList.defaultExpectation.expectationOrigins.originAdvertiserID = minimock.CallerInfo(1)

	return mmList
}

// ExpectPageParam3 sets up expected param page for CampaignService.List
func (mmList *mCampaignServiceMockList) ExpectPageParam3(page int) *mCampaignServiceMockList {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("CampaignServiceMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &CampaignServiceMockListExpectation{}
	}

	if mmList.defaultExpectation.params != nil {
		mmList.mock.t.Fatalf("CampaignServiceMock.List mock is already set by Expect")
	}

	if mmList.defaultExpectation.paramPtrs == nil {
		mmList.defaultExpectation.paramPtrs = &CampaignServiceMockListParamPtrs{}
	}
	mmList.defaultExpectation.paramPtrs.page = &page
	mmList.defaultExpectation.expectationOrigins.originPage = minimock.CallerInfo(1)

	return mmList
}

// ExpectSizeParam4 sets up expected param size for CampaignService.List
func (mmList *mCampaignServiceMockList) ExpectSizeParam4(size int) *mCampaignServiceMockList {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("CampaignServiceMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &CampaignServiceMockListExpectation{}
	}

	if mmList.defaultExpectation.params != nil {
		mmList.mock.t.Fatalf("CampaignServiceMock.List mock is already set by Expect")
	}

	if mmList.defaultExpectation.paramPtrs == nil {
		mmList.defaultExpectation.paramPtrs = &CampaignServiceMockListParamPtrs{}
	}
	mmList.defaultExpectation.paramPtrs.size = &size
	mmList.defaultExpectation.expectationOrigins.originSize = minimock.CallerInfo(1)

	return mmList
}

// Inspect accepts an inspector function that has same arguments as the CampaignService.List
func (mmList *mCampaignServiceMockList) Inspect(f func(ctx context.Context, advertiserID string, page int, size int)) *mCampaignServiceMockList {
	if mmList.mock.inspectFuncList != nil {
		mmList.mock.t.Fatalf("Inspect function is already set for CampaignServiceMock.List")
	}

	mmList.mock.inspectFuncList = f

	return mmList
}

// Return sets up results that will be returned by CampaignService.List
func (mmList *mCampaignServiceMockList) Return(cpa1 []*model.Campaign, err error) *CampaignServiceMock {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("CampaignServiceMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &CampaignServiceMockListExpectation{mock: mmList.mock}
	}
	mmList.defaultExpectation.results = &CampaignServiceMockListResults{cpa1, err}
	mmList.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmList.mock
}

// Set uses given function f to mock the CampaignService.List method
func (mmList *mCampaignServiceMockList) Set(f func(ctx context.Context, advertiserID string, page int, size int) (cpa1 []*model.Campaign, err error)) *CampaignServiceMock {
	if mmList.defaultExpectation != nil {
		mmList.mock.t.Fatalf("Default expectation is already set for the CampaignService.List method")
	}

	if len(mmList.expectations) > 0 {
		mmList.mock.t.Fatalf("Some expectations are already set for the CampaignService.List method")
	}

	mmList.mock.funcList = f
	mmList.mock.funcListOrigin = minimock.CallerInfo(1)
	return mmList.mock
}

// When sets expectation for the CampaignService.List which will trigger the result defined by the following
// Then helper
func (mmList *mCampaignServiceMockList) When(ctx context.Context, advertiserID string, page int, size int) *CampaignServiceMockListExpectation {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("CampaignServiceMock.List mock is already set by Set")
	}

	expectation := &CampaignServiceMockListExpectation{
		mock:               mmList.mock,
		params:             &CampaignServiceMockListParams{ctx, advertiserID, page, size},
		expectationOrigins: CampaignServiceMockListExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmList.expectations = append(mmList.expectations, expectation)
	return expectation
}

// Then sets up CampaignService.List return parameters for the expectation previously defined by the When method
func (e *CampaignServiceMockListExpectation) Then(cpa1 []*model.Campaign, err error) *CampaignServiceMock {
	e.results = &CampaignServiceMockListResults{cpa1, err}
	return e.mock
}

// Times sets number of times CampaignService.List should be invoked
func (mmList *mCampaignServiceMockList) Times(n uint64) *mCampaignServiceMockList {
	if n == 0 {
		mmList.mock.t.Fatalf("Times of CampaignServiceMock.List mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmList.expectedInvocations, n)
	mmList.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmList
}

func (mmList *mCampaignServiceMockList) invocationsDone() bool {
	if len(mmList.expectations) == 0 && mmList.defaultExpectation == nil && mmList.mock.funcList == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmList.mock.afterListCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmList.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// List implements mm_service.CampaignService
func (mmList *CampaignServiceMock) List(ctx context.Context, advertiserID string, page int, size int) (cpa1 []*model.Campaign, err error) {
	mm_atomic.AddUint64(&mmList.beforeListCounter, 1)
	defer mm_atomic.AddUint64(&mmList.afterListCounter, 1)

	mmList.t.Helper()

	if mmList.inspectFuncList != nil {
		mmList.inspectFuncList(ctx, advertiserID, page, size)
	}

	mm_params := CampaignServiceMockListParams{ctx, advertiserID, page, size}

	// Record call args
	mmList.ListMock.mutex.Lock()
	mmList.ListMock.callArgs = append(mmList.ListMock.callArgs, &mm_params)
	mmList.ListMock.mutex.Unlock()

	for _, e := range mmList.ListMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cpa1, e.results.err
		}
	}

	if mmList.ListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmList.ListMock.defaultExpectation.Counter, 1)
		mm_want := mmList.ListMock.defaultExpectation.params
		mm_want_ptrs := mmList.ListMock.defaultExpectation.paramPtrs

		mm_got := CampaignServiceMockListParams{ctx, advertiserID, page, size}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmList.t.Errorf("CampaignServiceMock.List got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmList.ListMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.advertiserID != nil && !minimock.Equal(*mm_want_ptrs.advertiserID, mm_got.advertiserID) {
				mmList.t.Errorf("CampaignServiceMock.List got unexpected parameter advertiserID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmList.ListMock.defaultExpectation.expectationOrigins.originAdvertiserID, *mm_want_ptrs.advertiserID, mm_got.advertiserID, minimock.Diff(*mm_want_ptrs.advertiserID, mm_got.advertiserID))
			}

			if mm_want_ptrs.page != nil && !minimock.Equal(*mm_want_ptrs.page, mm_got.page) {
				mmList.t.Errorf("CampaignServiceMock.List got unexpected parameter page, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmList.ListMock.defaultExpectation.expectationOrigins.originPage, *mm_want_ptrs.page, mm_got.page, minimock.Diff(*mm_want_ptrs.page, mm_got.page))
			}

			if mm_want_ptrs.size != nil && !minimock.Equal(*mm_want_ptrs.size, mm_got.size) {
				mmList.t.Errorf("CampaignServiceMock.List got unexpected parameter size, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmList.ListMock.defaultExpectation.expectationOrigins.originSize, *mm_want_ptrs.size, mm_got.size, minimock.Diff(*mm_want_ptrs.size, mm_got.size))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmList.t.Errorf("CampaignServiceMock.List got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmList.ListMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmList.ListMock.defaultExpectation.results
		if mm_results == nil {
			mmList.t.Fatal("No results are set for the CampaignServiceMock.List")
		}
		return (*mm_results).cpa1, (*mm_results).err
	}
	if mmList.funcList != nil {
		return mmList.funcList(ctx, advertiserID, page, size)
	}
	mmList.t.Fatalf("Unexpected call to CampaignServiceMock.List. %v %v %v %v", ctx, advertiserID, page, size)
	return
}

// ListAfterCounter returns a count of finished CampaignServiceMock.List invocations
func (mmList *CampaignServiceMock) ListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmList.afterListCounter)
}

// ListBeforeCounter returns a count of CampaignServiceMock.List invocations
func (mmList *CampaignServiceMock) ListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmList.beforeListCounter)
}

// Calls returns a list of arguments used in each call to CampaignServiceMock.List.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmList *mCampaignServiceMockList) Calls() []*CampaignServiceMockListParams {
	mmList.mutex.RLock()

	argCopy := make([]*CampaignServiceMockListParams, len(mmList.callArgs))
	copy(argCopy, mmList.callArgs)

	mmList.mutex.RUnlock()

	return argCopy
}

// MinimockListDone returns true if the count of the List invocations corresponds
// the number of defined expectations
func (m *CampaignServiceMock) MinimockListDone() bool {
	if m.ListMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ListMock.invocationsDone()
}

// MinimockListInspect logs each unmet expectation
func (m *CampaignServiceMock) MinimockListInspect() {
	for _, e := range m.ListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CampaignServiceMock.List at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterListCounter := mm_atomic.LoadUint64(&m.afterListCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ListMock.defaultExpectation != nil && afterListCounter < 1 {
		if m.ListMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to CampaignServiceMock.List at\n%s", m.ListMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to CampaignServiceMock.List at\n%s with params: %#v", m.ListMock.defaultExpectation.expectationOrigins.origin, *m.ListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcList != nil && afterListCounter < 1 {
		m.t.Errorf("Expected call to CampaignServiceMock.List at\n%s", m.funcListOrigin)
	}

	if !m.ListMock.invocationsDone() && afterListCounter > 0 {
		m.t.Errorf("Expected %d calls to CampaignServiceMock.List at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ListMock.expectedInvocations), m.ListMock.expectedInvocationsOrigin, afterListCounter)
	}
}

type mCampaignServiceMockSaveImage struct {
	optional           bool
	mock               *CampaignServiceMock
	defaultExpectation *CampaignServiceMockSaveImageExpectation
	expectations       []*CampaignServiceMockSaveImageExpectation

	callArgs []*CampaignServiceMockSaveImageParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// CampaignServiceMockSaveImageExpectation specifies expectation struct of the CampaignService.SaveImage
type CampaignServiceMockSaveImageExpectation struct {
	mock               *CampaignServiceMock
	params             *CampaignServiceMockSaveImageParams
	paramPtrs          *CampaignServiceMockSaveImageParamPtrs
	expectationOrigins CampaignServiceMockSaveImageExpectationOrigins
	results            *CampaignServiceMockSaveImageResults
	returnOrigin       string
	Counter            uint64
}

// CampaignServiceMockSaveImageParams contains parameters of the CampaignService.SaveImage
type CampaignServiceMockSaveImageParams struct {
	ctx          context.Context
	advertiserID string
	campaignID   string
	image        *model.Image
}

// CampaignServiceMockSaveImageParamPtrs contains pointers to parameters of the CampaignService.SaveImage
type CampaignServiceMockSaveImageParamPtrs struct {
	ctx          *context.Context
	advertiserID *string
	campaignID   *string
	image        **model.Image
}

// CampaignServiceMockSaveImageResults contains results of the CampaignService.SaveImage
type CampaignServiceMockSaveImageResults struct {
	ip1 *model.Image
	err error
}

// CampaignServiceMockSaveImageOrigins contains origins of expectations of the CampaignService.SaveImage
type CampaignServiceMockSaveImageExpectationOrigins struct {
	origin             string
	originCtx          string
	originAdvertiserID string
	originCampaignID   string
	originImage        string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSaveImage *mCampaignServiceMockSaveImage) Optional() *mCampaignServiceMockSaveImage {
	mmSaveImage.optional = true
	return mmSaveImage
}

// Expect sets up expected params for CampaignService.SaveImage
func (mmSaveImage *mCampaignServiceMockSaveImage) Expect(ctx context.Context, advertiserID string, campaignID string, image *model.Image) *mCampaignServiceMockSaveImage {
	if mmSaveImage.mock.funcSaveImage != nil {
		mmSaveImage.mock.t.Fatalf("CampaignServiceMock.SaveImage mock is already set by Set")
	}

	if mmSaveImage.defaultExpectation == nil {
		mmSaveImage.defaultExpectation = &CampaignServiceMockSaveImageExpectation{}
	}

	if mmSaveImage.defaultExpectation.paramPtrs != nil {
		mmSaveImage.mock.t.Fatalf("CampaignServiceMock.SaveImage mock is already set by ExpectParams functions")
	}

	mmSaveImage.defaultExpectation.params = &CampaignServiceMockSaveImageParams{ctx, advertiserID, campaignID, image}
	mmSaveImage.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSaveImage.expectations {
		if minimock.Equal(e.params, mmSaveImage.defaultExpectation.params) {
			mmSaveImage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSaveImage.defaultExpectation.params)
		}
	}

	return mmSaveImage
}

// ExpectCtxParam1 sets up expected param ctx for CampaignService.SaveImage
func (mmSaveImage *mCampaignServiceMockSaveImage) ExpectCtxParam1(ctx context.Context) *mCampaignServiceMockSaveImage {
	if mmSaveImage.mock.funcSaveImage != nil {
		mmSaveImage.mock.t.Fatalf("CampaignServiceMock.SaveImage mock is already set by Set")
	}

	if mmSaveImage.defaultExpectation == nil {
		mmSaveImage.defaultExpectation = &CampaignServiceMockSaveImageExpectation{}
	}

	if mmSaveImage.defaultExpectation.params != nil {
		mmSaveImage.mock.t.Fatalf("CampaignServiceMock.SaveImage mock is already set by Expect")
	}

	if mmSaveImage.defaultExpectation.paramPtrs == nil {
		mmSaveImage.defaultExpectation.paramPtrs = &CampaignServiceMockSaveImageParamPtrs{}
	}
	mmSaveImage.defaultExpectation.paramPtrs.ctx = &ctx
	mmSaveImage.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSaveImage
}

// ExpectAdvertiserIDParam2 sets up expected param advertiserID for CampaignService.SaveImage
func (mmSaveImage *mCampaignServiceMockSaveImage) ExpectAdvertiserIDParam2(advertiserID string) *mCampaignServiceMockSaveImage {
	if mmSaveImage.mock.funcSaveImage != nil {
		mmSaveImage.mock.t.Fatalf("CampaignServiceMock.SaveImage mock is already set by Set")
	}

	if mmSaveImage.defaultExpectation == nil {
		mmSaveImage.defaultExpectation = &CampaignServiceMockSaveImageExpectation{}
	}

	if mmSaveImage.defaultExpectation.params != nil {
		mmSaveImage.mock.t.Fatalf("CampaignServiceMock.SaveImage mock is already set by Expect")
	}

	if mmSaveImage.defaultExpectation.paramPtrs == nil {
		mmSaveImage.defaultExpectation.paramPtrs = &CampaignServiceMockSaveImageParamPtrs{}
	}
	mmSaveImage.defaultExpectation.paramPtrs.advertiserID = &advertiserID
	mmSaveImage.defaultExpectation.expectationOrigins.originAdvertiserID = minimock.CallerInfo(1)

	return mmSaveImage
}

// ExpectCampaignIDParam3 sets up expected param campaignID for CampaignService.SaveImage
func (mmSaveImage *mCampaignServiceMockSaveImage) ExpectCampaignIDParam3(campaignID string) *mCampaignServiceMockSaveImage {
	if mmSaveImage.mock.funcSaveImage != nil {
		mmSaveImage.mock.t.Fatalf("CampaignServiceMock.SaveImage mock is already set by Set")
	}

	if mmSaveImage.defaultExpectation == nil {
		mmSaveImage.defaultExpectation = &CampaignServiceMockSaveImageExpectation{}
	}

	if mmSaveImage.defaultExpectation.params != nil {
		mmSaveImage.mock.t.Fatalf("CampaignServiceMock.SaveImage mock is already set by Expect")
	}

	if mmSaveImage.defaultExpectation.paramPtrs == nil {
		mmSaveImage.defaultExpectation.paramPtrs = &CampaignServiceMockSaveImageParamPtrs{}
	}
	mmSaveImage.defaultExpectation.paramPtrs.campaignID = &campaignID
	mmSaveImage.defaultExpectation.expectationOrigins.originCampaignID = minimock.CallerInfo(1)

	return mmSaveImage
}

// ExpectImageParam4 sets up expected param image for CampaignService.SaveImage
func (mmSaveImage *mCampaignServiceMockSaveImage) ExpectImageParam4(image *model.Image) *mCampaignServiceMockSaveImage {
	if mmSaveImage.mock.funcSaveImage != nil {
		mmSaveImage.mock.t.Fatalf("CampaignServiceMock.SaveImage mock is already set by Set")
	}

	if mmSaveImage.defaultExpectation == nil {
		mmSaveImage.defaultExpectation = &CampaignServiceMockSaveImageExpectation{}
	}

	if mmSaveImage.defaultExpectation.params != nil {
		mmSaveImage.mock.t.Fatalf("CampaignServiceMock.SaveImage mock is already set by Expect")
	}

	if mmSaveImage.defaultExpectation.paramPtrs == nil {
		mmSaveImage.defaultExpectation.paramPtrs = &CampaignServiceMockSaveImageParamPtrs{}
	}
	mmSaveImage.defaultExpectation.paramPtrs.image = &image
	mmSaveImage.defaultExpectation.expectationOrigins.originImage = minimock.CallerInfo(1)

	return mmSaveImage
}

// Inspect accepts an inspector function that has same arguments as the CampaignService.SaveImage
func (mmSaveImage *mCampaignServiceMockSaveImage) Inspect(f func(ctx context.Context, advertiserID string, campaignID string, image *model.Image)) *mCampaignServiceMockSaveImage {
	if mmSaveImage.mock.inspectFuncSaveImage != nil {
		mmSaveImage.mock.t.Fatalf("Inspect function is already set for CampaignServiceMock.SaveImage")
	}

	mmSaveImage.mock.inspectFuncSaveImage = f

	return mmSaveImage
}

// Return sets up results that will be returned by CampaignService.SaveImage
func (mmSaveImage *mCampaignServiceMockSaveImage) Return(ip1 *model.Image, err error) *CampaignServiceMock {
	if mmSaveImage.mock.funcSaveImage != nil {
		mmSaveImage.mock.t.Fatalf("CampaignServiceMock.SaveImage mock is already set by Set")
	}

	if mmSaveImage.defaultExpectation == nil {
		mmSaveImage.defaultExpectation = &CampaignServiceMockSaveImageExpectation{mock: mmSaveImage.mock}
	}
	mmSaveImage.defaultExpectation.results = &CampaignServiceMockSaveImageResults{ip1, err}
	mmSaveImage.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSaveImage.mock
}

// Set uses given function f to mock the CampaignService.SaveImage method
func (mmSaveImage *mCampaignServiceMockSaveImage) Set(f func(ctx context.Context, advertiserID string, campaignID string, image *model.Image) (ip1 *model.Image, err error)) *CampaignServiceMock {
	if mmSaveImage.defaultExpectation != nil {
		mmSaveImage.mock.t.Fatalf("Default expectation is already set for the CampaignService.SaveImage method")
	}

	if len(mmSaveImage.expectations) > 0 {
		mmSaveImage.mock.t.Fatalf("Some expectations are already set for the CampaignService.SaveImage method")
	}

	mmSaveImage.mock.funcSaveImage = f
	mmSaveImage.mock.funcSaveImageOrigin = minimock.CallerInfo(1)
	return mmSaveImage.mock
}

// When sets expectation for the CampaignService.SaveImage which will trigger the result defined by the following
// Then helper
func (mmSaveImage *mCampaignServiceMockSaveImage) When(ctx context.Context, advertiserID string, campaignID string, image *model.Image) *CampaignServiceMockSaveImageExpectation {
	if mmSaveImage.mock.funcSaveImage != nil {
		mmSaveImage.mock.t.Fatalf("CampaignServiceMock.SaveImage mock is already set by Set")
	}

	expectation := &CampaignServiceMockSaveImageExpectation{
		mock:               mmSaveImage.mock,
		params:             &CampaignServiceMockSaveImageParams{ctx, advertiserID, campaignID, image},
		expectationOrigins: CampaignServiceMockSaveImageExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSaveImage.expectations = append(mmSaveImage.expectations, expectation)
	return expectation
}

// Then sets up CampaignService.SaveImage return parameters for the expectation previously defined by the When method
func (e *CampaignServiceMockSaveImageExpectation) Then(ip1 *model.Image, err error) *CampaignServiceMock {
	e.results = &CampaignServiceMockSaveImageResults{ip1, err}
	return e.mock
}

// Times sets number of times CampaignService.SaveImage should be invoked
func (mmSaveImage *mCampaignServiceMockSaveImage) Times(n uint64) *mCampaignServiceMockSaveImage {
	if n == 0 {
		mmSaveImage.mock.t.Fatalf("Times of CampaignServiceMock.SaveImage mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSaveImage.expectedInvocations, n)
	mmSaveImage.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSaveImage
}

func (mmSaveImage *mCampaignServiceMockSaveImage) invocationsDone() bool {
	if len(mmSaveImage.expectations) == 0 && mmSaveImage.defaultExpectation == nil && mmSaveImage.mock.funcSaveImage == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSaveImage.mock.afterSaveImageCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSaveImage.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// SaveImage implements mm_service.CampaignService
func (mmSaveImage *CampaignServiceMock) SaveImage(ctx context.Context, advertiserID string, campaignID string, image *model.Image) (ip1 *model.Image, err error) {
	mm_atomic.AddUint64(&mmSaveImage.beforeSaveImageCounter, 1)
	defer mm_atomic.AddUint64(&mmSaveImage.afterSaveImageCounter, 1)

	mmSaveImage.t.Helper()

	if mmSaveImage.inspectFuncSaveImage != nil {
		mmSaveImage.inspectFuncSaveImage(ctx, advertiserID, campaignID, image)
	}

	mm_params := CampaignServiceMockSaveImageParams{ctx, advertiserID, campaignID, image}

	// Record call args
	mmSaveImage.SaveImageMock.mutex.Lock()
	mmSaveImage.SaveImageMock.callArgs = append(mmSaveImage.SaveImageMock.callArgs, &mm_params)
	mmSaveImage.SaveImageMock.mutex.Unlock()

	for _, e := range mmSaveImage.SaveImageMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ip1, e.results.err
		}
	}

	if mmSaveImage.SaveImageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSaveImage.SaveImageMock.defaultExpectation.Counter, 1)
		mm_want := mmSaveImage.SaveImageMock.defaultExpectation.params
		mm_want_ptrs := mmSaveImage.SaveImageMock.defaultExpectation.paramPtrs

		mm_got := CampaignServiceMockSaveImageParams{ctx, advertiserID, campaignID, image}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSaveImage.t.Errorf("CampaignServiceMock.SaveImage got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSaveImage.SaveImageMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.advertiserID != nil && !minimock.Equal(*mm_want_ptrs.advertiserID, mm_got.advertiserID) {
				mmSaveImage.t.Errorf("CampaignServiceMock.SaveImage got unexpected parameter advertiserID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSaveImage.SaveImageMock.defaultExpectation.expectationOrigins.originAdvertiserID, *mm_want_ptrs.advertiserID, mm_got.advertiserID, minimock.Diff(*mm_want_ptrs.advertiserID, mm_got.advertiserID))
			}

			if mm_want_ptrs.campaignID != nil && !minimock.Equal(*mm_want_ptrs.campaignID, mm_got.campaignID) {
				mmSaveImage.t.Errorf("CampaignServiceMock.SaveImage got unexpected parameter campaignID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSaveImage.SaveImageMock.defaultExpectation.expectationOrigins.originCampaignID, *mm_want_ptrs.campaignID, mm_got.campaignID, minimock.Diff(*mm_want_ptrs.campaignID, mm_got.campaignID))
			}

			if mm_want_ptrs.image != nil && !minimock.Equal(*mm_want_ptrs.image, mm_got.image) {
				mmSaveImage.t.Errorf("CampaignServiceMock.SaveImage got unexpected parameter image, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSaveImage.SaveImageMock.defaultExpectation.expectationOrigins.originImage, *mm_want_ptrs.image, mm_got.image, minimock.Diff(*mm_want_ptrs.image, mm_got.image))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSaveImage.t.Errorf("CampaignServiceMock.SaveImage got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSaveImage.SaveImageMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSaveImage.SaveImageMock.defaultExpectation.results
		if mm_results == nil {
			mmSaveImage.t.Fatal("No results are set for the CampaignServiceMock.SaveImage")
		}
		return (*mm_results).ip1, (*mm_results).err
	}
	if mmSaveImage.funcSaveImage != nil {
		return mmSaveImage.funcSaveImage(ctx, advertiserID, campaignID, image)
	}
	mmSaveImage.t.Fatalf("Unexpected call to CampaignServiceMock.SaveImage. %v %v %v %v", ctx, advertiserID, campaignID, image)
	return
}

// SaveImageAfterCounter returns a count of finished CampaignServiceMock.SaveImage invocations
func (mmSaveImage *CampaignServiceMock) SaveImageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSaveImage.afterSaveImageCounter)
}

// SaveImageBeforeCounter returns a count of CampaignServiceMock.SaveImage invocations
func (mmSaveImage *CampaignServiceMock) SaveImageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSaveImage.beforeSaveImageCounter)
}

// Calls returns a list of arguments used in each call to CampaignServiceMock.SaveImage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSaveImage *mCampaignServiceMockSaveImage) Calls() []*CampaignServiceMockSaveImageParams {
	mmSaveImage.mutex.RLock()

	argCopy := make([]*CampaignServiceMockSaveImageParams, len(mmSaveImage.callArgs))
	copy(argCopy, mmSaveImage.callArgs)

	mmSaveImage.mutex.RUnlock()

	return argCopy
}

// MinimockSaveImageDone returns true if the count of the SaveImage invocations corresponds
// the number of defined expectations
func (m *CampaignServiceMock) MinimockSaveImageDone() bool {
	if m.SaveImageMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SaveImageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SaveImageMock.invocationsDone()
}

// MinimockSaveImageInspect logs each unmet expectation
func (m *CampaignServiceMock) MinimockSaveImageInspect() {
	for _, e := range m.SaveImageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CampaignServiceMock.SaveImage at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSaveImageCounter := mm_atomic.LoadUint64(&m.afterSaveImageCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SaveImageMock.defaultExpectation != nil && afterSaveImageCounter < 1 {
		if m.SaveImageMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to CampaignServiceMock.SaveImage at\n%s", m.SaveImageMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to CampaignServiceMock.SaveImage at\n%s with params: %#v", m.SaveImageMock.defaultExpectation.expectationOrigins.origin, *m.SaveImageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSaveImage != nil && afterSaveImageCounter < 1 {
		m.t.Errorf("Expected call to CampaignServiceMock.SaveImage at\n%s", m.funcSaveImageOrigin)
	}

	if !m.SaveImageMock.invocationsDone() && afterSaveImageCounter > 0 {
		m.t.Errorf("Expected %d calls to CampaignServiceMock.SaveImage at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SaveImageMock.expectedInvocations), m.SaveImageMock.expectedInvocationsOrigin, afterSaveImageCounter)
	}
}

type mCampaignServiceMockSetModerateStatus struct {
	optional           bool
	mock               *CampaignServiceMock
	defaultExpectation *CampaignServiceMockSetModerateStatusExpectation
	expectations       []*CampaignServiceMockSetModerateStatusExpectation

	callArgs []*CampaignServiceMockSetModerateStatusParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// CampaignServiceMockSetModerateStatusExpectation specifies expectation struct of the CampaignService.SetModerateStatus
type CampaignServiceMockSetModerateStatusExpectation struct {
	mock               *CampaignServiceMock
	params             *CampaignServiceMockSetModerateStatusParams
	paramPtrs          *CampaignServiceMockSetModerateStatusParamPtrs
	expectationOrigins CampaignServiceMockSetModerateStatusExpectationOrigins
	results            *CampaignServiceMockSetModerateStatusResults
	returnOrigin       string
	Counter            uint64
}

// CampaignServiceMockSetModerateStatusParams contains parameters of the CampaignService.SetModerateStatus
type CampaignServiceMockSetModerateStatusParams struct {
	ctx      context.Context
	moderate bool
}

// CampaignServiceMockSetModerateStatusParamPtrs contains pointers to parameters of the CampaignService.SetModerateStatus
type CampaignServiceMockSetModerateStatusParamPtrs struct {
	ctx      *context.Context
	moderate *bool
}

// CampaignServiceMockSetModerateStatusResults contains results of the CampaignService.SetModerateStatus
type CampaignServiceMockSetModerateStatusResults struct {
	err error
}

// CampaignServiceMockSetModerateStatusOrigins contains origins of expectations of the CampaignService.SetModerateStatus
type CampaignServiceMockSetModerateStatusExpectationOrigins struct {
	origin         string
	originCtx      string
	originModerate string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSetModerateStatus *mCampaignServiceMockSetModerateStatus) Optional() *mCampaignServiceMockSetModerateStatus {
	mmSetModerateStatus.optional = true
	return mmSetModerateStatus
}

// Expect sets up expected params for CampaignService.SetModerateStatus
func (mmSetModerateStatus *mCampaignServiceMockSetModerateStatus) Expect(ctx context.Context, moderate bool) *mCampaignServiceMockSetModerateStatus {
	if mmSetModerateStatus.mock.funcSetModerateStatus != nil {
		mmSetModerateStatus.mock.t.Fatalf("CampaignServiceMock.SetModerateStatus mock is already set by Set")
	}

	if mmSetModerateStatus.defaultExpectation == nil {
		mmSetModerateStatus.defaultExpectation = &CampaignServiceMockSetModerateStatusExpectation{}
	}

	if mmSetModerateStatus.defaultExpectation.paramPtrs != nil {
		mmSetModerateStatus.mock.t.Fatalf("CampaignServiceMock.SetModerateStatus mock is already set by ExpectParams functions")
	}

	mmSetModerateStatus.defaultExpectation.params = &CampaignServiceMockSetModerateStatusParams{ctx, moderate}
	mmSetModerateStatus.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSetModerateStatus.expectations {
		if minimock.Equal(e.params, mmSetModerateStatus.defaultExpectation.params) {
			mmSetModerateStatus.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetModerateStatus.defaultExpectation.params)
		}
	}

	return mmSetModerateStatus
}

// ExpectCtxParam1 sets up expected param ctx for CampaignService.SetModerateStatus
func (mmSetModerateStatus *mCampaignServiceMockSetModerateStatus) ExpectCtxParam1(ctx context.Context) *mCampaignServiceMockSetModerateStatus {
	if mmSetModerateStatus.mock.funcSetModerateStatus != nil {
		mmSetModerateStatus.mock.t.Fatalf("CampaignServiceMock.SetModerateStatus mock is already set by Set")
	}

	if mmSetModerateStatus.defaultExpectation == nil {
		mmSetModerateStatus.defaultExpectation = &CampaignServiceMockSetModerateStatusExpectation{}
	}

	if mmSetModerateStatus.defaultExpectation.params != nil {
		mmSetModerateStatus.mock.t.Fatalf("CampaignServiceMock.SetModerateStatus mock is already set by Expect")
	}

	if mmSetModerateStatus.defaultExpectation.paramPtrs == nil {
		mmSetModerateStatus.defaultExpectation.paramPtrs = &CampaignServiceMockSetModerateStatusParamPtrs{}
	}
	mmSetModerateStatus.defaultExpectation.paramPtrs.ctx = &ctx
	mmSetModerateStatus.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSetModerateStatus
}

// ExpectModerateParam2 sets up expected param moderate for CampaignService.SetModerateStatus
func (mmSetModerateStatus *mCampaignServiceMockSetModerateStatus) ExpectModerateParam2(moderate bool) *mCampaignServiceMockSetModerateStatus {
	if mmSetModerateStatus.mock.funcSetModerateStatus != nil {
		mmSetModerateStatus.mock.t.Fatalf("CampaignServiceMock.SetModerateStatus mock is already set by Set")
	}

	if mmSetModerateStatus.defaultExpectation == nil {
		mmSetModerateStatus.defaultExpectation = &CampaignServiceMockSetModerateStatusExpectation{}
	}

	if mmSetModerateStatus.defaultExpectation.params != nil {
		mmSetModerateStatus.mock.t.Fatalf("CampaignServiceMock.SetModerateStatus mock is already set by Expect")
	}

	if mmSetModerateStatus.defaultExpectation.paramPtrs == nil {
		mmSetModerateStatus.defaultExpectation.paramPtrs = &CampaignServiceMockSetModerateStatusParamPtrs{}
	}
	mmSetModerateStatus.defaultExpectation.paramPtrs.moderate = &moderate
	mmSetModerateStatus.defaultExpectation.expectationOrigins.originModerate = minimock.CallerInfo(1)

	return mmSetModerateStatus
}

// Inspect accepts an inspector function that has same arguments as the CampaignService.SetModerateStatus
func (mmSetModerateStatus *mCampaignServiceMockSetModerateStatus) Inspect(f func(ctx context.Context, moderate bool)) *mCampaignServiceMockSetModerateStatus {
	if mmSetModerateStatus.mock.inspectFuncSetModerateStatus != nil {
		mmSetModerateStatus.mock.t.Fatalf("Inspect function is already set for CampaignServiceMock.SetModerateStatus")
	}

	mmSetModerateStatus.mock.inspectFuncSetModerateStatus = f

	return mmSetModerateStatus
}

// Return sets up results that will be returned by CampaignService.SetModerateStatus
func (mmSetModerateStatus *mCampaignServiceMockSetModerateStatus) Return(err error) *CampaignServiceMock {
	if mmSetModerateStatus.mock.funcSetModerateStatus != nil {
		mmSetModerateStatus.mock.t.Fatalf("CampaignServiceMock.SetModerateStatus mock is already set by Set")
	}

	if mmSetModerateStatus.defaultExpectation == nil {
		mmSetModerateStatus.defaultExpectation = &CampaignServiceMockSetModerateStatusExpectation{mock: mmSetModerateStatus.mock}
	}
	mmSetModerateStatus.defaultExpectation.results = &CampaignServiceMockSetModerateStatusResults{err}
	mmSetModerateStatus.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSetModerateStatus.mock
}

// Set uses given function f to mock the CampaignService.SetModerateStatus method
func (mmSetModerateStatus *mCampaignServiceMockSetModerateStatus) Set(f func(ctx context.Context, moderate bool) (err error)) *CampaignServiceMock {
	if mmSetModerateStatus.defaultExpectation != nil {
		mmSetModerateStatus.mock.t.Fatalf("Default expectation is already set for the CampaignService.SetModerateStatus method")
	}

	if len(mmSetModerateStatus.expectations) > 0 {
		mmSetModerateStatus.mock.t.Fatalf("Some expectations are already set for the CampaignService.SetModerateStatus method")
	}

	mmSetModerateStatus.mock.funcSetModerateStatus = f
	mmSetModerateStatus.mock.funcSetModerateStatusOrigin = minimock.CallerInfo(1)
	return mmSetModerateStatus.mock
}

// When sets expectation for the CampaignService.SetModerateStatus which will trigger the result defined by the following
// Then helper
func (mmSetModerateStatus *mCampaignServiceMockSetModerateStatus) When(ctx context.Context, moderate bool) *CampaignServiceMockSetModerateStatusExpectation {
	if mmSetModerateStatus.mock.funcSetModerateStatus != nil {
		mmSetModerateStatus.mock.t.Fatalf("CampaignServiceMock.SetModerateStatus mock is already set by Set")
	}

	expectation := &CampaignServiceMockSetModerateStatusExpectation{
		mock:               mmSetModerateStatus.mock,
		params:             &CampaignServiceMockSetModerateStatusParams{ctx, moderate},
		expectationOrigins: CampaignServiceMockSetModerateStatusExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSetModerateStatus.expectations = append(mmSetModerateStatus.expectations, expectation)
	return expectation
}

// Then sets up CampaignService.SetModerateStatus return parameters for the expectation previously defined by the When method
func (e *CampaignServiceMockSetModerateStatusExpectation) Then(err error) *CampaignServiceMock {
	e.results = &CampaignServiceMockSetModerateStatusResults{err}
	return e.mock
}

// Times sets number of times CampaignService.SetModerateStatus should be invoked
func (mmSetModerateStatus *mCampaignServiceMockSetModerateStatus) Times(n uint64) *mCampaignServiceMockSetModerateStatus {
	if n == 0 {
		mmSetModerateStatus.mock.t.Fatalf("Times of CampaignServiceMock.SetModerateStatus mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSetModerateStatus.expectedInvocations, n)
	mmSetModerateStatus.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSetModerateStatus
}

func (mmSetModerateStatus *mCampaignServiceMockSetModerateStatus) invocationsDone() bool {
	if len(mmSetModerateStatus.expectations) == 0 && mmSetModerateStatus.defaultExpectation == nil && mmSetModerateStatus.mock.funcSetModerateStatus == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSetModerateStatus.mock.afterSetModerateStatusCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSetModerateStatus.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// SetModerateStatus implements mm_service.CampaignService
func (mmSetModerateStatus *CampaignServiceMock) SetModerateStatus(ctx context.Context, moderate bool) (err error) {
	mm_atomic.AddUint64(&mmSetModerateStatus.beforeSetModerateStatusCounter, 1)
	defer mm_atomic.AddUint64(&mmSetModerateStatus.afterSetModerateStatusCounter, 1)

	mmSetModerateStatus.t.Helper()

	if mmSetModerateStatus.inspectFuncSetModerateStatus != nil {
		mmSetModerateStatus.inspectFuncSetModerateStatus(ctx, moderate)
	}

	mm_params := CampaignServiceMockSetModerateStatusParams{ctx, moderate}

	// Record call args
	mmSetModerateStatus.SetModerateStatusMock.mutex.Lock()
	mmSetModerateStatus.SetModerateStatusMock.callArgs = append(mmSetModerateStatus.SetModerateStatusMock.callArgs, &mm_params)
	mmSetModerateStatus.SetModerateStatusMock.mutex.Unlock()

	for _, e := range mmSetModerateStatus.SetModerateStatusMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSetModerateStatus.SetModerateStatusMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetModerateStatus.SetModerateStatusMock.defaultExpectation.Counter, 1)
		mm_want := mmSetModerateStatus.SetModerateStatusMock.defaultExpectation.params
		mm_want_ptrs := mmSetModerateStatus.SetModerateStatusMock.defaultExpectation.paramPtrs

		mm_got := CampaignServiceMockSetModerateStatusParams{ctx, moderate}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSetModerateStatus.t.Errorf("CampaignServiceMock.SetModerateStatus got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSetModerateStatus.SetModerateStatusMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.moderate != nil && !minimock.Equal(*mm_want_ptrs.moderate, mm_got.moderate) {
				mmSetModerateStatus.t.Errorf("CampaignServiceMock.SetModerateStatus got unexpected parameter moderate, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSetModerateStatus.SetModerateStatusMock.defaultExpectation.expectationOrigins.originModerate, *mm_want_ptrs.moderate, mm_got.moderate, minimock.Diff(*mm_want_ptrs.moderate, mm_got.moderate))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSetModerateStatus.t.Errorf("CampaignServiceMock.SetModerateStatus got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSetModerateStatus.SetModerateStatusMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSetModerateStatus.SetModerateStatusMock.defaultExpectation.results
		if mm_results == nil {
			mmSetModerateStatus.t.Fatal("No results are set for the CampaignServiceMock.SetModerateStatus")
		}
		return (*mm_results).err
	}
	if mmSetModerateStatus.funcSetModerateStatus != nil {
		return mmSetModerateStatus.funcSetModerateStatus(ctx, moderate)
	}
	mmSetModerateStatus.t.Fatalf("Unexpected call to CampaignServiceMock.SetModerateStatus. %v %v", ctx, moderate)
	return
}

// SetModerateStatusAfterCounter returns a count of finished CampaignServiceMock.SetModerateStatus invocations
func (mmSetModerateStatus *CampaignServiceMock) SetModerateStatusAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetModerateStatus.afterSetModerateStatusCounter)
}

// SetModerateStatusBeforeCounter returns a count of CampaignServiceMock.SetModerateStatus invocations
func (mmSetModerateStatus *CampaignServiceMock) SetModerateStatusBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetModerateStatus.beforeSetModerateStatusCounter)
}

// Calls returns a list of arguments used in each call to CampaignServiceMock.SetModerateStatus.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetModerateStatus *mCampaignServiceMockSetModerateStatus) Calls() []*CampaignServiceMockSetModerateStatusParams {
	mmSetModerateStatus.mutex.RLock()

	argCopy := make([]*CampaignServiceMockSetModerateStatusParams, len(mmSetModerateStatus.callArgs))
	copy(argCopy, mmSetModerateStatus.callArgs)

	mmSetModerateStatus.mutex.RUnlock()

	return argCopy
}

// MinimockSetModerateStatusDone returns true if the count of the SetModerateStatus invocations corresponds
// the number of defined expectations
func (m *CampaignServiceMock) MinimockSetModerateStatusDone() bool {
	if m.SetModerateStatusMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SetModerateStatusMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SetModerateStatusMock.invocationsDone()
}

// MinimockSetModerateStatusInspect logs each unmet expectation
func (m *CampaignServiceMock) MinimockSetModerateStatusInspect() {
	for _, e := range m.SetModerateStatusMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CampaignServiceMock.SetModerateStatus at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSetModerateStatusCounter := mm_atomic.LoadUint64(&m.afterSetModerateStatusCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SetModerateStatusMock.defaultExpectation != nil && afterSetModerateStatusCounter < 1 {
		if m.SetModerateStatusMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to CampaignServiceMock.SetModerateStatus at\n%s", m.SetModerateStatusMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to CampaignServiceMock.SetModerateStatus at\n%s with params: %#v", m.SetModerateStatusMock.defaultExpectation.expectationOrigins.origin, *m.SetModerateStatusMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetModerateStatus != nil && afterSetModerateStatusCounter < 1 {
		m.t.Errorf("Expected call to CampaignServiceMock.SetModerateStatus at\n%s", m.funcSetModerateStatusOrigin)
	}

	if !m.SetModerateStatusMock.invocationsDone() && afterSetModerateStatusCounter > 0 {
		m.t.Errorf("Expected %d calls to CampaignServiceMock.SetModerateStatus at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SetModerateStatusMock.expectedInvocations), m.SetModerateStatusMock.expectedInvocationsOrigin, afterSetModerateStatusCounter)
	}
}

type mCampaignServiceMockUpdate struct {
	optional           bool
	mock               *CampaignServiceMock
	defaultExpectation *CampaignServiceMockUpdateExpectation
	expectations       []*CampaignServiceMockUpdateExpectation

	callArgs []*CampaignServiceMockUpdateParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// CampaignServiceMockUpdateExpectation specifies expectation struct of the CampaignService.Update
type CampaignServiceMockUpdateExpectation struct {
	mock               *CampaignServiceMock
	params             *CampaignServiceMockUpdateParams
	paramPtrs          *CampaignServiceMockUpdateParamPtrs
	expectationOrigins CampaignServiceMockUpdateExpectationOrigins
	results            *CampaignServiceMockUpdateResults
	returnOrigin       string
	Counter            uint64
}

// CampaignServiceMockUpdateParams contains parameters of the CampaignService.Update
type CampaignServiceMockUpdateParams struct {
	ctx      context.Context
	campaign *model.Campaign
}

// CampaignServiceMockUpdateParamPtrs contains pointers to parameters of the CampaignService.Update
type CampaignServiceMockUpdateParamPtrs struct {
	ctx      *context.Context
	campaign **model.Campaign
}

// CampaignServiceMockUpdateResults contains results of the CampaignService.Update
type CampaignServiceMockUpdateResults struct {
	cp1 *model.Campaign
	err error
}

// CampaignServiceMockUpdateOrigins contains origins of expectations of the CampaignService.Update
type CampaignServiceMockUpdateExpectationOrigins struct {
	origin         string
	originCtx      string
	originCampaign string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdate *mCampaignServiceMockUpdate) Optional() *mCampaignServiceMockUpdate {
	mmUpdate.optional = true
	return mmUpdate
}

// Expect sets up expected params for CampaignService.Update
func (mmUpdate *mCampaignServiceMockUpdate) Expect(ctx context.Context, campaign *model.Campaign) *mCampaignServiceMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("CampaignServiceMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &CampaignServiceMockUpdateExpectation{}
	}

	if mmUpdate.defaultExpectation.paramPtrs != nil {
		mmUpdate.mock.t.Fatalf("CampaignServiceMock.Update mock is already set by ExpectParams functions")
	}

	mmUpdate.defaultExpectation.params = &CampaignServiceMockUpdateParams{ctx, campaign}
	mmUpdate.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdate.expectations {
		if minimock.Equal(e.params, mmUpdate.defaultExpectation.params) {
			mmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdate.defaultExpectation.params)
		}
	}

	return mmUpdate
}

// ExpectCtxParam1 sets up expected param ctx for CampaignService.Update
func (mmUpdate *mCampaignServiceMockUpdate) ExpectCtxParam1(ctx context.Context) *mCampaignServiceMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("CampaignServiceMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &CampaignServiceMockUpdateExpectation{}
	}

	if mmUpdate.defaultExpectation.params != nil {
		mmUpdate.mock.t.Fatalf("CampaignServiceMock.Update mock is already set by Expect")
	}

	if mmUpdate.defaultExpectation.paramPtrs == nil {
		mmUpdate.defaultExpectation.paramPtrs = &CampaignServiceMockUpdateParamPtrs{}
	}
	mmUpdate.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdate.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdate
}

// ExpectCampaignParam2 sets up expected param campaign for CampaignService.Update
func (mmUpdate *mCampaignServiceMockUpdate) ExpectCampaignParam2(campaign *model.Campaign) *mCampaignServiceMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("CampaignServiceMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &CampaignServiceMockUpdateExpectation{}
	}

	if mmUpdate.defaultExpectation.params != nil {
		mmUpdate.mock.t.Fatalf("CampaignServiceMock.Update mock is already set by Expect")
	}

	if mmUpdate.defaultExpectation.paramPtrs == nil {
		mmUpdate.defaultExpectation.paramPtrs = &CampaignServiceMockUpdateParamPtrs{}
	}
	mmUpdate.defaultExpectation.paramPtrs.campaign = &campaign
	mmUpdate.defaultExpectation.expectationOrigins.originCampaign = minimock.CallerInfo(1)

	return mmUpdate
}

// Inspect accepts an inspector function that has same arguments as the CampaignService.Update
func (mmUpdate *mCampaignServiceMockUpdate) Inspect(f func(ctx context.Context, campaign *model.Campaign)) *mCampaignServiceMockUpdate {
	if mmUpdate.mock.inspectFuncUpdate != nil {
		mmUpdate.mock.t.Fatalf("Inspect function is already set for CampaignServiceMock.Update")
	}

	mmUpdate.mock.inspectFuncUpdate = f

	return mmUpdate
}

// Return sets up results that will be returned by CampaignService.Update
func (mmUpdate *mCampaignServiceMockUpdate) Return(cp1 *model.Campaign, err error) *CampaignServiceMock {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("CampaignServiceMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &CampaignServiceMockUpdateExpectation{mock: mmUpdate.mock}
	}
	mmUpdate.defaultExpectation.results = &CampaignServiceMockUpdateResults{cp1, err}
	mmUpdate.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdate.mock
}

// Set uses given function f to mock the CampaignService.Update method
func (mmUpdate *mCampaignServiceMockUpdate) Set(f func(ctx context.Context, campaign *model.Campaign) (cp1 *model.Campaign, err error)) *CampaignServiceMock {
	if mmUpdate.defaultExpectation != nil {
		mmUpdate.mock.t.Fatalf("Default expectation is already set for the CampaignService.Update method")
	}

	if len(mmUpdate.expectations) > 0 {
		mmUpdate.mock.t.Fatalf("Some expectations are already set for the CampaignService.Update method")
	}

	mmUpdate.mock.funcUpdate = f
	mmUpdate.mock.funcUpdateOrigin = minimock.CallerInfo(1)
	return mmUpdate.mock
}

// When sets expectation for the CampaignService.Update which will trigger the result defined by the following
// Then helper
func (mmUpdate *mCampaignServiceMockUpdate) When(ctx context.Context, campaign *model.Campaign) *CampaignServiceMockUpdateExpectation {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("CampaignServiceMock.Update mock is already set by Set")
	}

	expectation := &CampaignServiceMockUpdateExpectation{
		mock:               mmUpdate.mock,
		params:             &CampaignServiceMockUpdateParams{ctx, campaign},
		expectationOrigins: CampaignServiceMockUpdateExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdate.expectations = append(mmUpdate.expectations, expectation)
	return expectation
}

// Then sets up CampaignService.Update return parameters for the expectation previously defined by the When method
func (e *CampaignServiceMockUpdateExpectation) Then(cp1 *model.Campaign, err error) *CampaignServiceMock {
	e.results = &CampaignServiceMockUpdateResults{cp1, err}
	return e.mock
}

// Times sets number of times CampaignService.Update should be invoked
func (mmUpdate *mCampaignServiceMockUpdate) Times(n uint64) *mCampaignServiceMockUpdate {
	if n == 0 {
		mmUpdate.mock.t.Fatalf("Times of CampaignServiceMock.Update mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdate.expectedInvocations, n)
	mmUpdate.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdate
}

func (mmUpdate *mCampaignServiceMockUpdate) invocationsDone() bool {
	if len(mmUpdate.expectations) == 0 && mmUpdate.defaultExpectation == nil && mmUpdate.mock.funcUpdate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdate.mock.afterUpdateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Update implements mm_service.CampaignService
func (mmUpdate *CampaignServiceMock) Update(ctx context.Context, campaign *model.Campaign) (cp1 *model.Campaign, err error) {
	mm_atomic.AddUint64(&mmUpdate.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdate.afterUpdateCounter, 1)

	mmUpdate.t.Helper()

	if mmUpdate.inspectFuncUpdate != nil {
		mmUpdate.inspectFuncUpdate(ctx, campaign)
	}

	mm_params := CampaignServiceMockUpdateParams{ctx, campaign}

	// Record call args
	mmUpdate.UpdateMock.mutex.Lock()
	mmUpdate.UpdateMock.callArgs = append(mmUpdate.UpdateMock.callArgs, &mm_params)
	mmUpdate.UpdateMock.mutex.Unlock()

	for _, e := range mmUpdate.UpdateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1, e.results.err
		}
	}

	if mmUpdate.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdate.UpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdate.UpdateMock.defaultExpectation.params
		mm_want_ptrs := mmUpdate.UpdateMock.defaultExpectation.paramPtrs

		mm_got := CampaignServiceMockUpdateParams{ctx, campaign}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdate.t.Errorf("CampaignServiceMock.Update got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdate.UpdateMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.campaign != nil && !minimock.Equal(*mm_want_ptrs.campaign, mm_got.campaign) {
				mmUpdate.t.Errorf("CampaignServiceMock.Update got unexpected parameter campaign, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdate.UpdateMock.defaultExpectation.expectationOrigins.originCampaign, *mm_want_ptrs.campaign, mm_got.campaign, minimock.Diff(*mm_want_ptrs.campaign, mm_got.campaign))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdate.t.Errorf("CampaignServiceMock.Update got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdate.UpdateMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdate.UpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdate.t.Fatal("No results are set for the CampaignServiceMock.Update")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmUpdate.funcUpdate != nil {
		return mmUpdate.funcUpdate(ctx, campaign)
	}
	mmUpdate.t.Fatalf("Unexpected call to CampaignServiceMock.Update. %v %v", ctx, campaign)
	return
}

// UpdateAfterCounter returns a count of finished CampaignServiceMock.Update invocations
func (mmUpdate *CampaignServiceMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of CampaignServiceMock.Update invocations
func (mmUpdate *CampaignServiceMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.beforeUpdateCounter)
}

// Calls returns a list of arguments used in each call to CampaignServiceMock.Update.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdate *mCampaignServiceMockUpdate) Calls() []*CampaignServiceMockUpdateParams {
	mmUpdate.mutex.RLock()

	argCopy := make([]*CampaignServiceMockUpdateParams, len(mmUpdate.callArgs))
	copy(argCopy, mmUpdate.callArgs)

	mmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *CampaignServiceMock) MinimockUpdateDone() bool {
	if m.UpdateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateMock.invocationsDone()
}

// MinimockUpdateInspect logs each unmet expectation
func (m *CampaignServiceMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CampaignServiceMock.Update at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdateCounter := mm_atomic.LoadUint64(&m.afterUpdateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && afterUpdateCounter < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to CampaignServiceMock.Update at\n%s", m.UpdateMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to CampaignServiceMock.Update at\n%s with params: %#v", m.UpdateMock.defaultExpectation.expectationOrigins.origin, *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && afterUpdateCounter < 1 {
		m.t.Errorf("Expected call to CampaignServiceMock.Update at\n%s", m.funcUpdateOrigin)
	}

	if !m.UpdateMock.invocationsDone() && afterUpdateCounter > 0 {
		m.t.Errorf("Expected %d calls to CampaignServiceMock.Update at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateMock.expectedInvocations), m.UpdateMock.expectedInvocationsOrigin, afterUpdateCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CampaignServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateInspect()

			m.MinimockDeleteInspect()

			m.MinimockGetInspect()

			m.MinimockListInspect()

			m.MinimockSaveImageInspect()

			m.MinimockSetModerateStatusInspect()

			m.MinimockUpdateInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CampaignServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CampaignServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockDeleteDone() &&
		m.MinimockGetDone() &&
		m.MinimockListDone() &&
		m.MinimockSaveImageDone() &&
		m.MinimockSetModerateStatusDone() &&
		m.MinimockUpdateDone()
}
